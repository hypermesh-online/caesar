# Gateway Coin Hypermesh Load Balancer Configuration
# Production-ready NGINX configuration with health-aware routing

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Performance tuning
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging configuration
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=metrics:10m rate=10r/m;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    
    # Real IP configuration
    set_real_ip_from 172.20.0.0/16;
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    
    # Upstream definitions with health checks
    upstream nexus_backend {
        least_conn;
        server hypermesh-nexus:8080 max_fails=3 fail_timeout=30s;
        # Add more nexus nodes here as needed
        keepalive 32;
    }
    
    upstream stoq_backend {
        least_conn;
        server stoq-engine:8081 max_fails=3 fail_timeout=30s;
        # Add more STOQ nodes here as needed
        keepalive 16;
    }
    
    upstream ml_backend {
        least_conn;
        server ml-inference:8082 max_fails=3 fail_timeout=30s;
        keepalive 8;
    }
    
    upstream metrics_backend {
        least_conn;
        server hypermesh-nexus:9090 max_fails=2 fail_timeout=30s;
        server stoq-engine:9091 max_fails=2 fail_timeout=30s;
        server ml-inference:9092 max_fails=2 fail_timeout=30s;
        keepalive 8;
    }
    
    # Main server block - HTTP redirect to HTTPS
    server {
        listen 80;
        server_name _;
        return 301 https://$server_name$request_uri;
    }
    
    # HTTPS server block
    server {
        listen 443 ssl http2;
        server_name _;
        
        # SSL configuration
        ssl_certificate /etc/ssl/certs/gateway-coin.crt;
        ssl_certificate_key /etc/ssl/certs/gateway-coin.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
        ssl_ecdh_curve secp384r1;
        ssl_session_timeout 10m;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;
        
        # Security headers for HTTPS
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
        
        # Connection limits
        limit_conn addr 20;
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Nexus Core API
        location /api/nexus/ {
            limit_req zone=api burst=50 nodelay;
            
            proxy_pass http://nexus_backend/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_buffering off;
            proxy_request_buffering off;
            
            # Circuit breaker
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 10s;
        }
        
        # STOQ Protocol API
        location /api/stoq/ {
            limit_req zone=api burst=30 nodelay;
            
            proxy_pass http://stoq_backend/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_buffering off;
            
            # Circuit breaker
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 10s;
        }
        
        # ML Inference API
        location /api/ml/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://ml_backend/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 60s;  # ML inference may take longer
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
            proxy_buffering off;
            
            # Circuit breaker with longer timeout for ML
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 30s;
        }
        
        # Metrics endpoint
        location /metrics {
            limit_req zone=metrics burst=5 nodelay;
            
            proxy_pass http://metrics_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # WebSocket support for real-time updates
        location /ws {
            proxy_pass http://nexus_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
            proxy_connect_timeout 30s;
        }
        
        # Static files and dashboard
        location / {
            root /var/www/html;
            index index.html index.htm;
            try_files $uri $uri/ @nexus;
            
            # Cache static assets
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
        }
        
        # Fallback to nexus for API routes
        location @nexus {
            proxy_pass http://nexus_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
    
    # Status page for monitoring
    server {
        listen 8080;
        server_name localhost;
        
        location /status {
            stub_status on;
            access_log off;
            allow 172.20.0.0/16;
            deny all;
        }
        
        location /health-detailed {
            access_log off;
            allow 172.20.0.0/16;
            deny all;
            
            content_by_lua_block {
                local http = require "resty.http"
                local cjson = require "cjson"
                
                local health = {
                    timestamp = ngx.time(),
                    status = "healthy",
                    services = {}
                }
                
                -- Check nexus health
                local httpc = http.new()
                local res, err = httpc:request_uri("http://hypermesh-nexus:8080/health", {
                    timeout = 5000,
                    method = "GET"
                })
                
                if res and res.status == 200 then
                    health.services.nexus = "healthy"
                else
                    health.services.nexus = "unhealthy"
                    health.status = "degraded"
                end
                
                -- Check STOQ health
                res, err = httpc:request_uri("http://stoq-engine:8081/health", {
                    timeout = 5000,
                    method = "GET"
                })
                
                if res and res.status == 200 then
                    health.services.stoq = "healthy"
                else
                    health.services.stoq = "unhealthy"
                    health.status = "degraded"
                end
                
                ngx.header.content_type = "application/json"
                ngx.say(cjson.encode(health))
            }
        }
    }
}