AWSTemplateFormatVersion: '2010-09-09'
Description: 'Caesar Token Hypermesh Infrastructure - Production-ready deployment on AWS'

Parameters:
  Environment:
    Type: String
    Default: development
    AllowedValues:
      - development
      - staging
      - production
    Description: Deployment environment
    
  InstanceType:
    Type: String
    Default: t3.large
    AllowedValues:
      - t3.medium
      - t3.large
      - t3.xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
    Description: EC2 instance type for hypermesh nodes
    
  NodeCount:
    Type: Number
    Default: 3
    MinValue: 3
    MaxValue: 10
    Description: Number of hypermesh nodes for Byzantine fault tolerance
    
  VPCCidr:
    Type: String
    Default: '10.0.0.0/16'
    Description: CIDR block for the VPC
    
  DatabaseStorage:
    Type: Number
    Default: 100
    MinValue: 20
    MaxValue: 1000
    Description: Storage size in GB for the database
    
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair for SSH access

Mappings:
  EnvironmentMap:
    development:
      InstanceType: t3.medium
      NodeCount: 3
      DatabaseStorage: 20
    staging:
      InstanceType: t3.large
      NodeCount: 3
      DatabaseStorage: 50
    production:
      InstanceType: c5.xlarge
      NodeCount: 5
      DatabaseStorage: 200

Conditions:
  IsProduction: !Equals [!Ref Environment, production]
  IsStaging: !Equals [!Ref Environment, staging]
  IsDevelopment: !Equals [!Ref Environment, development]

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-caesar-token-vpc'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: caesar-token

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-caesar-token-igw'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub '10.0.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-caesar-token-public-subnet-1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub '10.0.2.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-caesar-token-public-subnet-2'

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub '10.0.3.0/24'
      AvailabilityZone: !Select [2, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-caesar-token-public-subnet-3'

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub '10.0.11.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-caesar-token-private-subnet-1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub '10.0.12.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-caesar-token-private-subnet-2'

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Sub '10.0.13.0/24'
      AvailabilityZone: !Select [2, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-caesar-token-private-subnet-3'

  # NAT Gateways for private subnets
  NATGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-caesar-token-public-routes'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-caesar-token-private-routes-1'

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable1

  # Security Groups
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Environment}-caesar-token-lb-sg'
      GroupDescription: Security group for Caesar Token Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS access
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-caesar-token-lb-sg'

  HypermeshNodesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Environment}-caesar-token-nodes-sg'
      GroupDescription: Security group for Hypermesh nodes
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8083
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          Description: API access from load balancer
        - IpProtocol: tcp
          FromPort: 4001
          ToPort: 4003
          CidrIp: 10.0.0.0/16
          Description: QUIC and P2P communication
        - IpProtocol: tcp
          FromPort: 7001
          ToPort: 7003
          CidrIp: 10.0.0.0/16
          Description: Redis cluster communication
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/16
          Description: SSH access
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-caesar-token-nodes-sg'

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Environment}-caesar-token-db-sg'
      GroupDescription: Security group for databases
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref HypermeshNodesSecurityGroup
          Description: PostgreSQL access from nodes
        - IpProtocol: tcp
          FromPort: 8086
          ToPort: 8086
          SourceSecurityGroupId: !Ref HypermeshNodesSecurityGroup
          Description: InfluxDB access from nodes
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-caesar-token-db-sg'

  # IAM Roles
  HypermeshInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: HypermeshNodePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeNetworkInterfaces
                  - ec2:AttachNetworkInterface
                  - ec2:DetachNetworkInterface
                  - secretsmanager:GetSecretValue
                  - secretsmanager:UpdateSecret
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: '*'

  HypermeshInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref HypermeshInstanceRole

  # Launch Template
  HypermeshLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${Environment}-caesar-token-hypermesh'
      LaunchTemplateData:
        ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2 AMI
        InstanceType: !FindInMap [EnvironmentMap, !Ref Environment, InstanceType]
        KeyName: !Ref KeyPairName
        IamInstanceProfile:
          Arn: !GetAtt HypermeshInstanceProfile.Arn
        SecurityGroupIds:
          - !Ref HypermeshNodesSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y docker git
            
            # Install Docker Compose
            curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            
            # Start Docker
            systemctl start docker
            systemctl enable docker
            usermod -aG docker ec2-user
            
            # Install eBPF dependencies
            yum install -y kernel-devel kernel-headers clang llvm
            
            # Clone Caesar Token repository
            cd /opt
            git clone https://github.com/TheNexusGroup/caesar-token.git
            cd caesar-token/infrastructure/hypermesh
            
            # Generate certificates
            ./scripts/generate-certs.sh
            
            # Deploy infrastructure
            ./scripts/deploy-infrastructure.sh deploy
            
            # Configure CloudWatch agent
            wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
            rpm -U ./amazon-cloudwatch-agent.rpm
            
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub '${Environment}-caesar-token-hypermesh-node'
              - Key: Environment
                Value: !Ref Environment

  # Auto Scaling Group
  HypermeshAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub '${Environment}-caesar-token-hypermesh-asg'
      LaunchTemplate:
        LaunchTemplateId: !Ref HypermeshLaunchTemplate
        Version: !GetAtt HypermeshLaunchTemplate.LatestVersionNumber
      MinSize: !FindInMap [EnvironmentMap, !Ref Environment, NodeCount]
      MaxSize: !If [IsProduction, 10, 5]
      DesiredCapacity: !FindInMap [EnvironmentMap, !Ref Environment, NodeCount]
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      TargetGroupARNs:
        - !Ref NexusTargetGroup
        - !Ref STOQTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-caesar-token-hypermesh-asg'
          PropagateAtLaunch: false
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: true

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${Environment}-caesar-token-alb'
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-caesar-token-alb'
        - Key: Environment
          Value: !Ref Environment

  # Target Groups
  NexusTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${Environment}-caesar-token-nexus-tg'
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetType: instance
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-caesar-token-nexus-tg'

  STOQTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${Environment}-caesar-token-stoq-tg'
      Port: 8081
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetType: instance
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-caesar-token-stoq-tg'

  # ALB Listeners
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NexusTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref STOQTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - '/api/stoq/*'
      ListenerArn: !Ref ALBListener
      Priority: 100

  # RDS Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub '${Environment}-caesar-token-db-subnet-group'
      DBSubnetGroupDescription: Subnet group for Caesar Token database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-caesar-token-db-subnet-group'

  # RDS Instance for persistent storage
  RDSInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: !If [IsProduction, Snapshot, Delete]
    Properties:
      DBName: gatewayooin
      DBInstanceIdentifier: !Sub '${Environment}-caesar-token-db'
      DBInstanceClass: !If [IsProduction, db.t3.large, db.t3.micro]
      Engine: postgres
      EngineVersion: '13.13'
      MasterUsername: admin
      MasterUserPassword: !Ref 'AWS::NoValue'  # Will be auto-generated
      ManageMasterUserPassword: true
      AllocatedStorage: !FindInMap [EnvironmentMap, !Ref Environment, DatabaseStorage]
      StorageType: gp2
      StorageEncrypted: true
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      BackupRetentionPeriod: !If [IsProduction, 7, 1]
      MultiAZ: !If [IsProduction, true, false]
      MonitoringInterval: !If [IsProduction, 60, 0]
      MonitoringRoleArn: !If
        - IsProduction
        - !GetAtt RDSEnhancedMonitoringRole.Arn
        - !Ref 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-caesar-token-db'
        - Key: Environment
          Value: !Ref Environment

  # Enhanced monitoring role for RDS (production only)
  RDSEnhancedMonitoringRole:
    Type: AWS::IAM::Role
    Condition: IsProduction
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: monitoring.rds.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole'

  # CloudWatch Log Groups
  NexusLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/ec2/${Environment}-caesar-token-nexus'
      RetentionInDays: !If [IsProduction, 30, 7]

  STOQLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/ec2/${Environment}-caesar-token-stoq'
      RetentionInDays: !If [IsProduction, 30, 7]

Outputs:
  LoadBalancerURL:
    Description: URL of the load balancer
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}'
    Export:
      Name: !Sub '${Environment}-caesar-token-lb-url'

  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${Environment}-caesar-token-vpc-id'

  DatabaseEndpoint:
    Description: Database endpoint
    Value: !GetAtt RDSInstance.Endpoint.Address
    Export:
      Name: !Sub '${Environment}-caesar-token-db-endpoint'

  NexusTargetGroupArn:
    Description: Nexus target group ARN
    Value: !Ref NexusTargetGroup
    Export:
      Name: !Sub '${Environment}-caesar-token-nexus-tg-arn'

  STOQTargetGroupArn:
    Description: STOQ target group ARN
    Value: !Ref STOQTargetGroup
    Export:
      Name: !Sub '${Environment}-caesar-token-stoq-tg-arn'