import React, { useState, useCallback } from 'react';
import { usePlaidLink, PlaidLinkOptions, PlaidLinkOnSuccess } from 'react-plaid-link';
import { CreditCard, Plus, AlertCircle, CheckCircle } from 'lucide-react';

interface PlaidLinkProps {
  onSuccess: (publicToken: string, metadata: any) => void;
  onError?: (error: any) => void;
  className?: string;
}

interface BankAccount {
  id: string;
  name: string;
  type: string;
  subtype: string;
  mask: string;
  connected: boolean;
}

const PlaidLink: React.FC<PlaidLinkProps> = ({
  onSuccess,
  onError,
  className = ''
}) => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [accounts, setAccounts] = useState<BankAccount[]>([]);

  const handleSuccess: PlaidLinkOnSuccess = useCallback(
    (publicToken: string, metadata: any) => {
      setLoading(true);
      setError(null);
      
      // Extract account information
      const accountsData = metadata.accounts.map((account: any) => ({
        id: account.id,
        name: account.name,
        type: account.type,
        subtype: account.subtype,
        mask: account.mask,
        connected: true
      }));
      
      setAccounts(accountsData);
      onSuccess(publicToken, metadata);
      setLoading(false);
    },
    [onSuccess]
  );

  const handleError = useCallback(
    (error: any) => {
      setError(error.error_message || 'Failed to connect bank account');
      setLoading(false);
      if (onError) {
        onError(error);
      }
    },
    [onError]
  );

  const config: PlaidLinkOptions = {
    token: import.meta.env.VITE_PLAID_LINK_TOKEN || '', // This will be generated by your backend
    onSuccess: handleSuccess,
    onExit: (error) => {
      if (error) {
        handleError(error);
      }
    },
    onEvent: (eventName, metadata) => {
      console.log('Plaid event:', eventName, metadata);
    },
    env: (import.meta.env.VITE_PLAID_ENV as any) || 'sandbox', // 'sandbox' | 'development' | 'production'
    product: ['auth', 'transactions'], // Enable bank auth and transaction data
    countryCodes: ['US'], // Adjust based on your supported countries
  };

  const { open, ready } = usePlaidLink(config);

  const handleClick = () => {
    if (!config.token) {
      setError('Plaid configuration not available. Please contact support.');
      return;
    }
    setLoading(true);
    open();
  };

  return (
    <div className={`space-y-4 ${className}`}>
      {/* Connect Button */}
      <button
        onClick={handleClick}
        disabled={!ready || loading}
        className="w-full btn-primary text-lg py-4 flex items-center justify-center gap-3"
      >
        {loading ? (
          <div className="loading-spinner" />
        ) : (
          <Plus size={20} />
        )}
        {loading ? 'Connecting...' : 'Connect Bank Account'}
      </button>

      {/* Error Display */}
      {error && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4 flex items-start gap-3">
          <AlertCircle size={20} className="text-red-500 flex-shrink-0 mt-0.5" />
          <div>
            <p className="text-red-800 font-medium">Connection Error</p>
            <p className="text-red-600 text-sm mt-1">{error}</p>
          </div>
        </div>
      )}

      {/* Connected Accounts */}
      {accounts.length > 0 && (
        <div className="space-y-3">
          <h3 className="text-lg font-semibold text-gray-900">Connected Accounts</h3>
          {accounts.map((account) => (
            <div
              key={account.id}
              className="bg-green-50 border border-green-200 rounded-lg p-4 flex items-center gap-3"
            >
              <CheckCircle size={20} className="text-green-500 flex-shrink-0" />
              <div className="flex-1">
                <div className="flex items-center gap-2">
                  <CreditCard size={16} className="text-gray-600" />
                  <span className="font-medium text-gray-900">{account.name}</span>
                  {account.mask && (
                    <span className="text-gray-500 text-sm">••••{account.mask}</span>
                  )}
                </div>
                <p className="text-green-700 text-sm mt-1">
                  {account.type} • {account.subtype}
                </p>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Info Box */}
      <div className="glass-card bg-blue-500 bg-opacity-10 border border-blue-500 border-opacity-20">
        <h4 className="font-semibold text-blue-300 mb-3">Secure Bank Connection</h4>
        <ul className="text-blue-200 text-sm space-y-2">
          <li className="flex items-center gap-2">
            <div className="w-1.5 h-1.5 bg-blue-400 rounded-full"></div>
            Bank-level security with 256-bit encryption
          </li>
          <li className="flex items-center gap-2">
            <div className="w-1.5 h-1.5 bg-blue-400 rounded-full"></div>
            Read-only access to your account information
          </li>
          <li className="flex items-center gap-2">
            <div className="w-1.5 h-1.5 bg-blue-400 rounded-full"></div>
            Instantly verify your account for transfers
          </li>
          <li className="flex items-center gap-2">
            <div className="w-1.5 h-1.5 bg-blue-400 rounded-full"></div>
            Supported by 11,000+ financial institutions
          </li>
        </ul>
      </div>
    </div>
  );
};

export default PlaidLink;