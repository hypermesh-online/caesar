/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../common";

export type EnforcedOptionParamStruct = {
  eid: BigNumberish;
  msgType: BigNumberish;
  options: BytesLike;
};

export type EnforcedOptionParamStructOutput = [number, number, string] & {
  eid: number;
  msgType: number;
  options: string;
};

export interface OAppOptionsType3Interface extends utils.Interface {
  functions: {
    "combineOptions(uint32,uint16,bytes)": FunctionFragment;
    "enforcedOptions(uint32,uint16)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setEnforcedOptions((uint32,uint16,bytes)[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "combineOptions"
      | "enforcedOptions"
      | "owner"
      | "renounceOwnership"
      | "setEnforcedOptions"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "combineOptions",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enforcedOptions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEnforcedOptions",
    values: [EnforcedOptionParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "combineOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enforcedOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnforcedOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "EnforcedOptionSet((uint32,uint16,bytes)[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EnforcedOptionSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface EnforcedOptionSetEventObject {
  _enforcedOptions: EnforcedOptionParamStructOutput[];
}
export type EnforcedOptionSetEvent = TypedEvent<
  [EnforcedOptionParamStructOutput[]],
  EnforcedOptionSetEventObject
>;

export type EnforcedOptionSetEventFilter =
  TypedEventFilter<EnforcedOptionSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface OAppOptionsType3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OAppOptionsType3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    combineOptions(
      _eid: BigNumberish,
      _msgType: BigNumberish,
      _extraOptions: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    enforcedOptions(
      eid: BigNumberish,
      msgType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { enforcedOption: string }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setEnforcedOptions(
      _enforcedOptions: EnforcedOptionParamStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  combineOptions(
    _eid: BigNumberish,
    _msgType: BigNumberish,
    _extraOptions: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  enforcedOptions(
    eid: BigNumberish,
    msgType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setEnforcedOptions(
    _enforcedOptions: EnforcedOptionParamStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    combineOptions(
      _eid: BigNumberish,
      _msgType: BigNumberish,
      _extraOptions: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    enforcedOptions(
      eid: BigNumberish,
      msgType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setEnforcedOptions(
      _enforcedOptions: EnforcedOptionParamStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EnforcedOptionSet((uint32,uint16,bytes)[])"(
      _enforcedOptions?: null
    ): EnforcedOptionSetEventFilter;
    EnforcedOptionSet(_enforcedOptions?: null): EnforcedOptionSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    combineOptions(
      _eid: BigNumberish,
      _msgType: BigNumberish,
      _extraOptions: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enforcedOptions(
      eid: BigNumberish,
      msgType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setEnforcedOptions(
      _enforcedOptions: EnforcedOptionParamStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    combineOptions(
      _eid: BigNumberish,
      _msgType: BigNumberish,
      _extraOptions: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enforcedOptions(
      eid: BigNumberish,
      msgType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setEnforcedOptions(
      _enforcedOptions: EnforcedOptionParamStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
