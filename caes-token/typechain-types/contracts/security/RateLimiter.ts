/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface RateLimiterInterface extends utils.Interface {
  functions: {
    "DEFAULT_MAX_TRANSACTIONS()": FunctionFragment;
    "DEFAULT_MIN_INTERVAL()": FunctionFragment;
    "DEFAULT_TIME_WINDOW()": FunctionFragment;
    "EMERGENCY_MAX_TRANSACTIONS()": FunctionFragment;
    "EMERGENCY_MIN_INTERVAL()": FunctionFragment;
    "EMERGENCY_TIME_WINDOW()": FunctionFragment;
    "customMaxTransactions(address)": FunctionFragment;
    "customMinInterval(address)": FunctionFragment;
    "customTimeWindow(address)": FunctionFragment;
    "emergencyRateLimit(address)": FunctionFragment;
    "getRateLimitStatus(address)": FunctionFragment;
    "getRateLimits(address)": FunctionFragment;
    "getTimeUntilNextTransaction(address)": FunctionFragment;
    "isWithinRateLimit(address)": FunctionFragment;
    "rateLimits(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_MAX_TRANSACTIONS"
      | "DEFAULT_MIN_INTERVAL"
      | "DEFAULT_TIME_WINDOW"
      | "EMERGENCY_MAX_TRANSACTIONS"
      | "EMERGENCY_MIN_INTERVAL"
      | "EMERGENCY_TIME_WINDOW"
      | "customMaxTransactions"
      | "customMinInterval"
      | "customTimeWindow"
      | "emergencyRateLimit"
      | "getRateLimitStatus"
      | "getRateLimits"
      | "getTimeUntilNextTransaction"
      | "isWithinRateLimit"
      | "rateLimits"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_MAX_TRANSACTIONS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_MIN_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_TIME_WINDOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMERGENCY_MAX_TRANSACTIONS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMERGENCY_MIN_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMERGENCY_TIME_WINDOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "customMaxTransactions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "customMinInterval",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "customTimeWindow",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRateLimit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRateLimitStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRateLimits",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeUntilNextTransaction",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWithinRateLimit",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "rateLimits", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_MAX_TRANSACTIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_MIN_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_TIME_WINDOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMERGENCY_MAX_TRANSACTIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMERGENCY_MIN_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMERGENCY_TIME_WINDOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customMaxTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customMinInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customTimeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRateLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRateLimitStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRateLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeUntilNextTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWithinRateLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rateLimits", data: BytesLike): Result;

  events: {
    "CustomRateLimitSet(address,uint256,uint256,uint256)": EventFragment;
    "EmergencyRateLimitActivated(address)": EventFragment;
    "RateLimitExceeded(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CustomRateLimitSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EmergencyRateLimitActivated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RateLimitExceeded"): EventFragment;
}

export interface CustomRateLimitSetEventObject {
  account: string;
  maxTx: BigNumber;
  timeWindow: BigNumber;
  minInterval: BigNumber;
}
export type CustomRateLimitSetEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  CustomRateLimitSetEventObject
>;

export type CustomRateLimitSetEventFilter =
  TypedEventFilter<CustomRateLimitSetEvent>;

export interface EmergencyRateLimitActivatedEventObject {
  account: string;
}
export type EmergencyRateLimitActivatedEvent = TypedEvent<
  [string],
  EmergencyRateLimitActivatedEventObject
>;

export type EmergencyRateLimitActivatedEventFilter =
  TypedEventFilter<EmergencyRateLimitActivatedEvent>;

export interface RateLimitExceededEventObject {
  account: string;
  transactionCount: BigNumber;
  limit: BigNumber;
}
export type RateLimitExceededEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RateLimitExceededEventObject
>;

export type RateLimitExceededEventFilter =
  TypedEventFilter<RateLimitExceededEvent>;

export interface RateLimiter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RateLimiterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_MAX_TRANSACTIONS(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_MIN_INTERVAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_TIME_WINDOW(overrides?: CallOverrides): Promise<[BigNumber]>;

    EMERGENCY_MAX_TRANSACTIONS(overrides?: CallOverrides): Promise<[BigNumber]>;

    EMERGENCY_MIN_INTERVAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    EMERGENCY_TIME_WINDOW(overrides?: CallOverrides): Promise<[BigNumber]>;

    customMaxTransactions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    customMinInterval(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    customTimeWindow(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    emergencyRateLimit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getRateLimitStatus(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        currentCount: BigNumber;
        maxTransactions: BigNumber;
        windowStart: BigNumber;
        lastTransaction: BigNumber;
        isEmergency: boolean;
      }
    >;

    getRateLimits(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        maxTransactions: BigNumber;
        timeWindow: BigNumber;
        minInterval: BigNumber;
      }
    >;

    getTimeUntilNextTransaction(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isWithinRateLimit(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rateLimits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        transactionCount: BigNumber;
        windowStart: BigNumber;
        lastTransaction: BigNumber;
      }
    >;
  };

  DEFAULT_MAX_TRANSACTIONS(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_MIN_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_TIME_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

  EMERGENCY_MAX_TRANSACTIONS(overrides?: CallOverrides): Promise<BigNumber>;

  EMERGENCY_MIN_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

  EMERGENCY_TIME_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

  customMaxTransactions(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  customMinInterval(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  customTimeWindow(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  emergencyRateLimit(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  getRateLimitStatus(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      currentCount: BigNumber;
      maxTransactions: BigNumber;
      windowStart: BigNumber;
      lastTransaction: BigNumber;
      isEmergency: boolean;
    }
  >;

  getRateLimits(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      maxTransactions: BigNumber;
      timeWindow: BigNumber;
      minInterval: BigNumber;
    }
  >;

  getTimeUntilNextTransaction(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isWithinRateLimit(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rateLimits(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      transactionCount: BigNumber;
      windowStart: BigNumber;
      lastTransaction: BigNumber;
    }
  >;

  callStatic: {
    DEFAULT_MAX_TRANSACTIONS(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_MIN_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_TIME_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

    EMERGENCY_MAX_TRANSACTIONS(overrides?: CallOverrides): Promise<BigNumber>;

    EMERGENCY_MIN_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    EMERGENCY_TIME_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

    customMaxTransactions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    customMinInterval(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    customTimeWindow(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyRateLimit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRateLimitStatus(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        currentCount: BigNumber;
        maxTransactions: BigNumber;
        windowStart: BigNumber;
        lastTransaction: BigNumber;
        isEmergency: boolean;
      }
    >;

    getRateLimits(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        maxTransactions: BigNumber;
        timeWindow: BigNumber;
        minInterval: BigNumber;
      }
    >;

    getTimeUntilNextTransaction(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWithinRateLimit(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rateLimits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        transactionCount: BigNumber;
        windowStart: BigNumber;
        lastTransaction: BigNumber;
      }
    >;
  };

  filters: {
    "CustomRateLimitSet(address,uint256,uint256,uint256)"(
      account?: string | null,
      maxTx?: null,
      timeWindow?: null,
      minInterval?: null
    ): CustomRateLimitSetEventFilter;
    CustomRateLimitSet(
      account?: string | null,
      maxTx?: null,
      timeWindow?: null,
      minInterval?: null
    ): CustomRateLimitSetEventFilter;

    "EmergencyRateLimitActivated(address)"(
      account?: string | null
    ): EmergencyRateLimitActivatedEventFilter;
    EmergencyRateLimitActivated(
      account?: string | null
    ): EmergencyRateLimitActivatedEventFilter;

    "RateLimitExceeded(address,uint256,uint256)"(
      account?: string | null,
      transactionCount?: null,
      limit?: null
    ): RateLimitExceededEventFilter;
    RateLimitExceeded(
      account?: string | null,
      transactionCount?: null,
      limit?: null
    ): RateLimitExceededEventFilter;
  };

  estimateGas: {
    DEFAULT_MAX_TRANSACTIONS(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_MIN_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_TIME_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

    EMERGENCY_MAX_TRANSACTIONS(overrides?: CallOverrides): Promise<BigNumber>;

    EMERGENCY_MIN_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    EMERGENCY_TIME_WINDOW(overrides?: CallOverrides): Promise<BigNumber>;

    customMaxTransactions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    customMinInterval(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    customTimeWindow(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyRateLimit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRateLimitStatus(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRateLimits(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeUntilNextTransaction(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWithinRateLimit(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateLimits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_MAX_TRANSACTIONS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_MIN_INTERVAL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_TIME_WINDOW(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EMERGENCY_MAX_TRANSACTIONS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EMERGENCY_MIN_INTERVAL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EMERGENCY_TIME_WINDOW(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    customMaxTransactions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    customMinInterval(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    customTimeWindow(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyRateLimit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRateLimitStatus(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRateLimits(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeUntilNextTransaction(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWithinRateLimit(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateLimits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
