/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace AdvancedDemurrageManager {
  export type AdvancedDemurrageConfigStruct = {
    baseRate: BigNumberish;
    maxRate: BigNumberish;
    stabilityThreshold: BigNumberish;
    fiatDiscountFactor: BigNumberish;
    gracePeriodsHours: BigNumberish;
    decayAcceleration: BigNumberish;
    velocityThreshold: BigNumberish;
    adaptiveRateEnabled: boolean;
  };

  export type AdvancedDemurrageConfigStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    baseRate: BigNumber;
    maxRate: BigNumber;
    stabilityThreshold: BigNumber;
    fiatDiscountFactor: BigNumber;
    gracePeriodsHours: BigNumber;
    decayAcceleration: BigNumber;
    velocityThreshold: BigNumber;
    adaptiveRateEnabled: boolean;
  };

  export type AccountDemurrageDataStruct = {
    lastDemurrageApplication: BigNumberish;
    totalDemurragePaid: BigNumberish;
    effectiveRate: BigNumberish;
    graceEndTime: BigNumberish;
    lastFiatActivity: BigNumberish;
    fiatVolume30Days: BigNumberish;
    isExempt: boolean;
    isNewUser: boolean;
  };

  export type AccountDemurrageDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    lastDemurrageApplication: BigNumber;
    totalDemurragePaid: BigNumber;
    effectiveRate: BigNumber;
    graceEndTime: BigNumber;
    lastFiatActivity: BigNumber;
    fiatVolume30Days: BigNumber;
    isExempt: boolean;
    isNewUser: boolean;
  };

  export type FiatActivityDiscountStruct = {
    volume24h: BigNumberish;
    volume7d: BigNumberish;
    volume30d: BigNumberish;
    discountPercentage: BigNumberish;
    isEligible: boolean;
    lastActivityTime: BigNumberish;
  };

  export type FiatActivityDiscountStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    volume24h: BigNumber;
    volume7d: BigNumber;
    volume30d: BigNumber;
    discountPercentage: BigNumber;
    isEligible: boolean;
    lastActivityTime: BigNumber;
  };

  export type StabilityMetricsStruct = {
    currentStabilityIndex: BigNumberish;
    priceDeviation: BigNumberish;
    velocityRatio: BigNumberish;
    participationRate: BigNumberish;
    lastStabilityUpdate: BigNumberish;
  };

  export type StabilityMetricsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    currentStabilityIndex: BigNumber;
    priceDeviation: BigNumber;
    velocityRatio: BigNumber;
    participationRate: BigNumber;
    lastStabilityUpdate: BigNumber;
  };
}

export interface AdvancedDemurrageManagerInterface extends utils.Interface {
  functions: {
    "BASIS_POINTS()": FunctionFragment;
    "MAX_DEMURRAGE_RATE()": FunctionFragment;
    "MAX_FIAT_DISCOUNT()": FunctionFragment;
    "MAX_GRACE_PERIOD()": FunctionFragment;
    "MIN_DEMURRAGE_RATE()": FunctionFragment;
    "PRECISION()": FunctionFragment;
    "SECONDS_PER_HOUR()": FunctionFragment;
    "accountData(address)": FunctionFragment;
    "activateEmergencyMode(uint256)": FunctionFragment;
    "addEmergencyOperator(address)": FunctionFragment;
    "addFiatReporter(address)": FunctionFragment;
    "applyAdvancedDemurrage(address,uint256)": FunctionFragment;
    "authorizedFiatReporters(address)": FunctionFragment;
    "averageDemurrageRate()": FunctionFragment;
    "calculateAdvancedDemurrage(address,uint256)": FunctionFragment;
    "config()": FunctionFragment;
    "deactivateEmergencyMode()": FunctionFragment;
    "emergencyMode()": FunctionFragment;
    "emergencyOperators(address)": FunctionFragment;
    "emergencyRateOverride()": FunctionFragment;
    "exemptAccounts(address)": FunctionFragment;
    "fiatDiscounts(address)": FunctionFragment;
    "fiatOracle()": FunctionFragment;
    "getAccountDemurrageData(address)": FunctionFragment;
    "getAdvancedDemurrageConfig()": FunctionFragment;
    "getCurrentEffectiveRate(address)": FunctionFragment;
    "getFiatDiscountData(address)": FunctionFragment;
    "getStabilityMetrics()": FunctionFragment;
    "isAccountInGracePeriod(address)": FunctionFragment;
    "lastGlobalUpdate()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "recordFiatActivity(address,uint256,uint8)": FunctionFragment;
    "removeEmergencyOperator(address)": FunctionFragment;
    "removeFiatReporter(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAccountExemption(address,bool)": FunctionFragment;
    "stabilityMetrics()": FunctionFragment;
    "startGracePeriod(address)": FunctionFragment;
    "totalAccountsProcessed()": FunctionFragment;
    "totalDemurrageCollected()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateDemurrageConfig((uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool))": FunctionFragment;
    "updateStabilityMetrics(uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASIS_POINTS"
      | "MAX_DEMURRAGE_RATE"
      | "MAX_FIAT_DISCOUNT"
      | "MAX_GRACE_PERIOD"
      | "MIN_DEMURRAGE_RATE"
      | "PRECISION"
      | "SECONDS_PER_HOUR"
      | "accountData"
      | "activateEmergencyMode"
      | "addEmergencyOperator"
      | "addFiatReporter"
      | "applyAdvancedDemurrage"
      | "authorizedFiatReporters"
      | "averageDemurrageRate"
      | "calculateAdvancedDemurrage"
      | "config"
      | "deactivateEmergencyMode"
      | "emergencyMode"
      | "emergencyOperators"
      | "emergencyRateOverride"
      | "exemptAccounts"
      | "fiatDiscounts"
      | "fiatOracle"
      | "getAccountDemurrageData"
      | "getAdvancedDemurrageConfig"
      | "getCurrentEffectiveRate"
      | "getFiatDiscountData"
      | "getStabilityMetrics"
      | "isAccountInGracePeriod"
      | "lastGlobalUpdate"
      | "owner"
      | "pause"
      | "paused"
      | "recordFiatActivity"
      | "removeEmergencyOperator"
      | "removeFiatReporter"
      | "renounceOwnership"
      | "setAccountExemption"
      | "stabilityMetrics"
      | "startGracePeriod"
      | "totalAccountsProcessed"
      | "totalDemurrageCollected"
      | "transferOwnership"
      | "unpause"
      | "updateDemurrageConfig"
      | "updateStabilityMetrics"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_DEMURRAGE_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FIAT_DISCOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_DEMURRAGE_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SECONDS_PER_HOUR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "accountData", values: [string]): string;
  encodeFunctionData(
    functionFragment: "activateEmergencyMode",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addEmergencyOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addFiatReporter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "applyAdvancedDemurrage",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedFiatReporters",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "averageDemurrageRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateAdvancedDemurrage",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deactivateEmergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyOperators",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRateOverride",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exemptAccounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "fiatDiscounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "fiatOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountDemurrageData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdvancedDemurrageConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentEffectiveRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFiatDiscountData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStabilityMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountInGracePeriod",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastGlobalUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recordFiatActivity",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeEmergencyOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFiatReporter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountExemption",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stabilityMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startGracePeriod",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAccountsProcessed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDemurrageCollected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateDemurrageConfig",
    values: [AdvancedDemurrageManager.AdvancedDemurrageConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStabilityMetrics",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_DEMURRAGE_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FIAT_DISCOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_DEMURRAGE_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_PER_HOUR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addEmergencyOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFiatReporter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyAdvancedDemurrage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedFiatReporters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "averageDemurrageRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateAdvancedDemurrage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deactivateEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRateOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exemptAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fiatDiscounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fiatOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountDemurrageData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdvancedDemurrageConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEffectiveRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFiatDiscountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStabilityMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountInGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastGlobalUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordFiatActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeEmergencyOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFiatReporter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccountExemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stabilityMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAccountsProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDemurrageCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDemurrageConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStabilityMetrics",
    data: BytesLike
  ): Result;

  events: {
    "AccountExemptionSet(address,bool)": EventFragment;
    "AdaptiveRateAdjustment(address,uint256,uint256)": EventFragment;
    "DemurrageApplied(address,uint256,uint256)": EventFragment;
    "DemurrageConfigUpdated((uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool))": EventFragment;
    "EmergencyModeActivated(address,uint256)": EventFragment;
    "FiatActivityRecorded(address,uint256,uint8)": EventFragment;
    "FiatDiscountApplied(address,uint256,uint256)": EventFragment;
    "GracePeriodEnded(address)": EventFragment;
    "GracePeriodStarted(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "StabilityIndexUpdated(uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountExemptionSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdaptiveRateAdjustment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DemurrageApplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DemurrageConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyModeActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FiatActivityRecorded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FiatDiscountApplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GracePeriodEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GracePeriodStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StabilityIndexUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface AccountExemptionSetEventObject {
  account: string;
  exempt: boolean;
}
export type AccountExemptionSetEvent = TypedEvent<
  [string, boolean],
  AccountExemptionSetEventObject
>;

export type AccountExemptionSetEventFilter =
  TypedEventFilter<AccountExemptionSetEvent>;

export interface AdaptiveRateAdjustmentEventObject {
  account: string;
  oldRate: BigNumber;
  newRate: BigNumber;
}
export type AdaptiveRateAdjustmentEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AdaptiveRateAdjustmentEventObject
>;

export type AdaptiveRateAdjustmentEventFilter =
  TypedEventFilter<AdaptiveRateAdjustmentEvent>;

export interface DemurrageAppliedEventObject {
  account: string;
  amount: BigNumber;
  effectiveRate: BigNumber;
}
export type DemurrageAppliedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DemurrageAppliedEventObject
>;

export type DemurrageAppliedEventFilter =
  TypedEventFilter<DemurrageAppliedEvent>;

export interface DemurrageConfigUpdatedEventObject {
  config: AdvancedDemurrageManager.AdvancedDemurrageConfigStructOutput;
}
export type DemurrageConfigUpdatedEvent = TypedEvent<
  [AdvancedDemurrageManager.AdvancedDemurrageConfigStructOutput],
  DemurrageConfigUpdatedEventObject
>;

export type DemurrageConfigUpdatedEventFilter =
  TypedEventFilter<DemurrageConfigUpdatedEvent>;

export interface EmergencyModeActivatedEventObject {
  operator: string;
  rateOverride: BigNumber;
}
export type EmergencyModeActivatedEvent = TypedEvent<
  [string, BigNumber],
  EmergencyModeActivatedEventObject
>;

export type EmergencyModeActivatedEventFilter =
  TypedEventFilter<EmergencyModeActivatedEvent>;

export interface FiatActivityRecordedEventObject {
  account: string;
  amount: BigNumber;
  activityType: number;
}
export type FiatActivityRecordedEvent = TypedEvent<
  [string, BigNumber, number],
  FiatActivityRecordedEventObject
>;

export type FiatActivityRecordedEventFilter =
  TypedEventFilter<FiatActivityRecordedEvent>;

export interface FiatDiscountAppliedEventObject {
  account: string;
  originalRate: BigNumber;
  discountedRate: BigNumber;
}
export type FiatDiscountAppliedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  FiatDiscountAppliedEventObject
>;

export type FiatDiscountAppliedEventFilter =
  TypedEventFilter<FiatDiscountAppliedEvent>;

export interface GracePeriodEndedEventObject {
  account: string;
}
export type GracePeriodEndedEvent = TypedEvent<
  [string],
  GracePeriodEndedEventObject
>;

export type GracePeriodEndedEventFilter =
  TypedEventFilter<GracePeriodEndedEvent>;

export interface GracePeriodStartedEventObject {
  account: string;
  endTime: BigNumber;
}
export type GracePeriodStartedEvent = TypedEvent<
  [string, BigNumber],
  GracePeriodStartedEventObject
>;

export type GracePeriodStartedEventFilter =
  TypedEventFilter<GracePeriodStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface StabilityIndexUpdatedEventObject {
  oldIndex: BigNumber;
  newIndex: BigNumber;
}
export type StabilityIndexUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  StabilityIndexUpdatedEventObject
>;

export type StabilityIndexUpdatedEventFilter =
  TypedEventFilter<StabilityIndexUpdatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface AdvancedDemurrageManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AdvancedDemurrageManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_DEMURRAGE_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FIAT_DISCOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_GRACE_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_DEMURRAGE_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    SECONDS_PER_HOUR(overrides?: CallOverrides): Promise<[BigNumber]>;

    accountData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        lastDemurrageApplication: BigNumber;
        totalDemurragePaid: BigNumber;
        effectiveRate: BigNumber;
        graceEndTime: BigNumber;
        lastFiatActivity: BigNumber;
        fiatVolume30Days: BigNumber;
        isExempt: boolean;
        isNewUser: boolean;
      }
    >;

    activateEmergencyMode(
      rateOverride: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addFiatReporter(
      reporter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    applyAdvancedDemurrage(
      account: string,
      balance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    authorizedFiatReporters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    averageDemurrageRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateAdvancedDemurrage(
      account: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { demurrageAmount: BigNumber }>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        baseRate: BigNumber;
        maxRate: BigNumber;
        stabilityThreshold: BigNumber;
        fiatDiscountFactor: BigNumber;
        gracePeriodsHours: BigNumber;
        decayAcceleration: BigNumber;
        velocityThreshold: BigNumber;
        adaptiveRateEnabled: boolean;
      }
    >;

    deactivateEmergencyMode(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    emergencyMode(overrides?: CallOverrides): Promise<[boolean]>;

    emergencyOperators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    emergencyRateOverride(overrides?: CallOverrides): Promise<[BigNumber]>;

    exemptAccounts(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    fiatDiscounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        volume24h: BigNumber;
        volume7d: BigNumber;
        volume30d: BigNumber;
        discountPercentage: BigNumber;
        isEligible: boolean;
        lastActivityTime: BigNumber;
      }
    >;

    fiatOracle(overrides?: CallOverrides): Promise<[string]>;

    getAccountDemurrageData(
      account: string,
      overrides?: CallOverrides
    ): Promise<[AdvancedDemurrageManager.AccountDemurrageDataStructOutput]>;

    getAdvancedDemurrageConfig(
      overrides?: CallOverrides
    ): Promise<[AdvancedDemurrageManager.AdvancedDemurrageConfigStructOutput]>;

    getCurrentEffectiveRate(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFiatDiscountData(
      account: string,
      overrides?: CallOverrides
    ): Promise<[AdvancedDemurrageManager.FiatActivityDiscountStructOutput]>;

    getStabilityMetrics(
      overrides?: CallOverrides
    ): Promise<[AdvancedDemurrageManager.StabilityMetricsStructOutput]>;

    isAccountInGracePeriod(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastGlobalUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    recordFiatActivity(
      account: string,
      amount: BigNumberish,
      activityType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeFiatReporter(
      reporter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAccountExemption(
      account: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stabilityMetrics(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        currentStabilityIndex: BigNumber;
        priceDeviation: BigNumber;
        velocityRatio: BigNumber;
        participationRate: BigNumber;
        lastStabilityUpdate: BigNumber;
      }
    >;

    startGracePeriod(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    totalAccountsProcessed(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDemurrageCollected(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateDemurrageConfig(
      newConfig: AdvancedDemurrageManager.AdvancedDemurrageConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateStabilityMetrics(
      priceDeviation: BigNumberish,
      velocityRatio: BigNumberish,
      participationRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_DEMURRAGE_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FIAT_DISCOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_DEMURRAGE_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  SECONDS_PER_HOUR(overrides?: CallOverrides): Promise<BigNumber>;

  accountData(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean
    ] & {
      lastDemurrageApplication: BigNumber;
      totalDemurragePaid: BigNumber;
      effectiveRate: BigNumber;
      graceEndTime: BigNumber;
      lastFiatActivity: BigNumber;
      fiatVolume30Days: BigNumber;
      isExempt: boolean;
      isNewUser: boolean;
    }
  >;

  activateEmergencyMode(
    rateOverride: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addEmergencyOperator(
    operator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addFiatReporter(
    reporter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  applyAdvancedDemurrage(
    account: string,
    balance: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  authorizedFiatReporters(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  averageDemurrageRate(overrides?: CallOverrides): Promise<BigNumber>;

  calculateAdvancedDemurrage(
    account: string,
    balance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  config(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      baseRate: BigNumber;
      maxRate: BigNumber;
      stabilityThreshold: BigNumber;
      fiatDiscountFactor: BigNumber;
      gracePeriodsHours: BigNumber;
      decayAcceleration: BigNumber;
      velocityThreshold: BigNumber;
      adaptiveRateEnabled: boolean;
    }
  >;

  deactivateEmergencyMode(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  emergencyMode(overrides?: CallOverrides): Promise<boolean>;

  emergencyOperators(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  emergencyRateOverride(overrides?: CallOverrides): Promise<BigNumber>;

  exemptAccounts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  fiatDiscounts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
      volume24h: BigNumber;
      volume7d: BigNumber;
      volume30d: BigNumber;
      discountPercentage: BigNumber;
      isEligible: boolean;
      lastActivityTime: BigNumber;
    }
  >;

  fiatOracle(overrides?: CallOverrides): Promise<string>;

  getAccountDemurrageData(
    account: string,
    overrides?: CallOverrides
  ): Promise<AdvancedDemurrageManager.AccountDemurrageDataStructOutput>;

  getAdvancedDemurrageConfig(
    overrides?: CallOverrides
  ): Promise<AdvancedDemurrageManager.AdvancedDemurrageConfigStructOutput>;

  getCurrentEffectiveRate(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFiatDiscountData(
    account: string,
    overrides?: CallOverrides
  ): Promise<AdvancedDemurrageManager.FiatActivityDiscountStructOutput>;

  getStabilityMetrics(
    overrides?: CallOverrides
  ): Promise<AdvancedDemurrageManager.StabilityMetricsStructOutput>;

  isAccountInGracePeriod(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastGlobalUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  recordFiatActivity(
    account: string,
    amount: BigNumberish,
    activityType: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeEmergencyOperator(
    operator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeFiatReporter(
    reporter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAccountExemption(
    account: string,
    exempt: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stabilityMetrics(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      currentStabilityIndex: BigNumber;
      priceDeviation: BigNumber;
      velocityRatio: BigNumber;
      participationRate: BigNumber;
      lastStabilityUpdate: BigNumber;
    }
  >;

  startGracePeriod(
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  totalAccountsProcessed(overrides?: CallOverrides): Promise<BigNumber>;

  totalDemurrageCollected(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateDemurrageConfig(
    newConfig: AdvancedDemurrageManager.AdvancedDemurrageConfigStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateStabilityMetrics(
    priceDeviation: BigNumberish,
    velocityRatio: BigNumberish,
    participationRate: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DEMURRAGE_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FIAT_DISCOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DEMURRAGE_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    SECONDS_PER_HOUR(overrides?: CallOverrides): Promise<BigNumber>;

    accountData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        lastDemurrageApplication: BigNumber;
        totalDemurragePaid: BigNumber;
        effectiveRate: BigNumber;
        graceEndTime: BigNumber;
        lastFiatActivity: BigNumber;
        fiatVolume30Days: BigNumber;
        isExempt: boolean;
        isNewUser: boolean;
      }
    >;

    activateEmergencyMode(
      rateOverride: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addEmergencyOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addFiatReporter(reporter: string, overrides?: CallOverrides): Promise<void>;

    applyAdvancedDemurrage(
      account: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authorizedFiatReporters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    averageDemurrageRate(overrides?: CallOverrides): Promise<BigNumber>;

    calculateAdvancedDemurrage(
      account: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        baseRate: BigNumber;
        maxRate: BigNumber;
        stabilityThreshold: BigNumber;
        fiatDiscountFactor: BigNumber;
        gracePeriodsHours: BigNumber;
        decayAcceleration: BigNumber;
        velocityThreshold: BigNumber;
        adaptiveRateEnabled: boolean;
      }
    >;

    deactivateEmergencyMode(overrides?: CallOverrides): Promise<void>;

    emergencyMode(overrides?: CallOverrides): Promise<boolean>;

    emergencyOperators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    emergencyRateOverride(overrides?: CallOverrides): Promise<BigNumber>;

    exemptAccounts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    fiatDiscounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        volume24h: BigNumber;
        volume7d: BigNumber;
        volume30d: BigNumber;
        discountPercentage: BigNumber;
        isEligible: boolean;
        lastActivityTime: BigNumber;
      }
    >;

    fiatOracle(overrides?: CallOverrides): Promise<string>;

    getAccountDemurrageData(
      account: string,
      overrides?: CallOverrides
    ): Promise<AdvancedDemurrageManager.AccountDemurrageDataStructOutput>;

    getAdvancedDemurrageConfig(
      overrides?: CallOverrides
    ): Promise<AdvancedDemurrageManager.AdvancedDemurrageConfigStructOutput>;

    getCurrentEffectiveRate(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFiatDiscountData(
      account: string,
      overrides?: CallOverrides
    ): Promise<AdvancedDemurrageManager.FiatActivityDiscountStructOutput>;

    getStabilityMetrics(
      overrides?: CallOverrides
    ): Promise<AdvancedDemurrageManager.StabilityMetricsStructOutput>;

    isAccountInGracePeriod(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastGlobalUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    recordFiatActivity(
      account: string,
      amount: BigNumberish,
      activityType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeEmergencyOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeFiatReporter(
      reporter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAccountExemption(
      account: string,
      exempt: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    stabilityMetrics(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        currentStabilityIndex: BigNumber;
        priceDeviation: BigNumber;
        velocityRatio: BigNumber;
        participationRate: BigNumber;
        lastStabilityUpdate: BigNumber;
      }
    >;

    startGracePeriod(account: string, overrides?: CallOverrides): Promise<void>;

    totalAccountsProcessed(overrides?: CallOverrides): Promise<BigNumber>;

    totalDemurrageCollected(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateDemurrageConfig(
      newConfig: AdvancedDemurrageManager.AdvancedDemurrageConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStabilityMetrics(
      priceDeviation: BigNumberish,
      velocityRatio: BigNumberish,
      participationRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccountExemptionSet(address,bool)"(
      account?: string | null,
      exempt?: null
    ): AccountExemptionSetEventFilter;
    AccountExemptionSet(
      account?: string | null,
      exempt?: null
    ): AccountExemptionSetEventFilter;

    "AdaptiveRateAdjustment(address,uint256,uint256)"(
      account?: string | null,
      oldRate?: null,
      newRate?: null
    ): AdaptiveRateAdjustmentEventFilter;
    AdaptiveRateAdjustment(
      account?: string | null,
      oldRate?: null,
      newRate?: null
    ): AdaptiveRateAdjustmentEventFilter;

    "DemurrageApplied(address,uint256,uint256)"(
      account?: string | null,
      amount?: null,
      effectiveRate?: null
    ): DemurrageAppliedEventFilter;
    DemurrageApplied(
      account?: string | null,
      amount?: null,
      effectiveRate?: null
    ): DemurrageAppliedEventFilter;

    "DemurrageConfigUpdated((uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool))"(
      config?: null
    ): DemurrageConfigUpdatedEventFilter;
    DemurrageConfigUpdated(config?: null): DemurrageConfigUpdatedEventFilter;

    "EmergencyModeActivated(address,uint256)"(
      operator?: null,
      rateOverride?: null
    ): EmergencyModeActivatedEventFilter;
    EmergencyModeActivated(
      operator?: null,
      rateOverride?: null
    ): EmergencyModeActivatedEventFilter;

    "FiatActivityRecorded(address,uint256,uint8)"(
      account?: string | null,
      amount?: null,
      activityType?: null
    ): FiatActivityRecordedEventFilter;
    FiatActivityRecorded(
      account?: string | null,
      amount?: null,
      activityType?: null
    ): FiatActivityRecordedEventFilter;

    "FiatDiscountApplied(address,uint256,uint256)"(
      account?: string | null,
      originalRate?: null,
      discountedRate?: null
    ): FiatDiscountAppliedEventFilter;
    FiatDiscountApplied(
      account?: string | null,
      originalRate?: null,
      discountedRate?: null
    ): FiatDiscountAppliedEventFilter;

    "GracePeriodEnded(address)"(
      account?: string | null
    ): GracePeriodEndedEventFilter;
    GracePeriodEnded(account?: string | null): GracePeriodEndedEventFilter;

    "GracePeriodStarted(address,uint256)"(
      account?: string | null,
      endTime?: null
    ): GracePeriodStartedEventFilter;
    GracePeriodStarted(
      account?: string | null,
      endTime?: null
    ): GracePeriodStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "StabilityIndexUpdated(uint256,uint256)"(
      oldIndex?: null,
      newIndex?: null
    ): StabilityIndexUpdatedEventFilter;
    StabilityIndexUpdated(
      oldIndex?: null,
      newIndex?: null
    ): StabilityIndexUpdatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DEMURRAGE_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FIAT_DISCOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DEMURRAGE_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    SECONDS_PER_HOUR(overrides?: CallOverrides): Promise<BigNumber>;

    accountData(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    activateEmergencyMode(
      rateOverride: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addFiatReporter(
      reporter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    applyAdvancedDemurrage(
      account: string,
      balance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    authorizedFiatReporters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    averageDemurrageRate(overrides?: CallOverrides): Promise<BigNumber>;

    calculateAdvancedDemurrage(
      account: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    deactivateEmergencyMode(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    emergencyMode(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyOperators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyRateOverride(overrides?: CallOverrides): Promise<BigNumber>;

    exemptAccounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    fiatDiscounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    fiatOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountDemurrageData(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAdvancedDemurrageConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentEffectiveRate(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFiatDiscountData(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStabilityMetrics(overrides?: CallOverrides): Promise<BigNumber>;

    isAccountInGracePeriod(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastGlobalUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    recordFiatActivity(
      account: string,
      amount: BigNumberish,
      activityType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeFiatReporter(
      reporter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAccountExemption(
      account: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stabilityMetrics(overrides?: CallOverrides): Promise<BigNumber>;

    startGracePeriod(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    totalAccountsProcessed(overrides?: CallOverrides): Promise<BigNumber>;

    totalDemurrageCollected(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    updateDemurrageConfig(
      newConfig: AdvancedDemurrageManager.AdvancedDemurrageConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateStabilityMetrics(
      priceDeviation: BigNumberish,
      velocityRatio: BigNumberish,
      participationRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_DEMURRAGE_RATE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_FIAT_DISCOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_GRACE_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_DEMURRAGE_RATE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SECONDS_PER_HOUR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activateEmergencyMode(
      rateOverride: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addFiatReporter(
      reporter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    applyAdvancedDemurrage(
      account: string,
      balance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    authorizedFiatReporters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    averageDemurrageRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateAdvancedDemurrage(
      account: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deactivateEmergencyMode(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    emergencyMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyOperators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyRateOverride(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exemptAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fiatDiscounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fiatOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountDemurrageData(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAdvancedDemurrageConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentEffectiveRate(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFiatDiscountData(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStabilityMetrics(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAccountInGracePeriod(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastGlobalUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recordFiatActivity(
      account: string,
      amount: BigNumberish,
      activityType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeFiatReporter(
      reporter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAccountExemption(
      account: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stabilityMetrics(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startGracePeriod(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    totalAccountsProcessed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDemurrageCollected(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateDemurrageConfig(
      newConfig: AdvancedDemurrageManager.AdvancedDemurrageConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateStabilityMetrics(
      priceDeviation: BigNumberish,
      velocityRatio: BigNumberish,
      participationRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
