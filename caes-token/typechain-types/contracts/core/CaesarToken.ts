/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export type EnforcedOptionParamStruct = {
  eid: BigNumberish;
  msgType: BigNumberish;
  options: BytesLike;
};

export type EnforcedOptionParamStructOutput = [number, number, string] & {
  eid: number;
  msgType: number;
  options: string;
};

export type OriginStruct = {
  srcEid: BigNumberish;
  sender: BytesLike;
  nonce: BigNumberish;
};

export type OriginStructOutput = [number, string, BigNumber] & {
  srcEid: number;
  sender: string;
  nonce: BigNumber;
};

export type SendParamStruct = {
  dstEid: BigNumberish;
  to: BytesLike;
  amountLD: BigNumberish;
  minAmountLD: BigNumberish;
  extraOptions: BytesLike;
  composeMsg: BytesLike;
  oftCmd: BytesLike;
};

export type SendParamStructOutput = [
  number,
  string,
  BigNumber,
  BigNumber,
  string,
  string,
  string
] & {
  dstEid: number;
  to: string;
  amountLD: BigNumber;
  minAmountLD: BigNumber;
  extraOptions: string;
  composeMsg: string;
  oftCmd: string;
};

export type MessagingFeeStruct = {
  nativeFee: BigNumberish;
  lzTokenFee: BigNumberish;
};

export type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
  nativeFee: BigNumber;
  lzTokenFee: BigNumber;
};

export type InboundPacketStruct = {
  origin: OriginStruct;
  dstEid: BigNumberish;
  receiver: string;
  guid: BytesLike;
  value: BigNumberish;
  executor: string;
  message: BytesLike;
  extraData: BytesLike;
};

export type InboundPacketStructOutput = [
  OriginStructOutput,
  number,
  string,
  string,
  BigNumber,
  string,
  string,
  string
] & {
  origin: OriginStructOutput;
  dstEid: number;
  receiver: string;
  guid: string;
  value: BigNumber;
  executor: string;
  message: string;
  extraData: string;
};

export type OFTLimitStruct = {
  minAmountLD: BigNumberish;
  maxAmountLD: BigNumberish;
};

export type OFTLimitStructOutput = [BigNumber, BigNumber] & {
  minAmountLD: BigNumber;
  maxAmountLD: BigNumber;
};

export type OFTFeeDetailStruct = {
  feeAmountLD: BigNumberish;
  description: string;
};

export type OFTFeeDetailStructOutput = [BigNumber, string] & {
  feeAmountLD: BigNumber;
  description: string;
};

export type OFTReceiptStruct = {
  amountSentLD: BigNumberish;
  amountReceivedLD: BigNumberish;
};

export type OFTReceiptStructOutput = [BigNumber, BigNumber] & {
  amountSentLD: BigNumber;
  amountReceivedLD: BigNumber;
};

export type MessagingReceiptStruct = {
  guid: BytesLike;
  nonce: BigNumberish;
  fee: MessagingFeeStruct;
};

export type MessagingReceiptStructOutput = [
  string,
  BigNumber,
  MessagingFeeStructOutput
] & { guid: string; nonce: BigNumber; fee: MessagingFeeStructOutput };

export declare namespace ICaesar {
  export type AccountInfoStruct = {
    balance: BigNumberish;
    lastActivity: BigNumberish;
    participationScore: BigNumberish;
    holdingStartTime: BigNumberish;
    isExempt: boolean;
  };

  export type AccountInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    balance: BigNumber;
    lastActivity: BigNumber;
    participationScore: BigNumber;
    holdingStartTime: BigNumber;
    isExempt: boolean;
  };

  export type AntiSpeculationConfigStruct = {
    maxHoldingPeriod: BigNumberish;
    penaltyRate: BigNumberish;
    rapidTradePenalty: BigNumberish;
    minTransactionGap: BigNumberish;
  };

  export type AntiSpeculationConfigStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    maxHoldingPeriod: BigNumber;
    penaltyRate: BigNumber;
    rapidTradePenalty: BigNumber;
    minTransactionGap: BigNumber;
  };

  export type DemurrageConfigStruct = {
    baseRate: BigNumberish;
    maxRate: BigNumberish;
    decayInterval: BigNumberish;
    stabilityThreshold: BigNumberish;
  };

  export type DemurrageConfigStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    baseRate: BigNumber;
    maxRate: BigNumber;
    decayInterval: BigNumber;
    stabilityThreshold: BigNumber;
  };
}

export interface CaesarTokenInterface extends utils.Interface {
  functions: {
    "SEND()": FunctionFragment;
    "SEND_AND_CALL()": FunctionFragment;
    "accounts(address)": FunctionFragment;
    "activeParticipants()": FunctionFragment;
    "advanceEpoch()": FunctionFragment;
    "allowInitializePath((uint32,bytes32,uint64))": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "antiSpeculationEngine()": FunctionFragment;
    "applyDemurrage(address)": FunctionFragment;
    "approvalRequired()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bridgeWithDecay((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)": FunctionFragment;
    "calculateDemurrage(address)": FunctionFragment;
    "calculateSpeculationPenalty(address)": FunctionFragment;
    "chainSupply(uint32)": FunctionFragment;
    "combineOptions(uint32,uint16,bytes)": FunctionFragment;
    "contributeToStabilityPool(uint256)": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "decimalConversionRate()": FunctionFragment;
    "decimals()": FunctionFragment;
    "demurrageManager()": FunctionFragment;
    "endpoint()": FunctionFragment;
    "enforcedOptions(uint32,uint16)": FunctionFragment;
    "epochDuration()": FunctionFragment;
    "epochSupply(uint256)": FunctionFragment;
    "getAccountInfo(address)": FunctionFragment;
    "getActiveParticipants()": FunctionFragment;
    "getCurrentDecayRate()": FunctionFragment;
    "getCurrentEpoch()": FunctionFragment;
    "getEpochDuration()": FunctionFragment;
    "getLiquidityRatio()": FunctionFragment;
    "getNetworkHealthIndex()": FunctionFragment;
    "getRebaseRatio()": FunctionFragment;
    "getStabilityPoolBalance()": FunctionFragment;
    "goldOracle()": FunctionFragment;
    "isAccountExempt(address)": FunctionFragment;
    "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": FunctionFragment;
    "isPeer(uint32,bytes32)": FunctionFragment;
    "lastEpochUpdate()": FunctionFragment;
    "lastRebaseTime()": FunctionFragment;
    "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
    "lzReceiveAndRevert(((uint32,bytes32,uint64),uint32,address,bytes32,uint256,address,bytes,bytes)[])": FunctionFragment;
    "lzReceiveSimulate((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": FunctionFragment;
    "maxRebasePercent()": FunctionFragment;
    "migrationContract()": FunctionFragment;
    "migrationEnabled()": FunctionFragment;
    "migrationMint(address,uint256)": FunctionFragment;
    "msgInspector()": FunctionFragment;
    "name()": FunctionFragment;
    "nextNonce(uint32,bytes32)": FunctionFragment;
    "oApp()": FunctionFragment;
    "oAppVersion()": FunctionFragment;
    "oftVersion()": FunctionFragment;
    "owner()": FunctionFragment;
    "peers(uint32)": FunctionFragment;
    "preCrime()": FunctionFragment;
    "quoteBridgeWithDecay((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bool)": FunctionFragment;
    "quoteOFT((uint32,bytes32,uint256,uint256,bytes,bytes,bytes))": FunctionFragment;
    "quoteSend((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bool)": FunctionFragment;
    "rebase()": FunctionFragment;
    "rebaseInterval()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "send((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)": FunctionFragment;
    "setAccountExemption(address,bool)": FunctionFragment;
    "setAntiSpeculationConfig((uint256,uint256,uint256,uint256))": FunctionFragment;
    "setDelegate(address)": FunctionFragment;
    "setDemurrageConfig((uint256,uint256,uint256,uint256))": FunctionFragment;
    "setEnforcedOptions((uint32,uint16,bytes)[])": FunctionFragment;
    "setMigrationContract(address)": FunctionFragment;
    "setMigrationEnabled(bool)": FunctionFragment;
    "setMsgInspector(address)": FunctionFragment;
    "setPeer(uint32,bytes32)": FunctionFragment;
    "setPreCrime(address)": FunctionFragment;
    "sharedDecimals()": FunctionFragment;
    "shouldRebase()": FunctionFragment;
    "stabilityPoolBalance()": FunctionFragment;
    "symbol()": FunctionFragment;
    "targetPrice()": FunctionFragment;
    "token()": FunctionFragment;
    "totalHolders()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAccountActivity(address)": FunctionFragment;
    "updateParticipationScore(address,uint256)": FunctionFragment;
    "withdrawFromStabilityPool(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "SEND"
      | "SEND_AND_CALL"
      | "accounts"
      | "activeParticipants"
      | "advanceEpoch"
      | "allowInitializePath"
      | "allowance"
      | "antiSpeculationEngine"
      | "applyDemurrage"
      | "approvalRequired"
      | "approve"
      | "balanceOf"
      | "bridgeWithDecay"
      | "calculateDemurrage"
      | "calculateSpeculationPenalty"
      | "chainSupply"
      | "combineOptions"
      | "contributeToStabilityPool"
      | "currentEpoch"
      | "decimalConversionRate"
      | "decimals"
      | "demurrageManager"
      | "endpoint"
      | "enforcedOptions"
      | "epochDuration"
      | "epochSupply"
      | "getAccountInfo"
      | "getActiveParticipants"
      | "getCurrentDecayRate"
      | "getCurrentEpoch"
      | "getEpochDuration"
      | "getLiquidityRatio"
      | "getNetworkHealthIndex"
      | "getRebaseRatio"
      | "getStabilityPoolBalance"
      | "goldOracle"
      | "isAccountExempt"
      | "isComposeMsgSender"
      | "isPeer"
      | "lastEpochUpdate"
      | "lastRebaseTime"
      | "lzReceive"
      | "lzReceiveAndRevert"
      | "lzReceiveSimulate"
      | "maxRebasePercent"
      | "migrationContract"
      | "migrationEnabled"
      | "migrationMint"
      | "msgInspector"
      | "name"
      | "nextNonce"
      | "oApp"
      | "oAppVersion"
      | "oftVersion"
      | "owner"
      | "peers"
      | "preCrime"
      | "quoteBridgeWithDecay"
      | "quoteOFT"
      | "quoteSend"
      | "rebase"
      | "rebaseInterval"
      | "renounceOwnership"
      | "send"
      | "setAccountExemption"
      | "setAntiSpeculationConfig"
      | "setDelegate"
      | "setDemurrageConfig"
      | "setEnforcedOptions"
      | "setMigrationContract"
      | "setMigrationEnabled"
      | "setMsgInspector"
      | "setPeer"
      | "setPreCrime"
      | "sharedDecimals"
      | "shouldRebase"
      | "stabilityPoolBalance"
      | "symbol"
      | "targetPrice"
      | "token"
      | "totalHolders"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "updateAccountActivity"
      | "updateParticipationScore"
      | "withdrawFromStabilityPool"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "SEND", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SEND_AND_CALL",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "accounts", values: [string]): string;
  encodeFunctionData(
    functionFragment: "activeParticipants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "advanceEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowInitializePath",
    values: [OriginStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "antiSpeculationEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyDemurrage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approvalRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bridgeWithDecay",
    values: [SendParamStruct, MessagingFeeStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateDemurrage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSpeculationPenalty",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "chainSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "combineOptions",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contributeToStabilityPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decimalConversionRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "demurrageManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enforcedOptions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveParticipants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentDecayRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNetworkHealthIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRebaseRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStabilityPoolBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "goldOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountExempt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isComposeMsgSender",
    values: [OriginStruct, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPeer",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastEpochUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRebaseTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceive",
    values: [OriginStruct, BytesLike, BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceiveAndRevert",
    values: [InboundPacketStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceiveSimulate",
    values: [OriginStruct, BytesLike, BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxRebasePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrationContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrationEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrationMint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "msgInspector",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextNonce",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "oApp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oAppVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oftVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "peers", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "preCrime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteBridgeWithDecay",
    values: [SendParamStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteOFT",
    values: [SendParamStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteSend",
    values: [SendParamStruct, boolean]
  ): string;
  encodeFunctionData(functionFragment: "rebase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebaseInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [SendParamStruct, MessagingFeeStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountExemption",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAntiSpeculationConfig",
    values: [ICaesar.AntiSpeculationConfigStruct]
  ): string;
  encodeFunctionData(functionFragment: "setDelegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setDemurrageConfig",
    values: [ICaesar.DemurrageConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnforcedOptions",
    values: [EnforcedOptionParamStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMigrationContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMigrationEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMsgInspector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeer",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setPreCrime", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sharedDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shouldRebase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stabilityPoolBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "targetPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalHolders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAccountActivity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateParticipationScore",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromStabilityPool",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "SEND", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SEND_AND_CALL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accounts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activeParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "advanceEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowInitializePath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "antiSpeculationEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyDemurrage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvalRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bridgeWithDecay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateDemurrage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSpeculationPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "combineOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributeToStabilityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decimalConversionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "demurrageManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enforcedOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDecayRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkHealthIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRebaseRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStabilityPoolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "goldOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAccountExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isComposeMsgSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPeer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastEpochUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRebaseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lzReceiveAndRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lzReceiveSimulate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRebasePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrationContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrationEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrationMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "msgInspector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oApp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oAppVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oftVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "preCrime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteBridgeWithDecay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quoteOFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quoteSend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebaseInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAccountExemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAntiSpeculationConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDemurrageConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnforcedOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMigrationContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMigrationEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMsgInspector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPeer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPreCrime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharedDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldRebase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stabilityPoolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAccountActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateParticipationScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromStabilityPool",
    data: BytesLike
  ): Result;

  events: {
    "AccountActivityUpdated(address,uint256)": EventFragment;
    "AntiSpeculationPenalty(address,uint256,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "CrossChainSupplySync(uint32,uint256)": EventFragment;
    "DemurrageApplied(address,uint256,uint256)": EventFragment;
    "EnforcedOptionSet((uint32,uint16,bytes)[])": EventFragment;
    "EpochAdvanced(uint256,uint256)": EventFragment;
    "MigrationContractSet(address)": EventFragment;
    "MigrationEnabled(bool)": EventFragment;
    "MsgInspectorSet(address)": EventFragment;
    "OFTReceived(bytes32,uint32,address,uint256)": EventFragment;
    "OFTSent(bytes32,uint32,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ParticipationScoreUpdate(address,uint256)": EventFragment;
    "PeerSet(uint32,bytes32)": EventFragment;
    "PreCrimeSet(address)": EventFragment;
    "RebaseOccurred(uint256,uint256,uint256)": EventFragment;
    "StabilityPoolContribution(uint256,uint256)": EventFragment;
    "TensorEpochUpdate(uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountActivityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AntiSpeculationPenalty"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CrossChainSupplySync"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DemurrageApplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnforcedOptionSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpochAdvanced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrationContractSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrationEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MsgInspectorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OFTReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OFTSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParticipationScoreUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PeerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PreCrimeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebaseOccurred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StabilityPoolContribution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TensorEpochUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface AccountActivityUpdatedEventObject {
  account: string;
  timestamp: BigNumber;
}
export type AccountActivityUpdatedEvent = TypedEvent<
  [string, BigNumber],
  AccountActivityUpdatedEventObject
>;

export type AccountActivityUpdatedEventFilter =
  TypedEventFilter<AccountActivityUpdatedEvent>;

export interface AntiSpeculationPenaltyEventObject {
  account: string;
  penalty: BigNumber;
  timestamp: BigNumber;
}
export type AntiSpeculationPenaltyEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AntiSpeculationPenaltyEventObject
>;

export type AntiSpeculationPenaltyEventFilter =
  TypedEventFilter<AntiSpeculationPenaltyEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface CrossChainSupplySyncEventObject {
  chainId: number;
  supply: BigNumber;
}
export type CrossChainSupplySyncEvent = TypedEvent<
  [number, BigNumber],
  CrossChainSupplySyncEventObject
>;

export type CrossChainSupplySyncEventFilter =
  TypedEventFilter<CrossChainSupplySyncEvent>;

export interface DemurrageAppliedEventObject {
  account: string;
  amount: BigNumber;
  timestamp: BigNumber;
}
export type DemurrageAppliedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DemurrageAppliedEventObject
>;

export type DemurrageAppliedEventFilter =
  TypedEventFilter<DemurrageAppliedEvent>;

export interface EnforcedOptionSetEventObject {
  _enforcedOptions: EnforcedOptionParamStructOutput[];
}
export type EnforcedOptionSetEvent = TypedEvent<
  [EnforcedOptionParamStructOutput[]],
  EnforcedOptionSetEventObject
>;

export type EnforcedOptionSetEventFilter =
  TypedEventFilter<EnforcedOptionSetEvent>;

export interface EpochAdvancedEventObject {
  newEpoch: BigNumber;
  timestamp: BigNumber;
}
export type EpochAdvancedEvent = TypedEvent<
  [BigNumber, BigNumber],
  EpochAdvancedEventObject
>;

export type EpochAdvancedEventFilter = TypedEventFilter<EpochAdvancedEvent>;

export interface MigrationContractSetEventObject {
  migrationContract: string;
}
export type MigrationContractSetEvent = TypedEvent<
  [string],
  MigrationContractSetEventObject
>;

export type MigrationContractSetEventFilter =
  TypedEventFilter<MigrationContractSetEvent>;

export interface MigrationEnabledEventObject {
  enabled: boolean;
}
export type MigrationEnabledEvent = TypedEvent<
  [boolean],
  MigrationEnabledEventObject
>;

export type MigrationEnabledEventFilter =
  TypedEventFilter<MigrationEnabledEvent>;

export interface MsgInspectorSetEventObject {
  inspector: string;
}
export type MsgInspectorSetEvent = TypedEvent<
  [string],
  MsgInspectorSetEventObject
>;

export type MsgInspectorSetEventFilter = TypedEventFilter<MsgInspectorSetEvent>;

export interface OFTReceivedEventObject {
  guid: string;
  srcEid: number;
  toAddress: string;
  amountReceivedLD: BigNumber;
}
export type OFTReceivedEvent = TypedEvent<
  [string, number, string, BigNumber],
  OFTReceivedEventObject
>;

export type OFTReceivedEventFilter = TypedEventFilter<OFTReceivedEvent>;

export interface OFTSentEventObject {
  guid: string;
  dstEid: number;
  fromAddress: string;
  amountSentLD: BigNumber;
  amountReceivedLD: BigNumber;
}
export type OFTSentEvent = TypedEvent<
  [string, number, string, BigNumber, BigNumber],
  OFTSentEventObject
>;

export type OFTSentEventFilter = TypedEventFilter<OFTSentEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ParticipationScoreUpdateEventObject {
  account: string;
  score: BigNumber;
}
export type ParticipationScoreUpdateEvent = TypedEvent<
  [string, BigNumber],
  ParticipationScoreUpdateEventObject
>;

export type ParticipationScoreUpdateEventFilter =
  TypedEventFilter<ParticipationScoreUpdateEvent>;

export interface PeerSetEventObject {
  eid: number;
  peer: string;
}
export type PeerSetEvent = TypedEvent<[number, string], PeerSetEventObject>;

export type PeerSetEventFilter = TypedEventFilter<PeerSetEvent>;

export interface PreCrimeSetEventObject {
  preCrimeAddress: string;
}
export type PreCrimeSetEvent = TypedEvent<[string], PreCrimeSetEventObject>;

export type PreCrimeSetEventFilter = TypedEventFilter<PreCrimeSetEvent>;

export interface RebaseOccurredEventObject {
  epoch: BigNumber;
  rebaseRatio: BigNumber;
  newTotalSupply: BigNumber;
}
export type RebaseOccurredEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  RebaseOccurredEventObject
>;

export type RebaseOccurredEventFilter = TypedEventFilter<RebaseOccurredEvent>;

export interface StabilityPoolContributionEventObject {
  amount: BigNumber;
  timestamp: BigNumber;
}
export type StabilityPoolContributionEvent = TypedEvent<
  [BigNumber, BigNumber],
  StabilityPoolContributionEventObject
>;

export type StabilityPoolContributionEventFilter =
  TypedEventFilter<StabilityPoolContributionEvent>;

export interface TensorEpochUpdateEventObject {
  epoch: BigNumber;
  timestamp: BigNumber;
}
export type TensorEpochUpdateEvent = TypedEvent<
  [BigNumber, BigNumber],
  TensorEpochUpdateEventObject
>;

export type TensorEpochUpdateEventFilter =
  TypedEventFilter<TensorEpochUpdateEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface CaesarToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CaesarTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SEND(overrides?: CallOverrides): Promise<[number]>;

    SEND_AND_CALL(overrides?: CallOverrides): Promise<[number]>;

    accounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        balance: BigNumber;
        lastActivity: BigNumber;
        participationScore: BigNumber;
        holdingStartTime: BigNumber;
        isExempt: boolean;
      }
    >;

    activeParticipants(overrides?: CallOverrides): Promise<[BigNumber]>;

    advanceEpoch(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    allowInitializePath(
      origin: OriginStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    antiSpeculationEngine(overrides?: CallOverrides): Promise<[string]>;

    applyDemurrage(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    approvalRequired(overrides?: CallOverrides): Promise<[boolean]>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bridgeWithDecay(
      sendParam: SendParamStruct,
      fee: MessagingFeeStruct,
      refundAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    calculateDemurrage(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { demurrageAmount: BigNumber }>;

    calculateSpeculationPenalty(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { penalty: BigNumber }>;

    chainSupply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    combineOptions(
      _eid: BigNumberish,
      _msgType: BigNumberish,
      _extraOptions: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    contributeToStabilityPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimalConversionRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    demurrageManager(overrides?: CallOverrides): Promise<[string]>;

    endpoint(overrides?: CallOverrides): Promise<[string]>;

    enforcedOptions(
      eid: BigNumberish,
      msgType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { enforcedOption: string }>;

    epochDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochSupply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAccountInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [ICaesar.AccountInfoStructOutput] & {
        info: ICaesar.AccountInfoStructOutput;
      }
    >;

    getActiveParticipants(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { activeCount: BigNumber }>;

    getCurrentDecayRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { decayRate: BigNumber }>;

    getCurrentEpoch(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { epoch: BigNumber }>;

    getEpochDuration(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { duration: BigNumber }>;

    getLiquidityRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidityRatio: BigNumber }>;

    getNetworkHealthIndex(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { healthIndex: BigNumber }>;

    getRebaseRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ratio: BigNumber }>;

    getStabilityPoolBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    goldOracle(overrides?: CallOverrides): Promise<[string]>;

    isAccountExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { exempt: boolean }>;

    isComposeMsgSender(
      arg0: OriginStruct,
      arg1: BytesLike,
      _sender: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPeer(
      _eid: BigNumberish,
      _peer: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastEpochUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastRebaseTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    lzReceive(
      _origin: OriginStruct,
      _guid: BytesLike,
      _message: BytesLike,
      _executor: string,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    lzReceiveAndRevert(
      _packets: InboundPacketStruct[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    lzReceiveSimulate(
      _origin: OriginStruct,
      _guid: BytesLike,
      _message: BytesLike,
      _executor: string,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    maxRebasePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    migrationContract(overrides?: CallOverrides): Promise<[string]>;

    migrationEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    migrationMint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    msgInspector(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nextNonce(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    oApp(overrides?: CallOverrides): Promise<[string]>;

    oAppVersion(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        senderVersion: BigNumber;
        receiverVersion: BigNumber;
      }
    >;

    oftVersion(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { interfaceId: string; version: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    peers(
      eid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { peer: string }>;

    preCrime(overrides?: CallOverrides): Promise<[string]>;

    quoteBridgeWithDecay(
      sendParam: SendParamStruct,
      payInLzToken: boolean,
      overrides?: CallOverrides
    ): Promise<
      [MessagingFeeStructOutput] & { messagingFee: MessagingFeeStructOutput }
    >;

    quoteOFT(
      _sendParam: SendParamStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        OFTLimitStructOutput,
        OFTFeeDetailStructOutput[],
        OFTReceiptStructOutput
      ] & {
        oftLimit: OFTLimitStructOutput;
        oftFeeDetails: OFTFeeDetailStructOutput[];
        oftReceipt: OFTReceiptStructOutput;
      }
    >;

    quoteSend(
      _sendParam: SendParamStruct,
      _payInLzToken: boolean,
      overrides?: CallOverrides
    ): Promise<
      [MessagingFeeStructOutput] & { msgFee: MessagingFeeStructOutput }
    >;

    rebase(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rebaseInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    send(
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAccountExemption(
      account: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAntiSpeculationConfig(
      config: ICaesar.AntiSpeculationConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDelegate(
      _delegate: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDemurrageConfig(
      config: ICaesar.DemurrageConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setEnforcedOptions(
      _enforcedOptions: EnforcedOptionParamStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMigrationContract(
      _migrationContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMigrationEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMsgInspector(
      _msgInspector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPeer(
      _eid: BigNumberish,
      _peer: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPreCrime(
      _preCrime: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sharedDecimals(overrides?: CallOverrides): Promise<[number]>;

    shouldRebase(
      overrides?: CallOverrides
    ): Promise<[boolean] & { shouldRebaseNow: boolean }>;

    stabilityPoolBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    targetPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalHolders(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateAccountActivity(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateParticipationScore(
      account: string,
      transactionVolume: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawFromStabilityPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  SEND(overrides?: CallOverrides): Promise<number>;

  SEND_AND_CALL(overrides?: CallOverrides): Promise<number>;

  accounts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      balance: BigNumber;
      lastActivity: BigNumber;
      participationScore: BigNumber;
      holdingStartTime: BigNumber;
      isExempt: boolean;
    }
  >;

  activeParticipants(overrides?: CallOverrides): Promise<BigNumber>;

  advanceEpoch(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  allowInitializePath(
    origin: OriginStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  antiSpeculationEngine(overrides?: CallOverrides): Promise<string>;

  applyDemurrage(
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  approvalRequired(overrides?: CallOverrides): Promise<boolean>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  bridgeWithDecay(
    sendParam: SendParamStruct,
    fee: MessagingFeeStruct,
    refundAddress: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  calculateDemurrage(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSpeculationPenalty(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  chainSupply(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  combineOptions(
    _eid: BigNumberish,
    _msgType: BigNumberish,
    _extraOptions: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  contributeToStabilityPool(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  decimalConversionRate(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  demurrageManager(overrides?: CallOverrides): Promise<string>;

  endpoint(overrides?: CallOverrides): Promise<string>;

  enforcedOptions(
    eid: BigNumberish,
    msgType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

  epochSupply(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountInfo(
    account: string,
    overrides?: CallOverrides
  ): Promise<ICaesar.AccountInfoStructOutput>;

  getActiveParticipants(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentDecayRate(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  getEpochDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getLiquidityRatio(overrides?: CallOverrides): Promise<BigNumber>;

  getNetworkHealthIndex(overrides?: CallOverrides): Promise<BigNumber>;

  getRebaseRatio(overrides?: CallOverrides): Promise<BigNumber>;

  getStabilityPoolBalance(overrides?: CallOverrides): Promise<BigNumber>;

  goldOracle(overrides?: CallOverrides): Promise<string>;

  isAccountExempt(account: string, overrides?: CallOverrides): Promise<boolean>;

  isComposeMsgSender(
    arg0: OriginStruct,
    arg1: BytesLike,
    _sender: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPeer(
    _eid: BigNumberish,
    _peer: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastEpochUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  lastRebaseTime(overrides?: CallOverrides): Promise<BigNumber>;

  lzReceive(
    _origin: OriginStruct,
    _guid: BytesLike,
    _message: BytesLike,
    _executor: string,
    _extraData: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  lzReceiveAndRevert(
    _packets: InboundPacketStruct[],
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  lzReceiveSimulate(
    _origin: OriginStruct,
    _guid: BytesLike,
    _message: BytesLike,
    _executor: string,
    _extraData: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  maxRebasePercent(overrides?: CallOverrides): Promise<BigNumber>;

  migrationContract(overrides?: CallOverrides): Promise<string>;

  migrationEnabled(overrides?: CallOverrides): Promise<boolean>;

  migrationMint(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  msgInspector(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  nextNonce(
    arg0: BigNumberish,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  oApp(overrides?: CallOverrides): Promise<string>;

  oAppVersion(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      senderVersion: BigNumber;
      receiverVersion: BigNumber;
    }
  >;

  oftVersion(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { interfaceId: string; version: BigNumber }>;

  owner(overrides?: CallOverrides): Promise<string>;

  peers(eid: BigNumberish, overrides?: CallOverrides): Promise<string>;

  preCrime(overrides?: CallOverrides): Promise<string>;

  quoteBridgeWithDecay(
    sendParam: SendParamStruct,
    payInLzToken: boolean,
    overrides?: CallOverrides
  ): Promise<MessagingFeeStructOutput>;

  quoteOFT(
    _sendParam: SendParamStruct,
    overrides?: CallOverrides
  ): Promise<
    [
      OFTLimitStructOutput,
      OFTFeeDetailStructOutput[],
      OFTReceiptStructOutput
    ] & {
      oftLimit: OFTLimitStructOutput;
      oftFeeDetails: OFTFeeDetailStructOutput[];
      oftReceipt: OFTReceiptStructOutput;
    }
  >;

  quoteSend(
    _sendParam: SendParamStruct,
    _payInLzToken: boolean,
    overrides?: CallOverrides
  ): Promise<MessagingFeeStructOutput>;

  rebase(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rebaseInterval(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  send(
    _sendParam: SendParamStruct,
    _fee: MessagingFeeStruct,
    _refundAddress: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAccountExemption(
    account: string,
    exempt: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAntiSpeculationConfig(
    config: ICaesar.AntiSpeculationConfigStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDelegate(
    _delegate: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDemurrageConfig(
    config: ICaesar.DemurrageConfigStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setEnforcedOptions(
    _enforcedOptions: EnforcedOptionParamStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMigrationContract(
    _migrationContract: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMigrationEnabled(
    _enabled: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMsgInspector(
    _msgInspector: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPeer(
    _eid: BigNumberish,
    _peer: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPreCrime(
    _preCrime: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sharedDecimals(overrides?: CallOverrides): Promise<number>;

  shouldRebase(overrides?: CallOverrides): Promise<boolean>;

  stabilityPoolBalance(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  targetPrice(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  totalHolders(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateAccountActivity(
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateParticipationScore(
    account: string,
    transactionVolume: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawFromStabilityPool(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    SEND(overrides?: CallOverrides): Promise<number>;

    SEND_AND_CALL(overrides?: CallOverrides): Promise<number>;

    accounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        balance: BigNumber;
        lastActivity: BigNumber;
        participationScore: BigNumber;
        holdingStartTime: BigNumber;
        isExempt: boolean;
      }
    >;

    activeParticipants(overrides?: CallOverrides): Promise<BigNumber>;

    advanceEpoch(overrides?: CallOverrides): Promise<void>;

    allowInitializePath(
      origin: OriginStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    antiSpeculationEngine(overrides?: CallOverrides): Promise<string>;

    applyDemurrage(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvalRequired(overrides?: CallOverrides): Promise<boolean>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    bridgeWithDecay(
      sendParam: SendParamStruct,
      fee: MessagingFeeStruct,
      refundAddress: string,
      overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>;

    calculateDemurrage(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSpeculationPenalty(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainSupply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    combineOptions(
      _eid: BigNumberish,
      _msgType: BigNumberish,
      _extraOptions: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    contributeToStabilityPool(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    decimalConversionRate(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    demurrageManager(overrides?: CallOverrides): Promise<string>;

    endpoint(overrides?: CallOverrides): Promise<string>;

    enforcedOptions(
      eid: BigNumberish,
      msgType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    epochSupply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<ICaesar.AccountInfoStructOutput>;

    getActiveParticipants(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentDecayRate(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getNetworkHealthIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getRebaseRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getStabilityPoolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    goldOracle(overrides?: CallOverrides): Promise<string>;

    isAccountExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isComposeMsgSender(
      arg0: OriginStruct,
      arg1: BytesLike,
      _sender: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPeer(
      _eid: BigNumberish,
      _peer: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastEpochUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    lastRebaseTime(overrides?: CallOverrides): Promise<BigNumber>;

    lzReceive(
      _origin: OriginStruct,
      _guid: BytesLike,
      _message: BytesLike,
      _executor: string,
      _extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    lzReceiveAndRevert(
      _packets: InboundPacketStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    lzReceiveSimulate(
      _origin: OriginStruct,
      _guid: BytesLike,
      _message: BytesLike,
      _executor: string,
      _extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    maxRebasePercent(overrides?: CallOverrides): Promise<BigNumber>;

    migrationContract(overrides?: CallOverrides): Promise<string>;

    migrationEnabled(overrides?: CallOverrides): Promise<boolean>;

    migrationMint(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    msgInspector(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    nextNonce(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oApp(overrides?: CallOverrides): Promise<string>;

    oAppVersion(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        senderVersion: BigNumber;
        receiverVersion: BigNumber;
      }
    >;

    oftVersion(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { interfaceId: string; version: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    peers(eid: BigNumberish, overrides?: CallOverrides): Promise<string>;

    preCrime(overrides?: CallOverrides): Promise<string>;

    quoteBridgeWithDecay(
      sendParam: SendParamStruct,
      payInLzToken: boolean,
      overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>;

    quoteOFT(
      _sendParam: SendParamStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        OFTLimitStructOutput,
        OFTFeeDetailStructOutput[],
        OFTReceiptStructOutput
      ] & {
        oftLimit: OFTLimitStructOutput;
        oftFeeDetails: OFTFeeDetailStructOutput[];
        oftReceipt: OFTReceiptStructOutput;
      }
    >;

    quoteSend(
      _sendParam: SendParamStruct,
      _payInLzToken: boolean,
      overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>;

    rebase(overrides?: CallOverrides): Promise<BigNumber>;

    rebaseInterval(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    send(
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [MessagingReceiptStructOutput, OFTReceiptStructOutput] & {
        msgReceipt: MessagingReceiptStructOutput;
        oftReceipt: OFTReceiptStructOutput;
      }
    >;

    setAccountExemption(
      account: string,
      exempt: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setAntiSpeculationConfig(
      config: ICaesar.AntiSpeculationConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setDelegate(_delegate: string, overrides?: CallOverrides): Promise<void>;

    setDemurrageConfig(
      config: ICaesar.DemurrageConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnforcedOptions(
      _enforcedOptions: EnforcedOptionParamStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMigrationContract(
      _migrationContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMigrationEnabled(
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMsgInspector(
      _msgInspector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPeer(
      _eid: BigNumberish,
      _peer: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setPreCrime(_preCrime: string, overrides?: CallOverrides): Promise<void>;

    sharedDecimals(overrides?: CallOverrides): Promise<number>;

    shouldRebase(overrides?: CallOverrides): Promise<boolean>;

    stabilityPoolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    targetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    totalHolders(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAccountActivity(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateParticipationScore(
      account: string,
      transactionVolume: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromStabilityPool(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccountActivityUpdated(address,uint256)"(
      account?: string | null,
      timestamp?: null
    ): AccountActivityUpdatedEventFilter;
    AccountActivityUpdated(
      account?: string | null,
      timestamp?: null
    ): AccountActivityUpdatedEventFilter;

    "AntiSpeculationPenalty(address,uint256,uint256)"(
      account?: string | null,
      penalty?: null,
      timestamp?: null
    ): AntiSpeculationPenaltyEventFilter;
    AntiSpeculationPenalty(
      account?: string | null,
      penalty?: null,
      timestamp?: null
    ): AntiSpeculationPenaltyEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "CrossChainSupplySync(uint32,uint256)"(
      chainId?: BigNumberish | null,
      supply?: null
    ): CrossChainSupplySyncEventFilter;
    CrossChainSupplySync(
      chainId?: BigNumberish | null,
      supply?: null
    ): CrossChainSupplySyncEventFilter;

    "DemurrageApplied(address,uint256,uint256)"(
      account?: string | null,
      amount?: null,
      timestamp?: null
    ): DemurrageAppliedEventFilter;
    DemurrageApplied(
      account?: string | null,
      amount?: null,
      timestamp?: null
    ): DemurrageAppliedEventFilter;

    "EnforcedOptionSet((uint32,uint16,bytes)[])"(
      _enforcedOptions?: null
    ): EnforcedOptionSetEventFilter;
    EnforcedOptionSet(_enforcedOptions?: null): EnforcedOptionSetEventFilter;

    "EpochAdvanced(uint256,uint256)"(
      newEpoch?: BigNumberish | null,
      timestamp?: null
    ): EpochAdvancedEventFilter;
    EpochAdvanced(
      newEpoch?: BigNumberish | null,
      timestamp?: null
    ): EpochAdvancedEventFilter;

    "MigrationContractSet(address)"(
      migrationContract?: string | null
    ): MigrationContractSetEventFilter;
    MigrationContractSet(
      migrationContract?: string | null
    ): MigrationContractSetEventFilter;

    "MigrationEnabled(bool)"(enabled?: null): MigrationEnabledEventFilter;
    MigrationEnabled(enabled?: null): MigrationEnabledEventFilter;

    "MsgInspectorSet(address)"(inspector?: null): MsgInspectorSetEventFilter;
    MsgInspectorSet(inspector?: null): MsgInspectorSetEventFilter;

    "OFTReceived(bytes32,uint32,address,uint256)"(
      guid?: BytesLike | null,
      srcEid?: null,
      toAddress?: string | null,
      amountReceivedLD?: null
    ): OFTReceivedEventFilter;
    OFTReceived(
      guid?: BytesLike | null,
      srcEid?: null,
      toAddress?: string | null,
      amountReceivedLD?: null
    ): OFTReceivedEventFilter;

    "OFTSent(bytes32,uint32,address,uint256,uint256)"(
      guid?: BytesLike | null,
      dstEid?: null,
      fromAddress?: string | null,
      amountSentLD?: null,
      amountReceivedLD?: null
    ): OFTSentEventFilter;
    OFTSent(
      guid?: BytesLike | null,
      dstEid?: null,
      fromAddress?: string | null,
      amountSentLD?: null,
      amountReceivedLD?: null
    ): OFTSentEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ParticipationScoreUpdate(address,uint256)"(
      account?: string | null,
      score?: null
    ): ParticipationScoreUpdateEventFilter;
    ParticipationScoreUpdate(
      account?: string | null,
      score?: null
    ): ParticipationScoreUpdateEventFilter;

    "PeerSet(uint32,bytes32)"(eid?: null, peer?: null): PeerSetEventFilter;
    PeerSet(eid?: null, peer?: null): PeerSetEventFilter;

    "PreCrimeSet(address)"(preCrimeAddress?: null): PreCrimeSetEventFilter;
    PreCrimeSet(preCrimeAddress?: null): PreCrimeSetEventFilter;

    "RebaseOccurred(uint256,uint256,uint256)"(
      epoch?: BigNumberish | null,
      rebaseRatio?: null,
      newTotalSupply?: null
    ): RebaseOccurredEventFilter;
    RebaseOccurred(
      epoch?: BigNumberish | null,
      rebaseRatio?: null,
      newTotalSupply?: null
    ): RebaseOccurredEventFilter;

    "StabilityPoolContribution(uint256,uint256)"(
      amount?: null,
      timestamp?: null
    ): StabilityPoolContributionEventFilter;
    StabilityPoolContribution(
      amount?: null,
      timestamp?: null
    ): StabilityPoolContributionEventFilter;

    "TensorEpochUpdate(uint256,uint256)"(
      epoch?: BigNumberish | null,
      timestamp?: null
    ): TensorEpochUpdateEventFilter;
    TensorEpochUpdate(
      epoch?: BigNumberish | null,
      timestamp?: null
    ): TensorEpochUpdateEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    SEND(overrides?: CallOverrides): Promise<BigNumber>;

    SEND_AND_CALL(overrides?: CallOverrides): Promise<BigNumber>;

    accounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    activeParticipants(overrides?: CallOverrides): Promise<BigNumber>;

    advanceEpoch(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    allowInitializePath(
      origin: OriginStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    antiSpeculationEngine(overrides?: CallOverrides): Promise<BigNumber>;

    applyDemurrage(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    approvalRequired(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    bridgeWithDecay(
      sendParam: SendParamStruct,
      fee: MessagingFeeStruct,
      refundAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    calculateDemurrage(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSpeculationPenalty(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainSupply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    combineOptions(
      _eid: BigNumberish,
      _msgType: BigNumberish,
      _extraOptions: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contributeToStabilityPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    decimalConversionRate(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    demurrageManager(overrides?: CallOverrides): Promise<BigNumber>;

    endpoint(overrides?: CallOverrides): Promise<BigNumber>;

    enforcedOptions(
      eid: BigNumberish,
      msgType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    epochSupply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveParticipants(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentDecayRate(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getNetworkHealthIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getRebaseRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getStabilityPoolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    goldOracle(overrides?: CallOverrides): Promise<BigNumber>;

    isAccountExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isComposeMsgSender(
      arg0: OriginStruct,
      arg1: BytesLike,
      _sender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPeer(
      _eid: BigNumberish,
      _peer: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastEpochUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    lastRebaseTime(overrides?: CallOverrides): Promise<BigNumber>;

    lzReceive(
      _origin: OriginStruct,
      _guid: BytesLike,
      _message: BytesLike,
      _executor: string,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    lzReceiveAndRevert(
      _packets: InboundPacketStruct[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    lzReceiveSimulate(
      _origin: OriginStruct,
      _guid: BytesLike,
      _message: BytesLike,
      _executor: string,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    maxRebasePercent(overrides?: CallOverrides): Promise<BigNumber>;

    migrationContract(overrides?: CallOverrides): Promise<BigNumber>;

    migrationEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    migrationMint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    msgInspector(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nextNonce(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oApp(overrides?: CallOverrides): Promise<BigNumber>;

    oAppVersion(overrides?: CallOverrides): Promise<BigNumber>;

    oftVersion(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    peers(eid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    preCrime(overrides?: CallOverrides): Promise<BigNumber>;

    quoteBridgeWithDecay(
      sendParam: SendParamStruct,
      payInLzToken: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteOFT(
      _sendParam: SendParamStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteSend(
      _sendParam: SendParamStruct,
      _payInLzToken: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebase(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    rebaseInterval(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    send(
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    setAccountExemption(
      account: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAntiSpeculationConfig(
      config: ICaesar.AntiSpeculationConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDelegate(
      _delegate: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDemurrageConfig(
      config: ICaesar.DemurrageConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setEnforcedOptions(
      _enforcedOptions: EnforcedOptionParamStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMigrationContract(
      _migrationContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMigrationEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMsgInspector(
      _msgInspector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPeer(
      _eid: BigNumberish,
      _peer: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPreCrime(
      _preCrime: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sharedDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    shouldRebase(overrides?: CallOverrides): Promise<BigNumber>;

    stabilityPoolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    targetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalHolders(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateAccountActivity(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateParticipationScore(
      account: string,
      transactionVolume: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawFromStabilityPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SEND(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SEND_AND_CALL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activeParticipants(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    advanceEpoch(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allowInitializePath(
      origin: OriginStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    antiSpeculationEngine(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    applyDemurrage(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    approvalRequired(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bridgeWithDecay(
      sendParam: SendParamStruct,
      fee: MessagingFeeStruct,
      refundAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    calculateDemurrage(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSpeculationPenalty(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainSupply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    combineOptions(
      _eid: BigNumberish,
      _msgType: BigNumberish,
      _extraOptions: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contributeToStabilityPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimalConversionRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    demurrageManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enforcedOptions(
      eid: BigNumberish,
      msgType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochSupply(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveParticipants(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentDecayRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEpochDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidityRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNetworkHealthIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRebaseRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStabilityPoolBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    goldOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAccountExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isComposeMsgSender(
      arg0: OriginStruct,
      arg1: BytesLike,
      _sender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPeer(
      _eid: BigNumberish,
      _peer: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastEpochUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRebaseTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lzReceive(
      _origin: OriginStruct,
      _guid: BytesLike,
      _message: BytesLike,
      _executor: string,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    lzReceiveAndRevert(
      _packets: InboundPacketStruct[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    lzReceiveSimulate(
      _origin: OriginStruct,
      _guid: BytesLike,
      _message: BytesLike,
      _executor: string,
      _extraData: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    maxRebasePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrationContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrationEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrationMint(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    msgInspector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextNonce(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oApp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oAppVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oftVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    peers(
      eid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    preCrime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteBridgeWithDecay(
      sendParam: SendParamStruct,
      payInLzToken: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteOFT(
      _sendParam: SendParamStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteSend(
      _sendParam: SendParamStruct,
      _payInLzToken: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebase(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rebaseInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    send(
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAccountExemption(
      account: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAntiSpeculationConfig(
      config: ICaesar.AntiSpeculationConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDelegate(
      _delegate: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDemurrageConfig(
      config: ICaesar.DemurrageConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setEnforcedOptions(
      _enforcedOptions: EnforcedOptionParamStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMigrationContract(
      _migrationContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMigrationEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMsgInspector(
      _msgInspector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPeer(
      _eid: BigNumberish,
      _peer: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPreCrime(
      _preCrime: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sharedDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shouldRebase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stabilityPoolBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalHolders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateAccountActivity(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateParticipationScore(
      account: string,
      transactionVolume: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawFromStabilityPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
