/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace StripeIntegrationManager {
  export type FiatActivitySummaryStruct = {
    volume24h: BigNumberish;
    volume7d: BigNumberish;
    volume30d: BigNumberish;
    transactionCount24h: BigNumberish;
    averageTransactionSize: BigNumberish;
    discountEligibility: BigNumberish;
    lastUpdate: BigNumberish;
  };

  export type FiatActivitySummaryStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    volume24h: BigNumber;
    volume7d: BigNumber;
    volume30d: BigNumber;
    transactionCount24h: BigNumber;
    averageTransactionSize: BigNumber;
    discountEligibility: BigNumber;
    lastUpdate: BigNumber;
  };

  export type BackingValidationDataStruct = {
    totalUSDCReserves: BigNumberish;
    totalStripeBalance: BigNumberish;
    pendingTransactions: BigNumberish;
    reservedFunds: BigNumberish;
    availableFunds: BigNumberish;
    lastValidation: BigNumberish;
    isValid: boolean;
    validationNonce: BigNumberish;
  };

  export type BackingValidationDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    totalUSDCReserves: BigNumber;
    totalStripeBalance: BigNumber;
    pendingTransactions: BigNumber;
    reservedFunds: BigNumber;
    availableFunds: BigNumber;
    lastValidation: BigNumber;
    isValid: boolean;
    validationNonce: BigNumber;
  };

  export type FiatTransactionStruct = {
    transactionId: string;
    stripePaymentId: string;
    userAddress: string;
    amount: BigNumberish;
    currency: string;
    transactionType: BigNumberish;
    status: BigNumberish;
    timestamp: BigNumberish;
    description: string;
    hash: BytesLike;
  };

  export type FiatTransactionStructOutput = [
    string,
    string,
    string,
    BigNumber,
    string,
    number,
    number,
    BigNumber,
    string,
    string
  ] & {
    transactionId: string;
    stripePaymentId: string;
    userAddress: string;
    amount: BigNumber;
    currency: string;
    transactionType: number;
    status: number;
    timestamp: BigNumber;
    description: string;
    hash: string;
  };

  export type StripeAccountDataStruct = {
    stripeAccountId: string;
    ethereumAddress: string;
    isVerified: boolean;
    totalVolume: BigNumberish;
    lastActivity: BigNumberish;
    currentBalance: BigNumberish;
    accountType: BigNumberish;
    businessCategory: string;
    riskScore: BigNumberish;
    isBlocked: boolean;
  };

  export type StripeAccountDataStructOutput = [
    string,
    string,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string,
    BigNumber,
    boolean
  ] & {
    stripeAccountId: string;
    ethereumAddress: string;
    isVerified: boolean;
    totalVolume: BigNumber;
    lastActivity: BigNumber;
    currentBalance: BigNumber;
    accountType: number;
    businessCategory: string;
    riskScore: BigNumber;
    isBlocked: boolean;
  };
}

export interface StripeIntegrationManagerInterface extends utils.Interface {
  functions: {
    "BACKING_VALIDATION_TOLERANCE()": FunctionFragment;
    "MAX_DISCOUNT_PERCENTAGE()": FunctionFragment;
    "MAX_WEBHOOK_RETRY()": FunctionFragment;
    "MIN_FIAT_ACTIVITY_FOR_DISCOUNT()": FunctionFragment;
    "SIGNATURE_VALIDITY_PERIOD()": FunctionFragment;
    "activateEmergencyMode(string)": FunctionFragment;
    "activitySummaries(address)": FunctionFragment;
    "addAuthorizedValidator(address)": FunctionFragment;
    "addEmergencyOperator(address)": FunctionFragment;
    "addressToStripeId(address)": FunctionFragment;
    "authorizedValidators(address)": FunctionFragment;
    "backingData()": FunctionFragment;
    "blockStripeAccount(address,bool)": FunctionFragment;
    "calculateFiatDiscount(address)": FunctionFragment;
    "csrToken()": FunctionFragment;
    "deactivateEmergencyMode()": FunctionFragment;
    "economicEngine()": FunctionFragment;
    "emergencyActivatedAt()": FunctionFragment;
    "emergencyMode()": FunctionFragment;
    "emergencyOperators(address)": FunctionFragment;
    "fiatDiscountPercentages(address)": FunctionFragment;
    "fiatTransactions(string)": FunctionFragment;
    "getActivitySummary(address)": FunctionFragment;
    "getBackingData()": FunctionFragment;
    "getFiatDiscount(address)": FunctionFragment;
    "getFiatTransaction(string)": FunctionFragment;
    "getStripeAccountData(address)": FunctionFragment;
    "getUserRedemptionCount(address)": FunctionFragment;
    "getUserTransactions(address)": FunctionFragment;
    "isBackingValid()": FunctionFragment;
    "lastBackingCheck()": FunctionFragment;
    "lastDiscountCalculation(address)": FunctionFragment;
    "linkStripeAccount(string,uint8,string)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingWebhooks(uint256)": FunctionFragment;
    "processStripeWebhook(string,string,bytes,bytes)": FunctionFragment;
    "processedEvents(string)": FunctionFragment;
    "purchaseWithFiat(uint256,string)": FunctionFragment;
    "recordFiatTransaction((string,string,address,uint256,string,uint8,uint8,uint256,string,bytes32))": FunctionFragment;
    "redeemForFiat(uint256)": FunctionFragment;
    "removeAuthorizedValidator(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCsrToken(address)": FunctionFragment;
    "stripeAccounts(address)": FunctionFragment;
    "stripeIdToAddress(string)": FunctionFragment;
    "stripePublishableKey()": FunctionFragment;
    "stripeWebhookSigner()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateStripeConfiguration(string,address)": FunctionFragment;
    "userTransactions(address,uint256)": FunctionFragment;
    "validateFiatBacking((uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256),bytes)": FunctionFragment;
    "verifyStripeAccount(address,bool,uint256)": FunctionFragment;
    "webhookEvents(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BACKING_VALIDATION_TOLERANCE"
      | "MAX_DISCOUNT_PERCENTAGE"
      | "MAX_WEBHOOK_RETRY"
      | "MIN_FIAT_ACTIVITY_FOR_DISCOUNT"
      | "SIGNATURE_VALIDITY_PERIOD"
      | "activateEmergencyMode"
      | "activitySummaries"
      | "addAuthorizedValidator"
      | "addEmergencyOperator"
      | "addressToStripeId"
      | "authorizedValidators"
      | "backingData"
      | "blockStripeAccount"
      | "calculateFiatDiscount"
      | "csrToken"
      | "deactivateEmergencyMode"
      | "economicEngine"
      | "emergencyActivatedAt"
      | "emergencyMode"
      | "emergencyOperators"
      | "fiatDiscountPercentages"
      | "fiatTransactions"
      | "getActivitySummary"
      | "getBackingData"
      | "getFiatDiscount"
      | "getFiatTransaction"
      | "getStripeAccountData"
      | "getUserRedemptionCount"
      | "getUserTransactions"
      | "isBackingValid"
      | "lastBackingCheck"
      | "lastDiscountCalculation"
      | "linkStripeAccount"
      | "owner"
      | "pause"
      | "paused"
      | "pendingWebhooks"
      | "processStripeWebhook"
      | "processedEvents"
      | "purchaseWithFiat"
      | "recordFiatTransaction"
      | "redeemForFiat"
      | "removeAuthorizedValidator"
      | "renounceOwnership"
      | "setCsrToken"
      | "stripeAccounts"
      | "stripeIdToAddress"
      | "stripePublishableKey"
      | "stripeWebhookSigner"
      | "transferOwnership"
      | "unpause"
      | "updateStripeConfiguration"
      | "userTransactions"
      | "validateFiatBacking"
      | "verifyStripeAccount"
      | "webhookEvents"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BACKING_VALIDATION_TOLERANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_DISCOUNT_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_WEBHOOK_RETRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_FIAT_ACTIVITY_FOR_DISCOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SIGNATURE_VALIDITY_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateEmergencyMode",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "activitySummaries",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addAuthorizedValidator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addEmergencyOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addressToStripeId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedValidators",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "backingData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blockStripeAccount",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFiatDiscount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "csrToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deactivateEmergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "economicEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyActivatedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyOperators",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "fiatDiscountPercentages",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "fiatTransactions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActivitySummary",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBackingData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFiatDiscount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFiatTransaction",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStripeAccountData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRedemptionCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTransactions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isBackingValid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastBackingCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastDiscountCalculation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "linkStripeAccount",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingWebhooks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processStripeWebhook",
    values: [string, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processedEvents",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseWithFiat",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "recordFiatTransaction",
    values: [StripeIntegrationManager.FiatTransactionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemForFiat",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedValidator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setCsrToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stripeAccounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stripeIdToAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stripePublishableKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stripeWebhookSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateStripeConfiguration",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userTransactions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateFiatBacking",
    values: [StripeIntegrationManager.BackingValidationDataStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyStripeAccount",
    values: [string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "webhookEvents",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "BACKING_VALIDATION_TOLERANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_DISCOUNT_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_WEBHOOK_RETRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_FIAT_ACTIVITY_FOR_DISCOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SIGNATURE_VALIDITY_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activitySummaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAuthorizedValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addEmergencyOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressToStripeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "backingData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockStripeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFiatDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "csrToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deactivateEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "economicEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyActivatedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fiatDiscountPercentages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fiatTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActivitySummary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBackingData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFiatDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFiatTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStripeAccountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRedemptionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBackingValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastBackingCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastDiscountCalculation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkStripeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingWebhooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processStripeWebhook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processedEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseWithFiat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordFiatTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemForFiat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCsrToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stripeAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stripeIdToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stripePublishableKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stripeWebhookSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateStripeConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateFiatBacking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyStripeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "webhookEvents",
    data: BytesLike
  ): Result;

  events: {
    "AccountVerificationStatusChanged(address,bool)": EventFragment;
    "BackingValidated(uint256,uint256,bool)": EventFragment;
    "EmergencyModeActivated(address,string)": EventFragment;
    "FiatDiscountCalculated(address,uint256)": EventFragment;
    "FiatTransactionProcessed(string,address,uint256,uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "StripeAccountLinked(address,string)": EventFragment;
    "StripeConfigurationUpdated(string)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WebhookProcessed(string,string,bool)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AccountVerificationStatusChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BackingValidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyModeActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FiatDiscountCalculated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FiatTransactionProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StripeAccountLinked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StripeConfigurationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WebhookProcessed"): EventFragment;
}

export interface AccountVerificationStatusChangedEventObject {
  user: string;
  isVerified: boolean;
}
export type AccountVerificationStatusChangedEvent = TypedEvent<
  [string, boolean],
  AccountVerificationStatusChangedEventObject
>;

export type AccountVerificationStatusChangedEventFilter =
  TypedEventFilter<AccountVerificationStatusChangedEvent>;

export interface BackingValidatedEventObject {
  totalBacking: BigNumber;
  requiredBacking: BigNumber;
  isValid: boolean;
}
export type BackingValidatedEvent = TypedEvent<
  [BigNumber, BigNumber, boolean],
  BackingValidatedEventObject
>;

export type BackingValidatedEventFilter =
  TypedEventFilter<BackingValidatedEvent>;

export interface EmergencyModeActivatedEventObject {
  operator: string;
  reason: string;
}
export type EmergencyModeActivatedEvent = TypedEvent<
  [string, string],
  EmergencyModeActivatedEventObject
>;

export type EmergencyModeActivatedEventFilter =
  TypedEventFilter<EmergencyModeActivatedEvent>;

export interface FiatDiscountCalculatedEventObject {
  user: string;
  discountPercentage: BigNumber;
}
export type FiatDiscountCalculatedEvent = TypedEvent<
  [string, BigNumber],
  FiatDiscountCalculatedEventObject
>;

export type FiatDiscountCalculatedEventFilter =
  TypedEventFilter<FiatDiscountCalculatedEvent>;

export interface FiatTransactionProcessedEventObject {
  transactionId: string;
  user: string;
  amount: BigNumber;
  transactionType: number;
}
export type FiatTransactionProcessedEvent = TypedEvent<
  [string, string, BigNumber, number],
  FiatTransactionProcessedEventObject
>;

export type FiatTransactionProcessedEventFilter =
  TypedEventFilter<FiatTransactionProcessedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface StripeAccountLinkedEventObject {
  user: string;
  stripeAccountId: string;
}
export type StripeAccountLinkedEvent = TypedEvent<
  [string, string],
  StripeAccountLinkedEventObject
>;

export type StripeAccountLinkedEventFilter =
  TypedEventFilter<StripeAccountLinkedEvent>;

export interface StripeConfigurationUpdatedEventObject {
  publishableKey: string;
}
export type StripeConfigurationUpdatedEvent = TypedEvent<
  [string],
  StripeConfigurationUpdatedEventObject
>;

export type StripeConfigurationUpdatedEventFilter =
  TypedEventFilter<StripeConfigurationUpdatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WebhookProcessedEventObject {
  eventId: string;
  eventType: string;
  success: boolean;
}
export type WebhookProcessedEvent = TypedEvent<
  [string, string, boolean],
  WebhookProcessedEventObject
>;

export type WebhookProcessedEventFilter =
  TypedEventFilter<WebhookProcessedEvent>;

export interface StripeIntegrationManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StripeIntegrationManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BACKING_VALIDATION_TOLERANCE(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    MAX_DISCOUNT_PERCENTAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_WEBHOOK_RETRY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_FIAT_ACTIVITY_FOR_DISCOUNT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    SIGNATURE_VALIDITY_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    activateEmergencyMode(
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    activitySummaries(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        volume24h: BigNumber;
        volume7d: BigNumber;
        volume30d: BigNumber;
        transactionCount24h: BigNumber;
        averageTransactionSize: BigNumber;
        discountEligibility: BigNumber;
        lastUpdate: BigNumber;
      }
    >;

    addAuthorizedValidator(
      validator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addressToStripeId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    authorizedValidators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    backingData(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        totalUSDCReserves: BigNumber;
        totalStripeBalance: BigNumber;
        pendingTransactions: BigNumber;
        reservedFunds: BigNumber;
        availableFunds: BigNumber;
        lastValidation: BigNumber;
        isValid: boolean;
        validationNonce: BigNumber;
      }
    >;

    blockStripeAccount(
      userAddress: string,
      isBlocked: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    calculateFiatDiscount(
      userAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    csrToken(overrides?: CallOverrides): Promise<[string]>;

    deactivateEmergencyMode(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    economicEngine(overrides?: CallOverrides): Promise<[string]>;

    emergencyActivatedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyMode(overrides?: CallOverrides): Promise<[boolean]>;

    emergencyOperators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    fiatDiscountPercentages(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fiatTransactions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        string,
        number,
        number,
        BigNumber,
        string,
        string
      ] & {
        transactionId: string;
        stripePaymentId: string;
        userAddress: string;
        amount: BigNumber;
        currency: string;
        transactionType: number;
        status: number;
        timestamp: BigNumber;
        description: string;
        hash: string;
      }
    >;

    getActivitySummary(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[StripeIntegrationManager.FiatActivitySummaryStructOutput]>;

    getBackingData(
      overrides?: CallOverrides
    ): Promise<[StripeIntegrationManager.BackingValidationDataStructOutput]>;

    getFiatDiscount(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFiatTransaction(
      transactionId: string,
      overrides?: CallOverrides
    ): Promise<[StripeIntegrationManager.FiatTransactionStructOutput]>;

    getStripeAccountData(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[StripeIntegrationManager.StripeAccountDataStructOutput]>;

    getUserRedemptionCount(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    getUserTransactions(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    isBackingValid(overrides?: CallOverrides): Promise<[boolean]>;

    lastBackingCheck(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastDiscountCalculation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    linkStripeAccount(
      stripeAccountId: string,
      accountType: BigNumberish,
      businessCategory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingWebhooks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    processStripeWebhook(
      eventId: string,
      eventType: string,
      eventData: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    processedEvents(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    purchaseWithFiat(
      amount: BigNumberish,
      paymentMethodId: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    recordFiatTransaction(
      transaction: StripeIntegrationManager.FiatTransactionStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    redeemForFiat(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeAuthorizedValidator(
      validator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setCsrToken(
      _csrToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stripeAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        BigNumber,
        boolean
      ] & {
        stripeAccountId: string;
        ethereumAddress: string;
        isVerified: boolean;
        totalVolume: BigNumber;
        lastActivity: BigNumber;
        currentBalance: BigNumber;
        accountType: number;
        businessCategory: string;
        riskScore: BigNumber;
        isBlocked: boolean;
      }
    >;

    stripeIdToAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stripePublishableKey(overrides?: CallOverrides): Promise<[string]>;

    stripeWebhookSigner(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateStripeConfiguration(
      _publishableKey: string,
      _webhookSigner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    userTransactions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    validateFiatBacking(
      newBackingData: StripeIntegrationManager.BackingValidationDataStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    verifyStripeAccount(
      userAddress: string,
      isVerified: boolean,
      riskScore: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    webhookEvents(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, boolean, BigNumber] & {
        eventId: string;
        eventType: string;
        eventData: string;
        timestamp: BigNumber;
        signature: string;
        processed: boolean;
        retryCount: BigNumber;
      }
    >;
  };

  BACKING_VALIDATION_TOLERANCE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_DISCOUNT_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_WEBHOOK_RETRY(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_FIAT_ACTIVITY_FOR_DISCOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  SIGNATURE_VALIDITY_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  activateEmergencyMode(
    reason: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  activitySummaries(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      volume24h: BigNumber;
      volume7d: BigNumber;
      volume30d: BigNumber;
      transactionCount24h: BigNumber;
      averageTransactionSize: BigNumber;
      discountEligibility: BigNumber;
      lastUpdate: BigNumber;
    }
  >;

  addAuthorizedValidator(
    validator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addEmergencyOperator(
    operator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addressToStripeId(arg0: string, overrides?: CallOverrides): Promise<string>;

  authorizedValidators(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  backingData(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber
    ] & {
      totalUSDCReserves: BigNumber;
      totalStripeBalance: BigNumber;
      pendingTransactions: BigNumber;
      reservedFunds: BigNumber;
      availableFunds: BigNumber;
      lastValidation: BigNumber;
      isValid: boolean;
      validationNonce: BigNumber;
    }
  >;

  blockStripeAccount(
    userAddress: string,
    isBlocked: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  calculateFiatDiscount(
    userAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  csrToken(overrides?: CallOverrides): Promise<string>;

  deactivateEmergencyMode(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  economicEngine(overrides?: CallOverrides): Promise<string>;

  emergencyActivatedAt(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyMode(overrides?: CallOverrides): Promise<boolean>;

  emergencyOperators(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  fiatDiscountPercentages(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fiatTransactions(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      string,
      number,
      number,
      BigNumber,
      string,
      string
    ] & {
      transactionId: string;
      stripePaymentId: string;
      userAddress: string;
      amount: BigNumber;
      currency: string;
      transactionType: number;
      status: number;
      timestamp: BigNumber;
      description: string;
      hash: string;
    }
  >;

  getActivitySummary(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<StripeIntegrationManager.FiatActivitySummaryStructOutput>;

  getBackingData(
    overrides?: CallOverrides
  ): Promise<StripeIntegrationManager.BackingValidationDataStructOutput>;

  getFiatDiscount(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFiatTransaction(
    transactionId: string,
    overrides?: CallOverrides
  ): Promise<StripeIntegrationManager.FiatTransactionStructOutput>;

  getStripeAccountData(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<StripeIntegrationManager.StripeAccountDataStructOutput>;

  getUserRedemptionCount(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserTransactions(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  isBackingValid(overrides?: CallOverrides): Promise<boolean>;

  lastBackingCheck(overrides?: CallOverrides): Promise<BigNumber>;

  lastDiscountCalculation(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  linkStripeAccount(
    stripeAccountId: string,
    accountType: BigNumberish,
    businessCategory: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingWebhooks(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  processStripeWebhook(
    eventId: string,
    eventType: string,
    eventData: BytesLike,
    signature: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  processedEvents(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  purchaseWithFiat(
    amount: BigNumberish,
    paymentMethodId: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  recordFiatTransaction(
    transaction: StripeIntegrationManager.FiatTransactionStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  redeemForFiat(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeAuthorizedValidator(
    validator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setCsrToken(
    _csrToken: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stripeAccounts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      string,
      BigNumber,
      boolean
    ] & {
      stripeAccountId: string;
      ethereumAddress: string;
      isVerified: boolean;
      totalVolume: BigNumber;
      lastActivity: BigNumber;
      currentBalance: BigNumber;
      accountType: number;
      businessCategory: string;
      riskScore: BigNumber;
      isBlocked: boolean;
    }
  >;

  stripeIdToAddress(arg0: string, overrides?: CallOverrides): Promise<string>;

  stripePublishableKey(overrides?: CallOverrides): Promise<string>;

  stripeWebhookSigner(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateStripeConfiguration(
    _publishableKey: string,
    _webhookSigner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  userTransactions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  validateFiatBacking(
    newBackingData: StripeIntegrationManager.BackingValidationDataStruct,
    signature: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  verifyStripeAccount(
    userAddress: string,
    isVerified: boolean,
    riskScore: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  webhookEvents(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, string, boolean, BigNumber] & {
      eventId: string;
      eventType: string;
      eventData: string;
      timestamp: BigNumber;
      signature: string;
      processed: boolean;
      retryCount: BigNumber;
    }
  >;

  callStatic: {
    BACKING_VALIDATION_TOLERANCE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DISCOUNT_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WEBHOOK_RETRY(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_FIAT_ACTIVITY_FOR_DISCOUNT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SIGNATURE_VALIDITY_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    activateEmergencyMode(
      reason: string,
      overrides?: CallOverrides
    ): Promise<void>;

    activitySummaries(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        volume24h: BigNumber;
        volume7d: BigNumber;
        volume30d: BigNumber;
        transactionCount24h: BigNumber;
        averageTransactionSize: BigNumber;
        discountEligibility: BigNumber;
        lastUpdate: BigNumber;
      }
    >;

    addAuthorizedValidator(
      validator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addEmergencyOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addressToStripeId(arg0: string, overrides?: CallOverrides): Promise<string>;

    authorizedValidators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    backingData(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        totalUSDCReserves: BigNumber;
        totalStripeBalance: BigNumber;
        pendingTransactions: BigNumber;
        reservedFunds: BigNumber;
        availableFunds: BigNumber;
        lastValidation: BigNumber;
        isValid: boolean;
        validationNonce: BigNumber;
      }
    >;

    blockStripeAccount(
      userAddress: string,
      isBlocked: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateFiatDiscount(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    csrToken(overrides?: CallOverrides): Promise<string>;

    deactivateEmergencyMode(overrides?: CallOverrides): Promise<void>;

    economicEngine(overrides?: CallOverrides): Promise<string>;

    emergencyActivatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyMode(overrides?: CallOverrides): Promise<boolean>;

    emergencyOperators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    fiatDiscountPercentages(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fiatTransactions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        string,
        number,
        number,
        BigNumber,
        string,
        string
      ] & {
        transactionId: string;
        stripePaymentId: string;
        userAddress: string;
        amount: BigNumber;
        currency: string;
        transactionType: number;
        status: number;
        timestamp: BigNumber;
        description: string;
        hash: string;
      }
    >;

    getActivitySummary(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<StripeIntegrationManager.FiatActivitySummaryStructOutput>;

    getBackingData(
      overrides?: CallOverrides
    ): Promise<StripeIntegrationManager.BackingValidationDataStructOutput>;

    getFiatDiscount(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFiatTransaction(
      transactionId: string,
      overrides?: CallOverrides
    ): Promise<StripeIntegrationManager.FiatTransactionStructOutput>;

    getStripeAccountData(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<StripeIntegrationManager.StripeAccountDataStructOutput>;

    getUserRedemptionCount(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTransactions(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    isBackingValid(overrides?: CallOverrides): Promise<boolean>;

    lastBackingCheck(overrides?: CallOverrides): Promise<BigNumber>;

    lastDiscountCalculation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linkStripeAccount(
      stripeAccountId: string,
      accountType: BigNumberish,
      businessCategory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingWebhooks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    processStripeWebhook(
      eventId: string,
      eventType: string,
      eventData: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    processedEvents(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    purchaseWithFiat(
      amount: BigNumberish,
      paymentMethodId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    recordFiatTransaction(
      transaction: StripeIntegrationManager.FiatTransactionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemForFiat(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAuthorizedValidator(
      validator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCsrToken(_csrToken: string, overrides?: CallOverrides): Promise<void>;

    stripeAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        BigNumber,
        boolean
      ] & {
        stripeAccountId: string;
        ethereumAddress: string;
        isVerified: boolean;
        totalVolume: BigNumber;
        lastActivity: BigNumber;
        currentBalance: BigNumber;
        accountType: number;
        businessCategory: string;
        riskScore: BigNumber;
        isBlocked: boolean;
      }
    >;

    stripeIdToAddress(arg0: string, overrides?: CallOverrides): Promise<string>;

    stripePublishableKey(overrides?: CallOverrides): Promise<string>;

    stripeWebhookSigner(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateStripeConfiguration(
      _publishableKey: string,
      _webhookSigner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userTransactions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    validateFiatBacking(
      newBackingData: StripeIntegrationManager.BackingValidationDataStruct,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyStripeAccount(
      userAddress: string,
      isVerified: boolean,
      riskScore: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    webhookEvents(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, boolean, BigNumber] & {
        eventId: string;
        eventType: string;
        eventData: string;
        timestamp: BigNumber;
        signature: string;
        processed: boolean;
        retryCount: BigNumber;
      }
    >;
  };

  filters: {
    "AccountVerificationStatusChanged(address,bool)"(
      user?: string | null,
      isVerified?: null
    ): AccountVerificationStatusChangedEventFilter;
    AccountVerificationStatusChanged(
      user?: string | null,
      isVerified?: null
    ): AccountVerificationStatusChangedEventFilter;

    "BackingValidated(uint256,uint256,bool)"(
      totalBacking?: null,
      requiredBacking?: null,
      isValid?: null
    ): BackingValidatedEventFilter;
    BackingValidated(
      totalBacking?: null,
      requiredBacking?: null,
      isValid?: null
    ): BackingValidatedEventFilter;

    "EmergencyModeActivated(address,string)"(
      operator?: null,
      reason?: null
    ): EmergencyModeActivatedEventFilter;
    EmergencyModeActivated(
      operator?: null,
      reason?: null
    ): EmergencyModeActivatedEventFilter;

    "FiatDiscountCalculated(address,uint256)"(
      user?: string | null,
      discountPercentage?: null
    ): FiatDiscountCalculatedEventFilter;
    FiatDiscountCalculated(
      user?: string | null,
      discountPercentage?: null
    ): FiatDiscountCalculatedEventFilter;

    "FiatTransactionProcessed(string,address,uint256,uint8)"(
      transactionId?: null,
      user?: string | null,
      amount?: null,
      transactionType?: null
    ): FiatTransactionProcessedEventFilter;
    FiatTransactionProcessed(
      transactionId?: null,
      user?: string | null,
      amount?: null,
      transactionType?: null
    ): FiatTransactionProcessedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "StripeAccountLinked(address,string)"(
      user?: string | null,
      stripeAccountId?: null
    ): StripeAccountLinkedEventFilter;
    StripeAccountLinked(
      user?: string | null,
      stripeAccountId?: null
    ): StripeAccountLinkedEventFilter;

    "StripeConfigurationUpdated(string)"(
      publishableKey?: null
    ): StripeConfigurationUpdatedEventFilter;
    StripeConfigurationUpdated(
      publishableKey?: null
    ): StripeConfigurationUpdatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "WebhookProcessed(string,string,bool)"(
      eventId?: null,
      eventType?: null,
      success?: null
    ): WebhookProcessedEventFilter;
    WebhookProcessed(
      eventId?: null,
      eventType?: null,
      success?: null
    ): WebhookProcessedEventFilter;
  };

  estimateGas: {
    BACKING_VALIDATION_TOLERANCE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DISCOUNT_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_WEBHOOK_RETRY(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_FIAT_ACTIVITY_FOR_DISCOUNT(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SIGNATURE_VALIDITY_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    activateEmergencyMode(
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    activitySummaries(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addAuthorizedValidator(
      validator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addressToStripeId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authorizedValidators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    backingData(overrides?: CallOverrides): Promise<BigNumber>;

    blockStripeAccount(
      userAddress: string,
      isBlocked: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    calculateFiatDiscount(
      userAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    csrToken(overrides?: CallOverrides): Promise<BigNumber>;

    deactivateEmergencyMode(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    economicEngine(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyActivatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyMode(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyOperators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fiatDiscountPercentages(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fiatTransactions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActivitySummary(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBackingData(overrides?: CallOverrides): Promise<BigNumber>;

    getFiatDiscount(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFiatTransaction(
      transactionId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStripeAccountData(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRedemptionCount(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTransactions(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBackingValid(overrides?: CallOverrides): Promise<BigNumber>;

    lastBackingCheck(overrides?: CallOverrides): Promise<BigNumber>;

    lastDiscountCalculation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linkStripeAccount(
      stripeAccountId: string,
      accountType: BigNumberish,
      businessCategory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingWebhooks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processStripeWebhook(
      eventId: string,
      eventType: string,
      eventData: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    processedEvents(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchaseWithFiat(
      amount: BigNumberish,
      paymentMethodId: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    recordFiatTransaction(
      transaction: StripeIntegrationManager.FiatTransactionStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    redeemForFiat(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeAuthorizedValidator(
      validator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setCsrToken(
      _csrToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stripeAccounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    stripeIdToAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stripePublishableKey(overrides?: CallOverrides): Promise<BigNumber>;

    stripeWebhookSigner(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    updateStripeConfiguration(
      _publishableKey: string,
      _webhookSigner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    userTransactions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateFiatBacking(
      newBackingData: StripeIntegrationManager.BackingValidationDataStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    verifyStripeAccount(
      userAddress: string,
      isVerified: boolean,
      riskScore: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    webhookEvents(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BACKING_VALIDATION_TOLERANCE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_DISCOUNT_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_WEBHOOK_RETRY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_FIAT_ACTIVITY_FOR_DISCOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SIGNATURE_VALIDITY_PERIOD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activateEmergencyMode(
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    activitySummaries(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAuthorizedValidator(
      validator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addressToStripeId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authorizedValidators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    backingData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blockStripeAccount(
      userAddress: string,
      isBlocked: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    calculateFiatDiscount(
      userAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    csrToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deactivateEmergencyMode(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    economicEngine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyActivatedAt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyOperators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fiatDiscountPercentages(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fiatTransactions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActivitySummary(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBackingData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFiatDiscount(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFiatTransaction(
      transactionId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStripeAccountData(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRedemptionCount(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTransactions(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBackingValid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastBackingCheck(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastDiscountCalculation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linkStripeAccount(
      stripeAccountId: string,
      accountType: BigNumberish,
      businessCategory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingWebhooks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processStripeWebhook(
      eventId: string,
      eventType: string,
      eventData: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    processedEvents(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchaseWithFiat(
      amount: BigNumberish,
      paymentMethodId: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    recordFiatTransaction(
      transaction: StripeIntegrationManager.FiatTransactionStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    redeemForFiat(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeAuthorizedValidator(
      validator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setCsrToken(
      _csrToken: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stripeAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stripeIdToAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stripePublishableKey(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stripeWebhookSigner(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateStripeConfiguration(
      _publishableKey: string,
      _webhookSigner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userTransactions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateFiatBacking(
      newBackingData: StripeIntegrationManager.BackingValidationDataStruct,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    verifyStripeAccount(
      userAddress: string,
      isVerified: boolean,
      riskScore: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    webhookEvents(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
