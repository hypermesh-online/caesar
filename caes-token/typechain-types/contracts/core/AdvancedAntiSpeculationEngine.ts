/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace AdvancedAntiSpeculationEngine {
  export type AdvancedAntiSpeculationConfigStruct = {
    rapidTradeThreshold: BigNumberish;
    volumeConcentrationLimit: BigNumberish;
    patternDetectionSensitivity: BigNumberish;
    basePenaltyRate: BigNumberish;
    progressivePenaltyMultiplier: BigNumberish;
    circuitBreakerCooldown: BigNumberish;
    whitelistGracePeriod: BigNumberish;
    mlDetectionEnabled: boolean;
  };

  export type AdvancedAntiSpeculationConfigStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    rapidTradeThreshold: BigNumber;
    volumeConcentrationLimit: BigNumber;
    patternDetectionSensitivity: BigNumber;
    basePenaltyRate: BigNumber;
    progressivePenaltyMultiplier: BigNumber;
    circuitBreakerCooldown: BigNumber;
    whitelistGracePeriod: BigNumber;
    mlDetectionEnabled: boolean;
  };

  export type AccountRiskProfileStruct = {
    overallRiskScore: BigNumberish;
    frequencyRisk: BigNumberish;
    volumeRisk: BigNumberish;
    patternRisk: BigNumberish;
    marketImpactRisk: BigNumberish;
    totalPenaltiesPaid: BigNumberish;
    flagCount: BigNumberish;
    lastRiskUpdate: BigNumberish;
    isCircuitBreakerActive: boolean;
    circuitBreakerUntil: BigNumberish;
    consecutiveHighRiskTxCount: BigNumberish;
  };

  export type AccountRiskProfileStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    overallRiskScore: BigNumber;
    frequencyRisk: BigNumber;
    volumeRisk: BigNumber;
    patternRisk: BigNumber;
    marketImpactRisk: BigNumber;
    totalPenaltiesPaid: BigNumber;
    flagCount: BigNumber;
    lastRiskUpdate: BigNumber;
    isCircuitBreakerActive: boolean;
    circuitBreakerUntil: BigNumber;
    consecutiveHighRiskTxCount: BigNumber;
  };

  export type TransactionPatternStruct = {
    timestamp: BigNumberish;
    amount: BigNumberish;
    transactionType: BigNumberish;
    counterparty: string;
    priceImpact: BigNumberish;
    riskScore: BigNumberish;
  };

  export type TransactionPatternStructOutput = [
    BigNumber,
    BigNumber,
    number,
    string,
    BigNumber,
    BigNumber
  ] & {
    timestamp: BigNumber;
    amount: BigNumber;
    transactionType: number;
    counterparty: string;
    priceImpact: BigNumber;
    riskScore: BigNumber;
  };

  export type MLModelParametersStruct = {
    featureWeights: BigNumberish[];
    modelThreshold: BigNumberish;
    modelAccuracy: BigNumberish;
    lastModelUpdate: BigNumberish;
    isModelActive: boolean;
  };

  export type MLModelParametersStructOutput = [
    BigNumber[],
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    featureWeights: BigNumber[];
    modelThreshold: BigNumber;
    modelAccuracy: BigNumber;
    lastModelUpdate: BigNumber;
    isModelActive: boolean;
  };

  export type MarketManipulationDetectionStruct = {
    suspiciousVolumeThreshold: BigNumberish;
    priceManipulationThreshold: BigNumberish;
    frontRunningWindow: BigNumberish;
    washTradingWindow: BigNumberish;
    coordinatedAttackDetection: boolean;
  };

  export type MarketManipulationDetectionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    suspiciousVolumeThreshold: BigNumber;
    priceManipulationThreshold: BigNumber;
    frontRunningWindow: BigNumber;
    washTradingWindow: BigNumber;
    coordinatedAttackDetection: boolean;
  };
}

export interface AdvancedAntiSpeculationEngineInterface
  extends utils.Interface {
  functions: {
    "BASIS_POINTS()": FunctionFragment;
    "CIRCUIT_BREAKER_THRESHOLD()": FunctionFragment;
    "HIGH_RISK_THRESHOLD()": FunctionFragment;
    "MAX_PENALTY_RATE()": FunctionFragment;
    "MAX_RISK_SCORE()": FunctionFragment;
    "MEDIUM_RISK_THRESHOLD()": FunctionFragment;
    "PATTERN_HISTORY_LENGTH()": FunctionFragment;
    "PRECISION()": FunctionFragment;
    "accountRiskProfiles(address)": FunctionFragment;
    "accountTransactionHistory(address,uint256)": FunctionFragment;
    "activateEmergencyMode(string)": FunctionFragment;
    "addEmergencyOperator(address)": FunctionFragment;
    "analyzeTransactionAdvanced(address,uint256,uint8,address)": FunctionFragment;
    "averageNetworkRiskScore()": FunctionFragment;
    "behavioralRisk(address)": FunctionFragment;
    "circuitBreakerActivations()": FunctionFragment;
    "config()": FunctionFragment;
    "deactivateCircuitBreaker(address)": FunctionFragment;
    "deactivateEmergencyMode()": FunctionFragment;
    "detectCoordinatedAttack(address[],uint256)": FunctionFragment;
    "emergencyMode()": FunctionFragment;
    "emergencyOperators(address)": FunctionFragment;
    "flaggedAccounts(address)": FunctionFragment;
    "getAccountFlags(address)": FunctionFragment;
    "getAccountRiskProfile(address)": FunctionFragment;
    "getAccountTransactionHistory(address)": FunctionFragment;
    "getAntiSpeculationConfig()": FunctionFragment;
    "getMLModelParameters()": FunctionFragment;
    "getManipulationConfig()": FunctionFragment;
    "getNetworkRiskMetrics()": FunctionFragment;
    "isAccountFlagged(address)": FunctionFragment;
    "isAccountWhitelisted(address)": FunctionFragment;
    "manipulationConfig()": FunctionFragment;
    "manualCircuitBreaker(address,uint256)": FunctionFragment;
    "marketManipulationDetections()": FunctionFragment;
    "mlModel()": FunctionFragment;
    "owner()": FunctionFragment;
    "pairTransactionCounts(address,address)": FunctionFragment;
    "patternSignatures(bytes32)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "removeEmergencyOperator(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAccountFlagged(address,bool)": FunctionFragment;
    "setWhitelistStatus(address,bool)": FunctionFragment;
    "socialGraphRisk(address)": FunctionFragment;
    "temporalRisk(address)": FunctionFragment;
    "totalPenaltiesCollected()": FunctionFragment;
    "totalTransactionsAnalyzed()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateAntiSpeculationConfig((uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool))": FunctionFragment;
    "updateMLModel(uint256[10],uint256,uint256)": FunctionFragment;
    "updateManipulationConfig((uint256,uint256,uint256,uint256,bool))": FunctionFragment;
    "whitelistedAccounts(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASIS_POINTS"
      | "CIRCUIT_BREAKER_THRESHOLD"
      | "HIGH_RISK_THRESHOLD"
      | "MAX_PENALTY_RATE"
      | "MAX_RISK_SCORE"
      | "MEDIUM_RISK_THRESHOLD"
      | "PATTERN_HISTORY_LENGTH"
      | "PRECISION"
      | "accountRiskProfiles"
      | "accountTransactionHistory"
      | "activateEmergencyMode"
      | "addEmergencyOperator"
      | "analyzeTransactionAdvanced"
      | "averageNetworkRiskScore"
      | "behavioralRisk"
      | "circuitBreakerActivations"
      | "config"
      | "deactivateCircuitBreaker"
      | "deactivateEmergencyMode"
      | "detectCoordinatedAttack"
      | "emergencyMode"
      | "emergencyOperators"
      | "flaggedAccounts"
      | "getAccountFlags"
      | "getAccountRiskProfile"
      | "getAccountTransactionHistory"
      | "getAntiSpeculationConfig"
      | "getMLModelParameters"
      | "getManipulationConfig"
      | "getNetworkRiskMetrics"
      | "isAccountFlagged"
      | "isAccountWhitelisted"
      | "manipulationConfig"
      | "manualCircuitBreaker"
      | "marketManipulationDetections"
      | "mlModel"
      | "owner"
      | "pairTransactionCounts"
      | "patternSignatures"
      | "pause"
      | "paused"
      | "removeEmergencyOperator"
      | "renounceOwnership"
      | "setAccountFlagged"
      | "setWhitelistStatus"
      | "socialGraphRisk"
      | "temporalRisk"
      | "totalPenaltiesCollected"
      | "totalTransactionsAnalyzed"
      | "transferOwnership"
      | "unpause"
      | "updateAntiSpeculationConfig"
      | "updateMLModel"
      | "updateManipulationConfig"
      | "whitelistedAccounts"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CIRCUIT_BREAKER_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HIGH_RISK_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PENALTY_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_RISK_SCORE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MEDIUM_RISK_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PATTERN_HISTORY_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accountRiskProfiles",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "accountTransactionHistory",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activateEmergencyMode",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addEmergencyOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "analyzeTransactionAdvanced",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "averageNetworkRiskScore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "behavioralRisk",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "circuitBreakerActivations",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deactivateCircuitBreaker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateEmergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "detectCoordinatedAttack",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyOperators",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "flaggedAccounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountFlags",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountRiskProfile",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountTransactionHistory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAntiSpeculationConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMLModelParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getManipulationConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNetworkRiskMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountFlagged",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "manipulationConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "manualCircuitBreaker",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketManipulationDetections",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mlModel", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairTransactionCounts",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "patternSignatures",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeEmergencyOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountFlagged",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistStatus",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "socialGraphRisk",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "temporalRisk",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPenaltiesCollected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTransactionsAnalyzed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAntiSpeculationConfig",
    values: [AdvancedAntiSpeculationEngine.AdvancedAntiSpeculationConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMLModel",
    values: [BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateManipulationConfig",
    values: [AdvancedAntiSpeculationEngine.MarketManipulationDetectionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedAccounts",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CIRCUIT_BREAKER_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HIGH_RISK_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PENALTY_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_RISK_SCORE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MEDIUM_RISK_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PATTERN_HISTORY_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accountRiskProfiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountTransactionHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addEmergencyOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "analyzeTransactionAdvanced",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "averageNetworkRiskScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "behavioralRisk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "circuitBreakerActivations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deactivateCircuitBreaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "detectCoordinatedAttack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flaggedAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountFlags",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountRiskProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountTransactionHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAntiSpeculationConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMLModelParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManipulationConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkRiskMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountFlagged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manipulationConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manualCircuitBreaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketManipulationDetections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mlModel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairTransactionCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "patternSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeEmergencyOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccountFlagged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "socialGraphRisk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "temporalRisk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPenaltiesCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTransactionsAnalyzed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAntiSpeculationConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMLModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateManipulationConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedAccounts",
    data: BytesLike
  ): Result;

  events: {
    "CircuitBreakerActivated(address,uint256)": EventFragment;
    "ConfigurationUpdated((uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool))": EventFragment;
    "EmergencyModeActivated(address,string)": EventFragment;
    "MLModelUpdated(uint256,uint256)": EventFragment;
    "MarketManipulationDetected(address,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PatternDetected(address,bytes32,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "RiskProfileUpdated(address,uint256,uint256)": EventFragment;
    "SpeculationPenaltyApplied(address,uint256,string)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WhitelistStatusChanged(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CircuitBreakerActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfigurationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyModeActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MLModelUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketManipulationDetected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PatternDetected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RiskProfileUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpeculationPenaltyApplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistStatusChanged"): EventFragment;
}

export interface CircuitBreakerActivatedEventObject {
  account: string;
  duration: BigNumber;
}
export type CircuitBreakerActivatedEvent = TypedEvent<
  [string, BigNumber],
  CircuitBreakerActivatedEventObject
>;

export type CircuitBreakerActivatedEventFilter =
  TypedEventFilter<CircuitBreakerActivatedEvent>;

export interface ConfigurationUpdatedEventObject {
  config: AdvancedAntiSpeculationEngine.AdvancedAntiSpeculationConfigStructOutput;
}
export type ConfigurationUpdatedEvent = TypedEvent<
  [AdvancedAntiSpeculationEngine.AdvancedAntiSpeculationConfigStructOutput],
  ConfigurationUpdatedEventObject
>;

export type ConfigurationUpdatedEventFilter =
  TypedEventFilter<ConfigurationUpdatedEvent>;

export interface EmergencyModeActivatedEventObject {
  operator: string;
  reason: string;
}
export type EmergencyModeActivatedEvent = TypedEvent<
  [string, string],
  EmergencyModeActivatedEventObject
>;

export type EmergencyModeActivatedEventFilter =
  TypedEventFilter<EmergencyModeActivatedEvent>;

export interface MLModelUpdatedEventObject {
  newAccuracy: BigNumber;
  threshold: BigNumber;
}
export type MLModelUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MLModelUpdatedEventObject
>;

export type MLModelUpdatedEventFilter = TypedEventFilter<MLModelUpdatedEvent>;

export interface MarketManipulationDetectedEventObject {
  account: string;
  manipulationType: string;
}
export type MarketManipulationDetectedEvent = TypedEvent<
  [string, string],
  MarketManipulationDetectedEventObject
>;

export type MarketManipulationDetectedEventFilter =
  TypedEventFilter<MarketManipulationDetectedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PatternDetectedEventObject {
  account: string;
  patternHash: string;
  riskScore: BigNumber;
}
export type PatternDetectedEvent = TypedEvent<
  [string, string, BigNumber],
  PatternDetectedEventObject
>;

export type PatternDetectedEventFilter = TypedEventFilter<PatternDetectedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RiskProfileUpdatedEventObject {
  account: string;
  oldScore: BigNumber;
  newScore: BigNumber;
}
export type RiskProfileUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RiskProfileUpdatedEventObject
>;

export type RiskProfileUpdatedEventFilter =
  TypedEventFilter<RiskProfileUpdatedEvent>;

export interface SpeculationPenaltyAppliedEventObject {
  account: string;
  penalty: BigNumber;
  reason: string;
}
export type SpeculationPenaltyAppliedEvent = TypedEvent<
  [string, BigNumber, string],
  SpeculationPenaltyAppliedEventObject
>;

export type SpeculationPenaltyAppliedEventFilter =
  TypedEventFilter<SpeculationPenaltyAppliedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WhitelistStatusChangedEventObject {
  account: string;
  isWhitelisted: boolean;
}
export type WhitelistStatusChangedEvent = TypedEvent<
  [string, boolean],
  WhitelistStatusChangedEventObject
>;

export type WhitelistStatusChangedEventFilter =
  TypedEventFilter<WhitelistStatusChangedEvent>;

export interface AdvancedAntiSpeculationEngine extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AdvancedAntiSpeculationEngineInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    CIRCUIT_BREAKER_THRESHOLD(overrides?: CallOverrides): Promise<[BigNumber]>;

    HIGH_RISK_THRESHOLD(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PENALTY_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_RISK_SCORE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MEDIUM_RISK_THRESHOLD(overrides?: CallOverrides): Promise<[BigNumber]>;

    PATTERN_HISTORY_LENGTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    accountRiskProfiles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        overallRiskScore: BigNumber;
        frequencyRisk: BigNumber;
        volumeRisk: BigNumber;
        patternRisk: BigNumber;
        marketImpactRisk: BigNumber;
        totalPenaltiesPaid: BigNumber;
        flagCount: BigNumber;
        lastRiskUpdate: BigNumber;
        isCircuitBreakerActive: boolean;
        circuitBreakerUntil: BigNumber;
        consecutiveHighRiskTxCount: BigNumber;
      }
    >;

    accountTransactionHistory(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, string, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        amount: BigNumber;
        transactionType: number;
        counterparty: string;
        priceImpact: BigNumber;
        riskScore: BigNumber;
      }
    >;

    activateEmergencyMode(
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    analyzeTransactionAdvanced(
      account: string,
      amount: BigNumberish,
      transactionType: BigNumberish,
      counterparty: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    averageNetworkRiskScore(overrides?: CallOverrides): Promise<[BigNumber]>;

    behavioralRisk(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    circuitBreakerActivations(overrides?: CallOverrides): Promise<[BigNumber]>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        rapidTradeThreshold: BigNumber;
        volumeConcentrationLimit: BigNumber;
        patternDetectionSensitivity: BigNumber;
        basePenaltyRate: BigNumber;
        progressivePenaltyMultiplier: BigNumber;
        circuitBreakerCooldown: BigNumber;
        whitelistGracePeriod: BigNumber;
        mlDetectionEnabled: boolean;
      }
    >;

    deactivateCircuitBreaker(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deactivateEmergencyMode(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    detectCoordinatedAttack(
      accounts: string[],
      timeWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { isCoordinated: boolean; riskScore: BigNumber }
    >;

    emergencyMode(overrides?: CallOverrides): Promise<[boolean]>;

    emergencyOperators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    flaggedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getAccountFlags(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { flags: string[] }>;

    getAccountRiskProfile(
      account: string,
      overrides?: CallOverrides
    ): Promise<[AdvancedAntiSpeculationEngine.AccountRiskProfileStructOutput]>;

    getAccountTransactionHistory(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [AdvancedAntiSpeculationEngine.TransactionPatternStructOutput[]]
    >;

    getAntiSpeculationConfig(
      overrides?: CallOverrides
    ): Promise<
      [AdvancedAntiSpeculationEngine.AdvancedAntiSpeculationConfigStructOutput]
    >;

    getMLModelParameters(
      overrides?: CallOverrides
    ): Promise<[AdvancedAntiSpeculationEngine.MLModelParametersStructOutput]>;

    getManipulationConfig(
      overrides?: CallOverrides
    ): Promise<
      [AdvancedAntiSpeculationEngine.MarketManipulationDetectionStructOutput]
    >;

    getNetworkRiskMetrics(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        avgRiskScore: BigNumber;
        totalPenalties: BigNumber;
        totalAnalyzed: BigNumber;
        manipulationDetections: BigNumber;
        circuitBreakerCount: BigNumber;
      }
    >;

    isAccountFlagged(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAccountWhitelisted(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    manipulationConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        suspiciousVolumeThreshold: BigNumber;
        priceManipulationThreshold: BigNumber;
        frontRunningWindow: BigNumber;
        washTradingWindow: BigNumber;
        coordinatedAttackDetection: boolean;
      }
    >;

    manualCircuitBreaker(
      account: string,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    marketManipulationDetections(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mlModel(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        modelThreshold: BigNumber;
        modelAccuracy: BigNumber;
        lastModelUpdate: BigNumber;
        isModelActive: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pairTransactionCounts(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    patternSignatures(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    removeEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAccountFlagged(
      account: string,
      flagged: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setWhitelistStatus(
      account: string,
      whitelisted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    socialGraphRisk(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    temporalRisk(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPenaltiesCollected(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalTransactionsAnalyzed(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateAntiSpeculationConfig(
      newConfig: AdvancedAntiSpeculationEngine.AdvancedAntiSpeculationConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateMLModel(
      newWeights: BigNumberish[],
      newThreshold: BigNumberish,
      newAccuracy: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateManipulationConfig(
      newConfig: AdvancedAntiSpeculationEngine.MarketManipulationDetectionStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    whitelistedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  CIRCUIT_BREAKER_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  HIGH_RISK_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PENALTY_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_RISK_SCORE(overrides?: CallOverrides): Promise<BigNumber>;

  MEDIUM_RISK_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  PATTERN_HISTORY_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  accountRiskProfiles(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      BigNumber
    ] & {
      overallRiskScore: BigNumber;
      frequencyRisk: BigNumber;
      volumeRisk: BigNumber;
      patternRisk: BigNumber;
      marketImpactRisk: BigNumber;
      totalPenaltiesPaid: BigNumber;
      flagCount: BigNumber;
      lastRiskUpdate: BigNumber;
      isCircuitBreakerActive: boolean;
      circuitBreakerUntil: BigNumber;
      consecutiveHighRiskTxCount: BigNumber;
    }
  >;

  accountTransactionHistory(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, string, BigNumber, BigNumber] & {
      timestamp: BigNumber;
      amount: BigNumber;
      transactionType: number;
      counterparty: string;
      priceImpact: BigNumber;
      riskScore: BigNumber;
    }
  >;

  activateEmergencyMode(
    reason: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addEmergencyOperator(
    operator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  analyzeTransactionAdvanced(
    account: string,
    amount: BigNumberish,
    transactionType: BigNumberish,
    counterparty: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  averageNetworkRiskScore(overrides?: CallOverrides): Promise<BigNumber>;

  behavioralRisk(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  circuitBreakerActivations(overrides?: CallOverrides): Promise<BigNumber>;

  config(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      rapidTradeThreshold: BigNumber;
      volumeConcentrationLimit: BigNumber;
      patternDetectionSensitivity: BigNumber;
      basePenaltyRate: BigNumber;
      progressivePenaltyMultiplier: BigNumber;
      circuitBreakerCooldown: BigNumber;
      whitelistGracePeriod: BigNumber;
      mlDetectionEnabled: boolean;
    }
  >;

  deactivateCircuitBreaker(
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deactivateEmergencyMode(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  detectCoordinatedAttack(
    accounts: string[],
    timeWindow: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & { isCoordinated: boolean; riskScore: BigNumber }
  >;

  emergencyMode(overrides?: CallOverrides): Promise<boolean>;

  emergencyOperators(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  flaggedAccounts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  getAccountFlags(
    account: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getAccountRiskProfile(
    account: string,
    overrides?: CallOverrides
  ): Promise<AdvancedAntiSpeculationEngine.AccountRiskProfileStructOutput>;

  getAccountTransactionHistory(
    account: string,
    overrides?: CallOverrides
  ): Promise<AdvancedAntiSpeculationEngine.TransactionPatternStructOutput[]>;

  getAntiSpeculationConfig(
    overrides?: CallOverrides
  ): Promise<AdvancedAntiSpeculationEngine.AdvancedAntiSpeculationConfigStructOutput>;

  getMLModelParameters(
    overrides?: CallOverrides
  ): Promise<AdvancedAntiSpeculationEngine.MLModelParametersStructOutput>;

  getManipulationConfig(
    overrides?: CallOverrides
  ): Promise<AdvancedAntiSpeculationEngine.MarketManipulationDetectionStructOutput>;

  getNetworkRiskMetrics(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      avgRiskScore: BigNumber;
      totalPenalties: BigNumber;
      totalAnalyzed: BigNumber;
      manipulationDetections: BigNumber;
      circuitBreakerCount: BigNumber;
    }
  >;

  isAccountFlagged(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAccountWhitelisted(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  manipulationConfig(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      suspiciousVolumeThreshold: BigNumber;
      priceManipulationThreshold: BigNumber;
      frontRunningWindow: BigNumber;
      washTradingWindow: BigNumber;
      coordinatedAttackDetection: boolean;
    }
  >;

  manualCircuitBreaker(
    account: string,
    duration: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  marketManipulationDetections(overrides?: CallOverrides): Promise<BigNumber>;

  mlModel(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean] & {
      modelThreshold: BigNumber;
      modelAccuracy: BigNumber;
      lastModelUpdate: BigNumber;
      isModelActive: boolean;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  pairTransactionCounts(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  patternSignatures(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  removeEmergencyOperator(
    operator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAccountFlagged(
    account: string,
    flagged: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setWhitelistStatus(
    account: string,
    whitelisted: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  socialGraphRisk(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  temporalRisk(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalPenaltiesCollected(overrides?: CallOverrides): Promise<BigNumber>;

  totalTransactionsAnalyzed(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateAntiSpeculationConfig(
    newConfig: AdvancedAntiSpeculationEngine.AdvancedAntiSpeculationConfigStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateMLModel(
    newWeights: BigNumberish[],
    newThreshold: BigNumberish,
    newAccuracy: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateManipulationConfig(
    newConfig: AdvancedAntiSpeculationEngine.MarketManipulationDetectionStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  whitelistedAccounts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    CIRCUIT_BREAKER_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    HIGH_RISK_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PENALTY_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_RISK_SCORE(overrides?: CallOverrides): Promise<BigNumber>;

    MEDIUM_RISK_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    PATTERN_HISTORY_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    accountRiskProfiles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        overallRiskScore: BigNumber;
        frequencyRisk: BigNumber;
        volumeRisk: BigNumber;
        patternRisk: BigNumber;
        marketImpactRisk: BigNumber;
        totalPenaltiesPaid: BigNumber;
        flagCount: BigNumber;
        lastRiskUpdate: BigNumber;
        isCircuitBreakerActive: boolean;
        circuitBreakerUntil: BigNumber;
        consecutiveHighRiskTxCount: BigNumber;
      }
    >;

    accountTransactionHistory(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, string, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        amount: BigNumber;
        transactionType: number;
        counterparty: string;
        priceImpact: BigNumber;
        riskScore: BigNumber;
      }
    >;

    activateEmergencyMode(
      reason: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addEmergencyOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    analyzeTransactionAdvanced(
      account: string,
      amount: BigNumberish,
      transactionType: BigNumberish,
      counterparty: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string[]] & {
        riskScore: BigNumber;
        penalty: BigNumber;
        flags: string[];
      }
    >;

    averageNetworkRiskScore(overrides?: CallOverrides): Promise<BigNumber>;

    behavioralRisk(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    circuitBreakerActivations(overrides?: CallOverrides): Promise<BigNumber>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        rapidTradeThreshold: BigNumber;
        volumeConcentrationLimit: BigNumber;
        patternDetectionSensitivity: BigNumber;
        basePenaltyRate: BigNumber;
        progressivePenaltyMultiplier: BigNumber;
        circuitBreakerCooldown: BigNumber;
        whitelistGracePeriod: BigNumber;
        mlDetectionEnabled: boolean;
      }
    >;

    deactivateCircuitBreaker(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deactivateEmergencyMode(overrides?: CallOverrides): Promise<void>;

    detectCoordinatedAttack(
      accounts: string[],
      timeWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { isCoordinated: boolean; riskScore: BigNumber }
    >;

    emergencyMode(overrides?: CallOverrides): Promise<boolean>;

    emergencyOperators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    flaggedAccounts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    getAccountFlags(
      account: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getAccountRiskProfile(
      account: string,
      overrides?: CallOverrides
    ): Promise<AdvancedAntiSpeculationEngine.AccountRiskProfileStructOutput>;

    getAccountTransactionHistory(
      account: string,
      overrides?: CallOverrides
    ): Promise<AdvancedAntiSpeculationEngine.TransactionPatternStructOutput[]>;

    getAntiSpeculationConfig(
      overrides?: CallOverrides
    ): Promise<AdvancedAntiSpeculationEngine.AdvancedAntiSpeculationConfigStructOutput>;

    getMLModelParameters(
      overrides?: CallOverrides
    ): Promise<AdvancedAntiSpeculationEngine.MLModelParametersStructOutput>;

    getManipulationConfig(
      overrides?: CallOverrides
    ): Promise<AdvancedAntiSpeculationEngine.MarketManipulationDetectionStructOutput>;

    getNetworkRiskMetrics(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        avgRiskScore: BigNumber;
        totalPenalties: BigNumber;
        totalAnalyzed: BigNumber;
        manipulationDetections: BigNumber;
        circuitBreakerCount: BigNumber;
      }
    >;

    isAccountFlagged(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAccountWhitelisted(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    manipulationConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        suspiciousVolumeThreshold: BigNumber;
        priceManipulationThreshold: BigNumber;
        frontRunningWindow: BigNumber;
        washTradingWindow: BigNumber;
        coordinatedAttackDetection: boolean;
      }
    >;

    manualCircuitBreaker(
      account: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    marketManipulationDetections(overrides?: CallOverrides): Promise<BigNumber>;

    mlModel(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        modelThreshold: BigNumber;
        modelAccuracy: BigNumber;
        lastModelUpdate: BigNumber;
        isModelActive: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pairTransactionCounts(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    patternSignatures(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    removeEmergencyOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAccountFlagged(
      account: string,
      flagged: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistStatus(
      account: string,
      whitelisted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    socialGraphRisk(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    temporalRisk(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalPenaltiesCollected(overrides?: CallOverrides): Promise<BigNumber>;

    totalTransactionsAnalyzed(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateAntiSpeculationConfig(
      newConfig: AdvancedAntiSpeculationEngine.AdvancedAntiSpeculationConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMLModel(
      newWeights: BigNumberish[],
      newThreshold: BigNumberish,
      newAccuracy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateManipulationConfig(
      newConfig: AdvancedAntiSpeculationEngine.MarketManipulationDetectionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "CircuitBreakerActivated(address,uint256)"(
      account?: string | null,
      duration?: null
    ): CircuitBreakerActivatedEventFilter;
    CircuitBreakerActivated(
      account?: string | null,
      duration?: null
    ): CircuitBreakerActivatedEventFilter;

    "ConfigurationUpdated((uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool))"(
      config?: null
    ): ConfigurationUpdatedEventFilter;
    ConfigurationUpdated(config?: null): ConfigurationUpdatedEventFilter;

    "EmergencyModeActivated(address,string)"(
      operator?: null,
      reason?: null
    ): EmergencyModeActivatedEventFilter;
    EmergencyModeActivated(
      operator?: null,
      reason?: null
    ): EmergencyModeActivatedEventFilter;

    "MLModelUpdated(uint256,uint256)"(
      newAccuracy?: null,
      threshold?: null
    ): MLModelUpdatedEventFilter;
    MLModelUpdated(
      newAccuracy?: null,
      threshold?: null
    ): MLModelUpdatedEventFilter;

    "MarketManipulationDetected(address,string)"(
      account?: string | null,
      manipulationType?: null
    ): MarketManipulationDetectedEventFilter;
    MarketManipulationDetected(
      account?: string | null,
      manipulationType?: null
    ): MarketManipulationDetectedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PatternDetected(address,bytes32,uint256)"(
      account?: string | null,
      patternHash?: null,
      riskScore?: null
    ): PatternDetectedEventFilter;
    PatternDetected(
      account?: string | null,
      patternHash?: null,
      riskScore?: null
    ): PatternDetectedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RiskProfileUpdated(address,uint256,uint256)"(
      account?: string | null,
      oldScore?: null,
      newScore?: null
    ): RiskProfileUpdatedEventFilter;
    RiskProfileUpdated(
      account?: string | null,
      oldScore?: null,
      newScore?: null
    ): RiskProfileUpdatedEventFilter;

    "SpeculationPenaltyApplied(address,uint256,string)"(
      account?: string | null,
      penalty?: null,
      reason?: null
    ): SpeculationPenaltyAppliedEventFilter;
    SpeculationPenaltyApplied(
      account?: string | null,
      penalty?: null,
      reason?: null
    ): SpeculationPenaltyAppliedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "WhitelistStatusChanged(address,bool)"(
      account?: string | null,
      isWhitelisted?: null
    ): WhitelistStatusChangedEventFilter;
    WhitelistStatusChanged(
      account?: string | null,
      isWhitelisted?: null
    ): WhitelistStatusChangedEventFilter;
  };

  estimateGas: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    CIRCUIT_BREAKER_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    HIGH_RISK_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PENALTY_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_RISK_SCORE(overrides?: CallOverrides): Promise<BigNumber>;

    MEDIUM_RISK_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    PATTERN_HISTORY_LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    accountRiskProfiles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountTransactionHistory(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activateEmergencyMode(
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    analyzeTransactionAdvanced(
      account: string,
      amount: BigNumberish,
      transactionType: BigNumberish,
      counterparty: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    averageNetworkRiskScore(overrides?: CallOverrides): Promise<BigNumber>;

    behavioralRisk(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    circuitBreakerActivations(overrides?: CallOverrides): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    deactivateCircuitBreaker(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deactivateEmergencyMode(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    detectCoordinatedAttack(
      accounts: string[],
      timeWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyMode(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyOperators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flaggedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountFlags(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountRiskProfile(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountTransactionHistory(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAntiSpeculationConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getMLModelParameters(overrides?: CallOverrides): Promise<BigNumber>;

    getManipulationConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getNetworkRiskMetrics(overrides?: CallOverrides): Promise<BigNumber>;

    isAccountFlagged(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAccountWhitelisted(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manipulationConfig(overrides?: CallOverrides): Promise<BigNumber>;

    manualCircuitBreaker(
      account: string,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    marketManipulationDetections(overrides?: CallOverrides): Promise<BigNumber>;

    mlModel(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pairTransactionCounts(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    patternSignatures(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    removeEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAccountFlagged(
      account: string,
      flagged: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setWhitelistStatus(
      account: string,
      whitelisted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    socialGraphRisk(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    temporalRisk(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalPenaltiesCollected(overrides?: CallOverrides): Promise<BigNumber>;

    totalTransactionsAnalyzed(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    updateAntiSpeculationConfig(
      newConfig: AdvancedAntiSpeculationEngine.AdvancedAntiSpeculationConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateMLModel(
      newWeights: BigNumberish[],
      newThreshold: BigNumberish,
      newAccuracy: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateManipulationConfig(
      newConfig: AdvancedAntiSpeculationEngine.MarketManipulationDetectionStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    whitelistedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CIRCUIT_BREAKER_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    HIGH_RISK_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PENALTY_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_RISK_SCORE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MEDIUM_RISK_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PATTERN_HISTORY_LENGTH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountRiskProfiles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountTransactionHistory(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activateEmergencyMode(
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    analyzeTransactionAdvanced(
      account: string,
      amount: BigNumberish,
      transactionType: BigNumberish,
      counterparty: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    averageNetworkRiskScore(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    behavioralRisk(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    circuitBreakerActivations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deactivateCircuitBreaker(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deactivateEmergencyMode(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    detectCoordinatedAttack(
      accounts: string[],
      timeWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyOperators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flaggedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountFlags(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountRiskProfile(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountTransactionHistory(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAntiSpeculationConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMLModelParameters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getManipulationConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNetworkRiskMetrics(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAccountFlagged(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAccountWhitelisted(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manipulationConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manualCircuitBreaker(
      account: string,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    marketManipulationDetections(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mlModel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairTransactionCounts(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    patternSignatures(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAccountFlagged(
      account: string,
      flagged: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setWhitelistStatus(
      account: string,
      whitelisted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    socialGraphRisk(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    temporalRisk(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPenaltiesCollected(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalTransactionsAnalyzed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateAntiSpeculationConfig(
      newConfig: AdvancedAntiSpeculationEngine.AdvancedAntiSpeculationConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateMLModel(
      newWeights: BigNumberish[],
      newThreshold: BigNumberish,
      newAccuracy: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateManipulationConfig(
      newConfig: AdvancedAntiSpeculationEngine.MarketManipulationDetectionStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    whitelistedAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
