/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace AntiSpeculationEngine {
  export type TransactionHistoryStruct = {
    lastTransactionTime: BigNumberish;
    transactionCount: BigNumberish;
    totalVolume: BigNumberish;
    averageHoldingPeriod: BigNumberish;
    rapidTradeCount: BigNumberish;
    flaggedForSpeculation: boolean;
  };

  export type TransactionHistoryStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    lastTransactionTime: BigNumber;
    transactionCount: BigNumber;
    totalVolume: BigNumber;
    averageHoldingPeriod: BigNumber;
    rapidTradeCount: BigNumber;
    flaggedForSpeculation: boolean;
  };
}

export declare namespace ICaesar {
  export type AntiSpeculationConfigStruct = {
    maxHoldingPeriod: BigNumberish;
    penaltyRate: BigNumberish;
    rapidTradePenalty: BigNumberish;
    minTransactionGap: BigNumberish;
  };

  export type AntiSpeculationConfigStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    maxHoldingPeriod: BigNumber;
    penaltyRate: BigNumber;
    rapidTradePenalty: BigNumber;
    minTransactionGap: BigNumber;
  };
}

export interface AntiSpeculationEngineInterface extends utils.Interface {
  functions: {
    "accountHistory(address)": FunctionFragment;
    "analyzeTransaction(address,uint256,uint8)": FunctionFragment;
    "averageNetworkHoldingPeriod()": FunctionFragment;
    "calculateSpeculationPenalty(address,uint256)": FunctionFragment;
    "config()": FunctionFragment;
    "getAccountHistory(address)": FunctionFragment;
    "getAntiSpeculationConfig()": FunctionFragment;
    "getTotalPenaltiesCollected()": FunctionFragment;
    "holdingPeriods(address,uint256)": FunctionFragment;
    "isAccountFlagged(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseAntiSpeculation()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAntiSpeculationConfig((uint256,uint256,uint256,uint256))": FunctionFragment;
    "setWhitelistStatus(address,bool)": FunctionFragment;
    "speculationThreshold()": FunctionFragment;
    "totalPenaltiesCollected()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unflagAccount(address)": FunctionFragment;
    "updateParticipationScore(address,uint256)": FunctionFragment;
    "whitelistedAddresses(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accountHistory"
      | "analyzeTransaction"
      | "averageNetworkHoldingPeriod"
      | "calculateSpeculationPenalty"
      | "config"
      | "getAccountHistory"
      | "getAntiSpeculationConfig"
      | "getTotalPenaltiesCollected"
      | "holdingPeriods"
      | "isAccountFlagged"
      | "owner"
      | "pauseAntiSpeculation"
      | "renounceOwnership"
      | "setAntiSpeculationConfig"
      | "setWhitelistStatus"
      | "speculationThreshold"
      | "totalPenaltiesCollected"
      | "transferOwnership"
      | "unflagAccount"
      | "updateParticipationScore"
      | "whitelistedAddresses"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accountHistory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "analyzeTransaction",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "averageNetworkHoldingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSpeculationPenalty",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAccountHistory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAntiSpeculationConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPenaltiesCollected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "holdingPeriods",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountFlagged",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseAntiSpeculation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAntiSpeculationConfig",
    values: [ICaesar.AntiSpeculationConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistStatus",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "speculationThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPenaltiesCollected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unflagAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateParticipationScore",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedAddresses",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "analyzeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "averageNetworkHoldingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSpeculationPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAntiSpeculationConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPenaltiesCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "holdingPeriods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountFlagged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseAntiSpeculation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAntiSpeculationConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "speculationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPenaltiesCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unflagAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateParticipationScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedAddresses",
    data: BytesLike
  ): Result;

  events: {
    "AccountFlagged(address,string)": EventFragment;
    "AccountUnflagged(address)": EventFragment;
    "ConfigurationUpdated()": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SpeculationPenaltyApplied(address,uint256,string)": EventFragment;
    "WhitelistUpdated(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountFlagged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccountUnflagged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfigurationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpeculationPenaltyApplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistUpdated"): EventFragment;
}

export interface AccountFlaggedEventObject {
  account: string;
  reason: string;
}
export type AccountFlaggedEvent = TypedEvent<
  [string, string],
  AccountFlaggedEventObject
>;

export type AccountFlaggedEventFilter = TypedEventFilter<AccountFlaggedEvent>;

export interface AccountUnflaggedEventObject {
  account: string;
}
export type AccountUnflaggedEvent = TypedEvent<
  [string],
  AccountUnflaggedEventObject
>;

export type AccountUnflaggedEventFilter =
  TypedEventFilter<AccountUnflaggedEvent>;

export interface ConfigurationUpdatedEventObject {}
export type ConfigurationUpdatedEvent = TypedEvent<
  [],
  ConfigurationUpdatedEventObject
>;

export type ConfigurationUpdatedEventFilter =
  TypedEventFilter<ConfigurationUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SpeculationPenaltyAppliedEventObject {
  account: string;
  penalty: BigNumber;
  reason: string;
}
export type SpeculationPenaltyAppliedEvent = TypedEvent<
  [string, BigNumber, string],
  SpeculationPenaltyAppliedEventObject
>;

export type SpeculationPenaltyAppliedEventFilter =
  TypedEventFilter<SpeculationPenaltyAppliedEvent>;

export interface WhitelistUpdatedEventObject {
  account: string;
  whitelisted: boolean;
}
export type WhitelistUpdatedEvent = TypedEvent<
  [string, boolean],
  WhitelistUpdatedEventObject
>;

export type WhitelistUpdatedEventFilter =
  TypedEventFilter<WhitelistUpdatedEvent>;

export interface AntiSpeculationEngine extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AntiSpeculationEngineInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountHistory(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        lastTransactionTime: BigNumber;
        transactionCount: BigNumber;
        totalVolume: BigNumber;
        averageHoldingPeriod: BigNumber;
        rapidTradeCount: BigNumber;
        flaggedForSpeculation: boolean;
      }
    >;

    analyzeTransaction(
      account: string,
      amount: BigNumberish,
      transactionType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    averageNetworkHoldingPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateSpeculationPenalty(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { penalty: BigNumber }>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        maxHoldingPeriod: BigNumber;
        penaltyRate: BigNumber;
        rapidTradePenalty: BigNumber;
        minTransactionGap: BigNumber;
      }
    >;

    getAccountHistory(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [AntiSpeculationEngine.TransactionHistoryStructOutput] & {
        history: AntiSpeculationEngine.TransactionHistoryStructOutput;
      }
    >;

    getAntiSpeculationConfig(
      overrides?: CallOverrides
    ): Promise<[ICaesar.AntiSpeculationConfigStructOutput]>;

    getTotalPenaltiesCollected(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    holdingPeriods(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isAccountFlagged(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { flagged: boolean }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pauseAntiSpeculation(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAntiSpeculationConfig(
      newConfig: ICaesar.AntiSpeculationConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setWhitelistStatus(
      account: string,
      whitelisted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    speculationThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalPenaltiesCollected(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unflagAccount(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateParticipationScore(
      account: string,
      transactionVolume: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    whitelistedAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  accountHistory(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      lastTransactionTime: BigNumber;
      transactionCount: BigNumber;
      totalVolume: BigNumber;
      averageHoldingPeriod: BigNumber;
      rapidTradeCount: BigNumber;
      flaggedForSpeculation: boolean;
    }
  >;

  analyzeTransaction(
    account: string,
    amount: BigNumberish,
    transactionType: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  averageNetworkHoldingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  calculateSpeculationPenalty(
    account: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  config(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      maxHoldingPeriod: BigNumber;
      penaltyRate: BigNumber;
      rapidTradePenalty: BigNumber;
      minTransactionGap: BigNumber;
    }
  >;

  getAccountHistory(
    account: string,
    overrides?: CallOverrides
  ): Promise<AntiSpeculationEngine.TransactionHistoryStructOutput>;

  getAntiSpeculationConfig(
    overrides?: CallOverrides
  ): Promise<ICaesar.AntiSpeculationConfigStructOutput>;

  getTotalPenaltiesCollected(overrides?: CallOverrides): Promise<BigNumber>;

  holdingPeriods(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isAccountFlagged(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pauseAntiSpeculation(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAntiSpeculationConfig(
    newConfig: ICaesar.AntiSpeculationConfigStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setWhitelistStatus(
    account: string,
    whitelisted: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  speculationThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  totalPenaltiesCollected(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unflagAccount(
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateParticipationScore(
    account: string,
    transactionVolume: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  whitelistedAddresses(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    accountHistory(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        lastTransactionTime: BigNumber;
        transactionCount: BigNumber;
        totalVolume: BigNumber;
        averageHoldingPeriod: BigNumber;
        rapidTradeCount: BigNumber;
        flaggedForSpeculation: boolean;
      }
    >;

    analyzeTransaction(
      account: string,
      amount: BigNumberish,
      transactionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    averageNetworkHoldingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    calculateSpeculationPenalty(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        maxHoldingPeriod: BigNumber;
        penaltyRate: BigNumber;
        rapidTradePenalty: BigNumber;
        minTransactionGap: BigNumber;
      }
    >;

    getAccountHistory(
      account: string,
      overrides?: CallOverrides
    ): Promise<AntiSpeculationEngine.TransactionHistoryStructOutput>;

    getAntiSpeculationConfig(
      overrides?: CallOverrides
    ): Promise<ICaesar.AntiSpeculationConfigStructOutput>;

    getTotalPenaltiesCollected(overrides?: CallOverrides): Promise<BigNumber>;

    holdingPeriods(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAccountFlagged(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseAntiSpeculation(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAntiSpeculationConfig(
      newConfig: ICaesar.AntiSpeculationConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistStatus(
      account: string,
      whitelisted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    speculationThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    totalPenaltiesCollected(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unflagAccount(account: string, overrides?: CallOverrides): Promise<void>;

    updateParticipationScore(
      account: string,
      transactionVolume: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AccountFlagged(address,string)"(
      account?: string | null,
      reason?: null
    ): AccountFlaggedEventFilter;
    AccountFlagged(
      account?: string | null,
      reason?: null
    ): AccountFlaggedEventFilter;

    "AccountUnflagged(address)"(
      account?: string | null
    ): AccountUnflaggedEventFilter;
    AccountUnflagged(account?: string | null): AccountUnflaggedEventFilter;

    "ConfigurationUpdated()"(): ConfigurationUpdatedEventFilter;
    ConfigurationUpdated(): ConfigurationUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SpeculationPenaltyApplied(address,uint256,string)"(
      account?: string | null,
      penalty?: null,
      reason?: null
    ): SpeculationPenaltyAppliedEventFilter;
    SpeculationPenaltyApplied(
      account?: string | null,
      penalty?: null,
      reason?: null
    ): SpeculationPenaltyAppliedEventFilter;

    "WhitelistUpdated(address,bool)"(
      account?: string | null,
      whitelisted?: null
    ): WhitelistUpdatedEventFilter;
    WhitelistUpdated(
      account?: string | null,
      whitelisted?: null
    ): WhitelistUpdatedEventFilter;
  };

  estimateGas: {
    accountHistory(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    analyzeTransaction(
      account: string,
      amount: BigNumberish,
      transactionType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    averageNetworkHoldingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    calculateSpeculationPenalty(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountHistory(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAntiSpeculationConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPenaltiesCollected(overrides?: CallOverrides): Promise<BigNumber>;

    holdingPeriods(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAccountFlagged(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pauseAntiSpeculation(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAntiSpeculationConfig(
      newConfig: ICaesar.AntiSpeculationConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setWhitelistStatus(
      account: string,
      whitelisted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    speculationThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    totalPenaltiesCollected(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unflagAccount(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateParticipationScore(
      account: string,
      transactionVolume: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    whitelistedAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountHistory(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    analyzeTransaction(
      account: string,
      amount: BigNumberish,
      transactionType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    averageNetworkHoldingPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSpeculationPenalty(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccountHistory(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAntiSpeculationConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPenaltiesCollected(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    holdingPeriods(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAccountFlagged(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseAntiSpeculation(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAntiSpeculationConfig(
      newConfig: ICaesar.AntiSpeculationConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setWhitelistStatus(
      account: string,
      whitelisted: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    speculationThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPenaltiesCollected(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unflagAccount(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateParticipationScore(
      account: string,
      transactionVolume: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    whitelistedAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
