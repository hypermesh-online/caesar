/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace ICaesar {
  export type DemurrageConfigStruct = {
    baseRate: BigNumberish;
    maxRate: BigNumberish;
    decayInterval: BigNumberish;
    stabilityThreshold: BigNumberish;
  };

  export type DemurrageConfigStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    baseRate: BigNumber;
    maxRate: BigNumber;
    decayInterval: BigNumber;
    stabilityThreshold: BigNumber;
  };
}

export interface DemurrageManagerInterface extends utils.Interface {
  functions: {
    "applyDemurrage(address,uint256,uint256)": FunctionFragment;
    "calculateDemurrage(address,uint256,uint256)": FunctionFragment;
    "config()": FunctionFragment;
    "currentStabilityIndex()": FunctionFragment;
    "exemptAccounts(address)": FunctionFragment;
    "getCurrentDecayRate()": FunctionFragment;
    "getDemurrageConfig()": FunctionFragment;
    "getTotalDemurrageCollected()": FunctionFragment;
    "goldEconomicData()": FunctionFragment;
    "goldOracle()": FunctionFragment;
    "isStabilityConditionMet()": FunctionFragment;
    "lastDemurrageApplication(address)": FunctionFragment;
    "lastPriceUpdate()": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseDemurrage()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAccountExemption(address,bool)": FunctionFragment;
    "setDemurrageConfig((uint256,uint256,uint256,uint256))": FunctionFragment;
    "totalDemurrageCollected()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateStabilityIndex(uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "applyDemurrage"
      | "calculateDemurrage"
      | "config"
      | "currentStabilityIndex"
      | "exemptAccounts"
      | "getCurrentDecayRate"
      | "getDemurrageConfig"
      | "getTotalDemurrageCollected"
      | "goldEconomicData"
      | "goldOracle"
      | "isStabilityConditionMet"
      | "lastDemurrageApplication"
      | "lastPriceUpdate"
      | "owner"
      | "pauseDemurrage"
      | "paused"
      | "renounceOwnership"
      | "setAccountExemption"
      | "setDemurrageConfig"
      | "totalDemurrageCollected"
      | "transferOwnership"
      | "updateStabilityIndex"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "applyDemurrage",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateDemurrage",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentStabilityIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exemptAccounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentDecayRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDemurrageConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDemurrageCollected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "goldEconomicData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "goldOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isStabilityConditionMet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastDemurrageApplication",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastPriceUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseDemurrage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountExemption",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDemurrageConfig",
    values: [ICaesar.DemurrageConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDemurrageCollected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStabilityIndex",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "applyDemurrage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateDemurrage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentStabilityIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exemptAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDecayRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDemurrageConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDemurrageCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "goldEconomicData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "goldOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isStabilityConditionMet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastDemurrageApplication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPriceUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseDemurrage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccountExemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDemurrageConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDemurrageCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStabilityIndex",
    data: BytesLike
  ): Result;

  events: {
    "AccountExemptionSet(address,bool)": EventFragment;
    "DemurrageApplied(address,uint256)": EventFragment;
    "DemurrageConfigUpdated(uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "StabilityIndexUpdated(uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountExemptionSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DemurrageApplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DemurrageConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StabilityIndexUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface AccountExemptionSetEventObject {
  account: string;
  exempt: boolean;
}
export type AccountExemptionSetEvent = TypedEvent<
  [string, boolean],
  AccountExemptionSetEventObject
>;

export type AccountExemptionSetEventFilter =
  TypedEventFilter<AccountExemptionSetEvent>;

export interface DemurrageAppliedEventObject {
  account: string;
  amount: BigNumber;
}
export type DemurrageAppliedEvent = TypedEvent<
  [string, BigNumber],
  DemurrageAppliedEventObject
>;

export type DemurrageAppliedEventFilter =
  TypedEventFilter<DemurrageAppliedEvent>;

export interface DemurrageConfigUpdatedEventObject {
  baseRate: BigNumber;
  maxRate: BigNumber;
  decayInterval: BigNumber;
  stabilityThreshold: BigNumber;
}
export type DemurrageConfigUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  DemurrageConfigUpdatedEventObject
>;

export type DemurrageConfigUpdatedEventFilter =
  TypedEventFilter<DemurrageConfigUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface StabilityIndexUpdatedEventObject {
  index: BigNumber;
}
export type StabilityIndexUpdatedEvent = TypedEvent<
  [BigNumber],
  StabilityIndexUpdatedEventObject
>;

export type StabilityIndexUpdatedEventFilter =
  TypedEventFilter<StabilityIndexUpdatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface DemurrageManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DemurrageManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    applyDemurrage(
      account: string,
      balance: BigNumberish,
      lastActivity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    calculateDemurrage(
      account: string,
      balance: BigNumberish,
      lastActivity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { demurrageAmount: BigNumber }>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        baseRate: BigNumber;
        maxRate: BigNumber;
        decayInterval: BigNumber;
        stabilityThreshold: BigNumber;
      }
    >;

    currentStabilityIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    exemptAccounts(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    getCurrentDecayRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { effectiveRate: BigNumber }>;

    getDemurrageConfig(
      overrides?: CallOverrides
    ): Promise<[ICaesar.DemurrageConfigStructOutput]>;

    getTotalDemurrageCollected(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    goldEconomicData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        lastGoldUpdate: BigNumber;
        lastDeviationScore: BigNumber;
        adaptiveRateMultiplier: BigNumber;
        convergenceTarget: BigNumber;
        emergencyMode: boolean;
      }
    >;

    goldOracle(overrides?: CallOverrides): Promise<[string]>;

    isStabilityConditionMet(
      overrides?: CallOverrides
    ): Promise<[boolean] & { isStable: boolean }>;

    lastDemurrageApplication(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastPriceUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pauseDemurrage(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAccountExemption(
      account: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDemurrageConfig(
      newConfig: ICaesar.DemurrageConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    totalDemurrageCollected(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateStabilityIndex(
      currentPrice: BigNumberish,
      activeParticipants: BigNumberish,
      totalHolders: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  applyDemurrage(
    account: string,
    balance: BigNumberish,
    lastActivity: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  calculateDemurrage(
    account: string,
    balance: BigNumberish,
    lastActivity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  config(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      baseRate: BigNumber;
      maxRate: BigNumber;
      decayInterval: BigNumber;
      stabilityThreshold: BigNumber;
    }
  >;

  currentStabilityIndex(overrides?: CallOverrides): Promise<BigNumber>;

  exemptAccounts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  getCurrentDecayRate(overrides?: CallOverrides): Promise<BigNumber>;

  getDemurrageConfig(
    overrides?: CallOverrides
  ): Promise<ICaesar.DemurrageConfigStructOutput>;

  getTotalDemurrageCollected(overrides?: CallOverrides): Promise<BigNumber>;

  goldEconomicData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      lastGoldUpdate: BigNumber;
      lastDeviationScore: BigNumber;
      adaptiveRateMultiplier: BigNumber;
      convergenceTarget: BigNumber;
      emergencyMode: boolean;
    }
  >;

  goldOracle(overrides?: CallOverrides): Promise<string>;

  isStabilityConditionMet(overrides?: CallOverrides): Promise<boolean>;

  lastDemurrageApplication(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastPriceUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pauseDemurrage(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAccountExemption(
    account: string,
    exempt: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDemurrageConfig(
    newConfig: ICaesar.DemurrageConfigStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  totalDemurrageCollected(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateStabilityIndex(
    currentPrice: BigNumberish,
    activeParticipants: BigNumberish,
    totalHolders: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    applyDemurrage(
      account: string,
      balance: BigNumberish,
      lastActivity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateDemurrage(
      account: string,
      balance: BigNumberish,
      lastActivity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        baseRate: BigNumber;
        maxRate: BigNumber;
        decayInterval: BigNumber;
        stabilityThreshold: BigNumber;
      }
    >;

    currentStabilityIndex(overrides?: CallOverrides): Promise<BigNumber>;

    exemptAccounts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    getCurrentDecayRate(overrides?: CallOverrides): Promise<BigNumber>;

    getDemurrageConfig(
      overrides?: CallOverrides
    ): Promise<ICaesar.DemurrageConfigStructOutput>;

    getTotalDemurrageCollected(overrides?: CallOverrides): Promise<BigNumber>;

    goldEconomicData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        lastGoldUpdate: BigNumber;
        lastDeviationScore: BigNumber;
        adaptiveRateMultiplier: BigNumber;
        convergenceTarget: BigNumber;
        emergencyMode: boolean;
      }
    >;

    goldOracle(overrides?: CallOverrides): Promise<string>;

    isStabilityConditionMet(overrides?: CallOverrides): Promise<boolean>;

    lastDemurrageApplication(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastPriceUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseDemurrage(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAccountExemption(
      account: string,
      exempt: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDemurrageConfig(
      newConfig: ICaesar.DemurrageConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    totalDemurrageCollected(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStabilityIndex(
      currentPrice: BigNumberish,
      activeParticipants: BigNumberish,
      totalHolders: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccountExemptionSet(address,bool)"(
      account?: string | null,
      exempt?: null
    ): AccountExemptionSetEventFilter;
    AccountExemptionSet(
      account?: string | null,
      exempt?: null
    ): AccountExemptionSetEventFilter;

    "DemurrageApplied(address,uint256)"(
      account?: string | null,
      amount?: null
    ): DemurrageAppliedEventFilter;
    DemurrageApplied(
      account?: string | null,
      amount?: null
    ): DemurrageAppliedEventFilter;

    "DemurrageConfigUpdated(uint256,uint256,uint256,uint256)"(
      baseRate?: null,
      maxRate?: null,
      decayInterval?: null,
      stabilityThreshold?: null
    ): DemurrageConfigUpdatedEventFilter;
    DemurrageConfigUpdated(
      baseRate?: null,
      maxRate?: null,
      decayInterval?: null,
      stabilityThreshold?: null
    ): DemurrageConfigUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "StabilityIndexUpdated(uint256)"(
      index?: null
    ): StabilityIndexUpdatedEventFilter;
    StabilityIndexUpdated(index?: null): StabilityIndexUpdatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    applyDemurrage(
      account: string,
      balance: BigNumberish,
      lastActivity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    calculateDemurrage(
      account: string,
      balance: BigNumberish,
      lastActivity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    currentStabilityIndex(overrides?: CallOverrides): Promise<BigNumber>;

    exemptAccounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentDecayRate(overrides?: CallOverrides): Promise<BigNumber>;

    getDemurrageConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDemurrageCollected(overrides?: CallOverrides): Promise<BigNumber>;

    goldEconomicData(overrides?: CallOverrides): Promise<BigNumber>;

    goldOracle(overrides?: CallOverrides): Promise<BigNumber>;

    isStabilityConditionMet(overrides?: CallOverrides): Promise<BigNumber>;

    lastDemurrageApplication(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastPriceUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pauseDemurrage(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAccountExemption(
      account: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDemurrageConfig(
      newConfig: ICaesar.DemurrageConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    totalDemurrageCollected(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateStabilityIndex(
      currentPrice: BigNumberish,
      activeParticipants: BigNumberish,
      totalHolders: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    applyDemurrage(
      account: string,
      balance: BigNumberish,
      lastActivity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    calculateDemurrage(
      account: string,
      balance: BigNumberish,
      lastActivity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentStabilityIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exemptAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentDecayRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDemurrageConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDemurrageCollected(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    goldEconomicData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    goldOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isStabilityConditionMet(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastDemurrageApplication(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastPriceUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseDemurrage(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAccountExemption(
      account: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDemurrageConfig(
      newConfig: ICaesar.DemurrageConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    totalDemurrageCollected(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateStabilityIndex(
      currentPrice: BigNumberish,
      activeParticipants: BigNumberish,
      totalHolders: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
