/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace GoldPriceOracle {
  export type StatisticalMetricsStruct = {
    rollingAverage: BigNumberish;
    standardDeviation: BigNumberish;
    upperBand: BigNumberish;
    lowerBand: BigNumberish;
    volatility: BigNumberish;
    lastCalculation: BigNumberish;
  };

  export type StatisticalMetricsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    rollingAverage: BigNumber;
    standardDeviation: BigNumber;
    upperBand: BigNumber;
    lowerBand: BigNumber;
    volatility: BigNumber;
    lastCalculation: BigNumber;
  };

  export type MarketConditionsStruct = {
    volatilityIndex: BigNumberish;
    confidenceScore: BigNumberish;
    trendDirection: BigNumberish;
    marketStress: BigNumberish;
  };

  export type MarketConditionsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    volatilityIndex: BigNumber;
    confidenceScore: BigNumber;
    trendDirection: BigNumber;
    marketStress: BigNumber;
  };

  export type PriceDataStruct = {
    price: BigNumberish;
    timestamp: BigNumberish;
    confidence: BigNumberish;
    sourceCount: BigNumberish;
  };

  export type PriceDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ] & {
    price: BigNumber;
    timestamp: BigNumber;
    confidence: BigNumber;
    sourceCount: number;
  };
}

export interface GoldPriceOracleInterface extends utils.Interface {
  functions: {
    "BASIS_POINTS()": FunctionFragment;
    "DEFAULT_WINDOW_SIZE()": FunctionFragment;
    "GRAMS_PER_OUNCE()": FunctionFragment;
    "MAX_DEVIATION_MULTIPLIER()": FunctionFragment;
    "MAX_PRICE_SOURCES()": FunctionFragment;
    "MIN_DEVIATION_MULTIPLIER()": FunctionFragment;
    "MIN_PRICE_SOURCES()": FunctionFragment;
    "PRECISION()": FunctionFragment;
    "activateEmergencyMode(uint256,string)": FunctionFragment;
    "addPriceSource(address,string,uint256)": FunctionFragment;
    "authorizedUpdaters(address)": FunctionFragment;
    "calculateDeviationScore(uint256)": FunctionFragment;
    "currentMetrics()": FunctionFragment;
    "deactivateEmergencyMode()": FunctionFragment;
    "deviationMultiplier()": FunctionFragment;
    "emergencyMode()": FunctionFragment;
    "emergencyPrice()": FunctionFragment;
    "getCurrentGoldPrice()": FunctionFragment;
    "getCurrentMetrics()": FunctionFragment;
    "getMarketConditions()": FunctionFragment;
    "getPriceHistory(uint256,uint256)": FunctionFragment;
    "getPriceHistoryLength()": FunctionFragment;
    "getPriceSourcesCount()": FunctionFragment;
    "getStatisticalBands()": FunctionFragment;
    "historicalPrices(uint256)": FunctionFragment;
    "isHealthy()": FunctionFragment;
    "lastEmergencyUpdate()": FunctionFragment;
    "marketConditions()": FunctionFragment;
    "maxPriceAge()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "priceHistory(uint256)": FunctionFragment;
    "priceSources(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAuthorizedUpdater(address,bool)": FunctionFragment;
    "sourceIndex(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateConfiguration(uint256,uint256,uint256,uint256)": FunctionFragment;
    "updateFrequency()": FunctionFragment;
    "updatePrice(uint256,uint256)": FunctionFragment;
    "updatePriceMultiSource(uint256[],uint256[],uint256[])": FunctionFragment;
    "updatePriceSource(address,uint256,bool)": FunctionFragment;
    "windowSize()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASIS_POINTS"
      | "DEFAULT_WINDOW_SIZE"
      | "GRAMS_PER_OUNCE"
      | "MAX_DEVIATION_MULTIPLIER"
      | "MAX_PRICE_SOURCES"
      | "MIN_DEVIATION_MULTIPLIER"
      | "MIN_PRICE_SOURCES"
      | "PRECISION"
      | "activateEmergencyMode"
      | "addPriceSource"
      | "authorizedUpdaters"
      | "calculateDeviationScore"
      | "currentMetrics"
      | "deactivateEmergencyMode"
      | "deviationMultiplier"
      | "emergencyMode"
      | "emergencyPrice"
      | "getCurrentGoldPrice"
      | "getCurrentMetrics"
      | "getMarketConditions"
      | "getPriceHistory"
      | "getPriceHistoryLength"
      | "getPriceSourcesCount"
      | "getStatisticalBands"
      | "historicalPrices"
      | "isHealthy"
      | "lastEmergencyUpdate"
      | "marketConditions"
      | "maxPriceAge"
      | "owner"
      | "paused"
      | "priceHistory"
      | "priceSources"
      | "renounceOwnership"
      | "setAuthorizedUpdater"
      | "sourceIndex"
      | "transferOwnership"
      | "updateConfiguration"
      | "updateFrequency"
      | "updatePrice"
      | "updatePriceMultiSource"
      | "updatePriceSource"
      | "windowSize"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_WINDOW_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GRAMS_PER_OUNCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_DEVIATION_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PRICE_SOURCES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_DEVIATION_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_PRICE_SOURCES",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activateEmergencyMode",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addPriceSource",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedUpdaters",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateDeviationScore",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateEmergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deviationMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentGoldPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketConditions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceHistory",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceHistoryLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceSourcesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStatisticalBands",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "historicalPrices",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isHealthy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastEmergencyUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketConditions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxPriceAge",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priceSources",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedUpdater",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "sourceIndex", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfiguration",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFrequency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceMultiSource",
    values: [BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceSource",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "windowSize",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_WINDOW_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GRAMS_PER_OUNCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_DEVIATION_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PRICE_SOURCES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_DEVIATION_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PRICE_SOURCES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activateEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPriceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedUpdaters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateDeviationScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deviationMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentGoldPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceHistoryLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceSourcesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStatisticalBands",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "historicalPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isHealthy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastEmergencyUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPriceAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceSources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sourceIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFrequency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceMultiSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "windowSize", data: BytesLike): Result;

  events: {
    "EmergencyModeActivated(uint256,uint256,string)": EventFragment;
    "MarketConditionsUpdated(uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PriceSourceAdded(address,string,uint256)": EventFragment;
    "PriceSourceUpdated(address,uint256,bool)": EventFragment;
    "PriceUpdated(uint256,uint256,uint256,uint32)": EventFragment;
    "StatisticalMetricsUpdated(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EmergencyModeActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketConditionsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceSourceAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceSourceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StatisticalMetricsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface EmergencyModeActivatedEventObject {
  timestamp: BigNumber;
  emergencyPrice: BigNumber;
  reason: string;
}
export type EmergencyModeActivatedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  EmergencyModeActivatedEventObject
>;

export type EmergencyModeActivatedEventFilter =
  TypedEventFilter<EmergencyModeActivatedEvent>;

export interface MarketConditionsUpdatedEventObject {
  volatilityIndex: BigNumber;
  confidenceScore: BigNumber;
  trendDirection: BigNumber;
  marketStress: BigNumber;
}
export type MarketConditionsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  MarketConditionsUpdatedEventObject
>;

export type MarketConditionsUpdatedEventFilter =
  TypedEventFilter<MarketConditionsUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PriceSourceAddedEventObject {
  oracle: string;
  name: string;
  weight: BigNumber;
}
export type PriceSourceAddedEvent = TypedEvent<
  [string, string, BigNumber],
  PriceSourceAddedEventObject
>;

export type PriceSourceAddedEventFilter =
  TypedEventFilter<PriceSourceAddedEvent>;

export interface PriceSourceUpdatedEventObject {
  oracle: string;
  newWeight: BigNumber;
  isActive: boolean;
}
export type PriceSourceUpdatedEvent = TypedEvent<
  [string, BigNumber, boolean],
  PriceSourceUpdatedEventObject
>;

export type PriceSourceUpdatedEventFilter =
  TypedEventFilter<PriceSourceUpdatedEvent>;

export interface PriceUpdatedEventObject {
  timestamp: BigNumber;
  price: BigNumber;
  confidence: BigNumber;
  sourceCount: number;
}
export type PriceUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, number],
  PriceUpdatedEventObject
>;

export type PriceUpdatedEventFilter = TypedEventFilter<PriceUpdatedEvent>;

export interface StatisticalMetricsUpdatedEventObject {
  timestamp: BigNumber;
  rollingAverage: BigNumber;
  standardDeviation: BigNumber;
  upperBand: BigNumber;
  lowerBand: BigNumber;
}
export type StatisticalMetricsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  StatisticalMetricsUpdatedEventObject
>;

export type StatisticalMetricsUpdatedEventFilter =
  TypedEventFilter<StatisticalMetricsUpdatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface GoldPriceOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GoldPriceOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_WINDOW_SIZE(overrides?: CallOverrides): Promise<[BigNumber]>;

    GRAMS_PER_OUNCE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_DEVIATION_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PRICE_SOURCES(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_DEVIATION_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_PRICE_SOURCES(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    activateEmergencyMode(
      price: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addPriceSource(
      oracle: string,
      name: string,
      weight: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    authorizedUpdaters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    calculateDeviationScore(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { deviationScore: BigNumber }>;

    currentMetrics(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rollingAverage: BigNumber;
        standardDeviation: BigNumber;
        upperBand: BigNumber;
        lowerBand: BigNumber;
        volatility: BigNumber;
        lastCalculation: BigNumber;
      }
    >;

    deactivateEmergencyMode(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deviationMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyMode(overrides?: CallOverrides): Promise<[boolean]>;

    emergencyPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentGoldPrice(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        confidence: BigNumber;
        timestamp: BigNumber;
      }
    >;

    getCurrentMetrics(
      overrides?: CallOverrides
    ): Promise<[GoldPriceOracle.StatisticalMetricsStructOutput]>;

    getMarketConditions(
      overrides?: CallOverrides
    ): Promise<[GoldPriceOracle.MarketConditionsStructOutput]>;

    getPriceHistory(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[GoldPriceOracle.PriceDataStructOutput[]]>;

    getPriceHistoryLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPriceSourcesCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStatisticalBands(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        average: BigNumber;
        stdDev: BigNumber;
        upperBand: BigNumber;
        lowerBand: BigNumber;
        multiplier: BigNumber;
      }
    >;

    historicalPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number] & {
        price: BigNumber;
        timestamp: BigNumber;
        confidence: BigNumber;
        sourceCount: number;
      }
    >;

    isHealthy(overrides?: CallOverrides): Promise<[boolean]>;

    lastEmergencyUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    marketConditions(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        volatilityIndex: BigNumber;
        confidenceScore: BigNumber;
        trendDirection: BigNumber;
        marketStress: BigNumber;
      }
    >;

    maxPriceAge(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    priceHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number] & {
        price: BigNumber;
        timestamp: BigNumber;
        confidence: BigNumber;
        sourceCount: number;
      }
    >;

    priceSources(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        name: string;
        oracle: string;
        weight: BigNumber;
        lastPrice: BigNumber;
        lastUpdate: BigNumber;
        isActive: boolean;
        errorCount: BigNumber;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAuthorizedUpdater(
      updater: string,
      authorized: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sourceIndex(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateConfiguration(
      _windowSize: BigNumberish,
      _deviationMultiplier: BigNumberish,
      _updateFrequency: BigNumberish,
      _maxPriceAge: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateFrequency(overrides?: CallOverrides): Promise<[BigNumber]>;

    updatePrice(
      pricePerGram: BigNumberish,
      confidence: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePriceMultiSource(
      prices: BigNumberish[],
      confidences: BigNumberish[],
      sourceIndices: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePriceSource(
      oracle: string,
      weight: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    windowSize(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_WINDOW_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

  GRAMS_PER_OUNCE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_DEVIATION_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PRICE_SOURCES(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_DEVIATION_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_PRICE_SOURCES(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  activateEmergencyMode(
    price: BigNumberish,
    reason: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addPriceSource(
    oracle: string,
    name: string,
    weight: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  authorizedUpdaters(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  calculateDeviationScore(
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentMetrics(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      rollingAverage: BigNumber;
      standardDeviation: BigNumber;
      upperBand: BigNumber;
      lowerBand: BigNumber;
      volatility: BigNumber;
      lastCalculation: BigNumber;
    }
  >;

  deactivateEmergencyMode(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deviationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyMode(overrides?: CallOverrides): Promise<boolean>;

  emergencyPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentGoldPrice(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      price: BigNumber;
      confidence: BigNumber;
      timestamp: BigNumber;
    }
  >;

  getCurrentMetrics(
    overrides?: CallOverrides
  ): Promise<GoldPriceOracle.StatisticalMetricsStructOutput>;

  getMarketConditions(
    overrides?: CallOverrides
  ): Promise<GoldPriceOracle.MarketConditionsStructOutput>;

  getPriceHistory(
    start: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<GoldPriceOracle.PriceDataStructOutput[]>;

  getPriceHistoryLength(overrides?: CallOverrides): Promise<BigNumber>;

  getPriceSourcesCount(overrides?: CallOverrides): Promise<BigNumber>;

  getStatisticalBands(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      average: BigNumber;
      stdDev: BigNumber;
      upperBand: BigNumber;
      lowerBand: BigNumber;
      multiplier: BigNumber;
    }
  >;

  historicalPrices(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number] & {
      price: BigNumber;
      timestamp: BigNumber;
      confidence: BigNumber;
      sourceCount: number;
    }
  >;

  isHealthy(overrides?: CallOverrides): Promise<boolean>;

  lastEmergencyUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  marketConditions(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      volatilityIndex: BigNumber;
      confidenceScore: BigNumber;
      trendDirection: BigNumber;
      marketStress: BigNumber;
    }
  >;

  maxPriceAge(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  priceHistory(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number] & {
      price: BigNumber;
      timestamp: BigNumber;
      confidence: BigNumber;
      sourceCount: number;
    }
  >;

  priceSources(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
      name: string;
      oracle: string;
      weight: BigNumber;
      lastPrice: BigNumber;
      lastUpdate: BigNumber;
      isActive: boolean;
      errorCount: BigNumber;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAuthorizedUpdater(
    updater: string,
    authorized: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sourceIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateConfiguration(
    _windowSize: BigNumberish,
    _deviationMultiplier: BigNumberish,
    _updateFrequency: BigNumberish,
    _maxPriceAge: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateFrequency(overrides?: CallOverrides): Promise<BigNumber>;

  updatePrice(
    pricePerGram: BigNumberish,
    confidence: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePriceMultiSource(
    prices: BigNumberish[],
    confidences: BigNumberish[],
    sourceIndices: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePriceSource(
    oracle: string,
    weight: BigNumberish,
    isActive: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  windowSize(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_WINDOW_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    GRAMS_PER_OUNCE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DEVIATION_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PRICE_SOURCES(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DEVIATION_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_PRICE_SOURCES(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    activateEmergencyMode(
      price: BigNumberish,
      reason: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addPriceSource(
      oracle: string,
      name: string,
      weight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizedUpdaters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    calculateDeviationScore(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentMetrics(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        rollingAverage: BigNumber;
        standardDeviation: BigNumber;
        upperBand: BigNumber;
        lowerBand: BigNumber;
        volatility: BigNumber;
        lastCalculation: BigNumber;
      }
    >;

    deactivateEmergencyMode(overrides?: CallOverrides): Promise<void>;

    deviationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyMode(overrides?: CallOverrides): Promise<boolean>;

    emergencyPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentGoldPrice(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        confidence: BigNumber;
        timestamp: BigNumber;
      }
    >;

    getCurrentMetrics(
      overrides?: CallOverrides
    ): Promise<GoldPriceOracle.StatisticalMetricsStructOutput>;

    getMarketConditions(
      overrides?: CallOverrides
    ): Promise<GoldPriceOracle.MarketConditionsStructOutput>;

    getPriceHistory(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<GoldPriceOracle.PriceDataStructOutput[]>;

    getPriceHistoryLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceSourcesCount(overrides?: CallOverrides): Promise<BigNumber>;

    getStatisticalBands(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        average: BigNumber;
        stdDev: BigNumber;
        upperBand: BigNumber;
        lowerBand: BigNumber;
        multiplier: BigNumber;
      }
    >;

    historicalPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number] & {
        price: BigNumber;
        timestamp: BigNumber;
        confidence: BigNumber;
        sourceCount: number;
      }
    >;

    isHealthy(overrides?: CallOverrides): Promise<boolean>;

    lastEmergencyUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    marketConditions(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        volatilityIndex: BigNumber;
        confidenceScore: BigNumber;
        trendDirection: BigNumber;
        marketStress: BigNumber;
      }
    >;

    maxPriceAge(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    priceHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number] & {
        price: BigNumber;
        timestamp: BigNumber;
        confidence: BigNumber;
        sourceCount: number;
      }
    >;

    priceSources(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        name: string;
        oracle: string;
        weight: BigNumber;
        lastPrice: BigNumber;
        lastUpdate: BigNumber;
        isActive: boolean;
        errorCount: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAuthorizedUpdater(
      updater: string,
      authorized: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    sourceIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateConfiguration(
      _windowSize: BigNumberish,
      _deviationMultiplier: BigNumberish,
      _updateFrequency: BigNumberish,
      _maxPriceAge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFrequency(overrides?: CallOverrides): Promise<BigNumber>;

    updatePrice(
      pricePerGram: BigNumberish,
      confidence: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePriceMultiSource(
      prices: BigNumberish[],
      confidences: BigNumberish[],
      sourceIndices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updatePriceSource(
      oracle: string,
      weight: BigNumberish,
      isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    windowSize(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "EmergencyModeActivated(uint256,uint256,string)"(
      timestamp?: null,
      emergencyPrice?: null,
      reason?: null
    ): EmergencyModeActivatedEventFilter;
    EmergencyModeActivated(
      timestamp?: null,
      emergencyPrice?: null,
      reason?: null
    ): EmergencyModeActivatedEventFilter;

    "MarketConditionsUpdated(uint256,uint256,uint256,uint256)"(
      volatilityIndex?: null,
      confidenceScore?: null,
      trendDirection?: null,
      marketStress?: null
    ): MarketConditionsUpdatedEventFilter;
    MarketConditionsUpdated(
      volatilityIndex?: null,
      confidenceScore?: null,
      trendDirection?: null,
      marketStress?: null
    ): MarketConditionsUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PriceSourceAdded(address,string,uint256)"(
      oracle?: string | null,
      name?: null,
      weight?: null
    ): PriceSourceAddedEventFilter;
    PriceSourceAdded(
      oracle?: string | null,
      name?: null,
      weight?: null
    ): PriceSourceAddedEventFilter;

    "PriceSourceUpdated(address,uint256,bool)"(
      oracle?: string | null,
      newWeight?: null,
      isActive?: null
    ): PriceSourceUpdatedEventFilter;
    PriceSourceUpdated(
      oracle?: string | null,
      newWeight?: null,
      isActive?: null
    ): PriceSourceUpdatedEventFilter;

    "PriceUpdated(uint256,uint256,uint256,uint32)"(
      timestamp?: BigNumberish | null,
      price?: null,
      confidence?: null,
      sourceCount?: null
    ): PriceUpdatedEventFilter;
    PriceUpdated(
      timestamp?: BigNumberish | null,
      price?: null,
      confidence?: null,
      sourceCount?: null
    ): PriceUpdatedEventFilter;

    "StatisticalMetricsUpdated(uint256,uint256,uint256,uint256,uint256)"(
      timestamp?: BigNumberish | null,
      rollingAverage?: null,
      standardDeviation?: null,
      upperBand?: null,
      lowerBand?: null
    ): StatisticalMetricsUpdatedEventFilter;
    StatisticalMetricsUpdated(
      timestamp?: BigNumberish | null,
      rollingAverage?: null,
      standardDeviation?: null,
      upperBand?: null,
      lowerBand?: null
    ): StatisticalMetricsUpdatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_WINDOW_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    GRAMS_PER_OUNCE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DEVIATION_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PRICE_SOURCES(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DEVIATION_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_PRICE_SOURCES(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    activateEmergencyMode(
      price: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addPriceSource(
      oracle: string,
      name: string,
      weight: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    authorizedUpdaters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateDeviationScore(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentMetrics(overrides?: CallOverrides): Promise<BigNumber>;

    deactivateEmergencyMode(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deviationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyMode(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentGoldPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentMetrics(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketConditions(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceHistory(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceHistoryLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceSourcesCount(overrides?: CallOverrides): Promise<BigNumber>;

    getStatisticalBands(overrides?: CallOverrides): Promise<BigNumber>;

    historicalPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isHealthy(overrides?: CallOverrides): Promise<BigNumber>;

    lastEmergencyUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    marketConditions(overrides?: CallOverrides): Promise<BigNumber>;

    maxPriceAge(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    priceHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceSources(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAuthorizedUpdater(
      updater: string,
      authorized: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sourceIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateConfiguration(
      _windowSize: BigNumberish,
      _deviationMultiplier: BigNumberish,
      _updateFrequency: BigNumberish,
      _maxPriceAge: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateFrequency(overrides?: CallOverrides): Promise<BigNumber>;

    updatePrice(
      pricePerGram: BigNumberish,
      confidence: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePriceMultiSource(
      prices: BigNumberish[],
      confidences: BigNumberish[],
      sourceIndices: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePriceSource(
      oracle: string,
      weight: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    windowSize(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_WINDOW_SIZE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GRAMS_PER_OUNCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_DEVIATION_MULTIPLIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PRICE_SOURCES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_DEVIATION_MULTIPLIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_PRICE_SOURCES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activateEmergencyMode(
      price: BigNumberish,
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addPriceSource(
      oracle: string,
      name: string,
      weight: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    authorizedUpdaters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateDeviationScore(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentMetrics(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deactivateEmergencyMode(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deviationMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentGoldPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentMetrics(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarketConditions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceHistory(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceHistoryLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceSourcesCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStatisticalBands(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    historicalPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isHealthy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastEmergencyUpdate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketConditions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxPriceAge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceSources(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAuthorizedUpdater(
      updater: string,
      authorized: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sourceIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateConfiguration(
      _windowSize: BigNumberish,
      _deviationMultiplier: BigNumberish,
      _updateFrequency: BigNumberish,
      _maxPriceAge: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateFrequency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatePrice(
      pricePerGram: BigNumberish,
      confidence: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePriceMultiSource(
      prices: BigNumberish[],
      confidences: BigNumberish[],
      sourceIndices: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePriceSource(
      oracle: string,
      weight: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    windowSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
