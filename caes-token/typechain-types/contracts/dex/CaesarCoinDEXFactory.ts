/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface CaesarCoinDEXFactoryInterface extends utils.Interface {
  functions: {
    "MAX_TRADING_FEE()": FunctionFragment;
    "PAIR_CREATION_COOLDOWN()": FunctionFragment;
    "allPairs(uint256)": FunctionFragment;
    "allPairsLength()": FunctionFragment;
    "collectAllProtocolFees()": FunctionFragment;
    "collectProtocolFees(address)": FunctionFragment;
    "createPair(address,address)": FunctionFragment;
    "feeTo()": FunctionFragment;
    "feeToSetter()": FunctionFragment;
    "getDEXStats()": FunctionFragment;
    "getInitializingTokens()": FunctionFragment;
    "getPair(address,address)": FunctionFragment;
    "getPairStats(address)": FunctionFragment;
    "getPairTradingFee(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pairCodeHash()": FunctionFragment;
    "pairLastUpdate(address)": FunctionFragment;
    "pairVolumes(address)": FunctionFragment;
    "predictPairAddress(address,address)": FunctionFragment;
    "protocolFeePercentage()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFeeTo(address)": FunctionFragment;
    "setFeeToSetter(address)": FunctionFragment;
    "setPairCreationPaused(bool)": FunctionFragment;
    "setProtocolFee(uint256)": FunctionFragment;
    "setTradingFee(uint256)": FunctionFragment;
    "totalVolume()": FunctionFragment;
    "tradingFee()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePairVolume(address,uint256)": FunctionFragment;
    "userLastPairCreation(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_TRADING_FEE"
      | "PAIR_CREATION_COOLDOWN"
      | "allPairs"
      | "allPairsLength"
      | "collectAllProtocolFees"
      | "collectProtocolFees"
      | "createPair"
      | "feeTo"
      | "feeToSetter"
      | "getDEXStats"
      | "getInitializingTokens"
      | "getPair"
      | "getPairStats"
      | "getPairTradingFee"
      | "owner"
      | "pairCodeHash"
      | "pairLastUpdate"
      | "pairVolumes"
      | "predictPairAddress"
      | "protocolFeePercentage"
      | "renounceOwnership"
      | "setFeeTo"
      | "setFeeToSetter"
      | "setPairCreationPaused"
      | "setProtocolFee"
      | "setTradingFee"
      | "totalVolume"
      | "tradingFee"
      | "transferOwnership"
      | "updatePairVolume"
      | "userLastPairCreation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_TRADING_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAIR_CREATION_COOLDOWN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allPairs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allPairsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectAllProtocolFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectProtocolFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createPair",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeToSetter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDEXStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitializingTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairStats",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairTradingFee",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairCodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pairLastUpdate",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "pairVolumes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "predictPairAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setFeeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFeeToSetter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPairCreationPaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTradingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVolume",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePairVolume",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userLastPairCreation",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_TRADING_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAIR_CREATION_COOLDOWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allPairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allPairsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectAllProtocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectProtocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeToSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDEXStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitializingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPairStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairTradingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pairLastUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pairVolumes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictPairAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeToSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPairCreationPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTradingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tradingFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePairVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userLastPairCreation",
    data: BytesLike
  ): Result;

  events: {
    "FeeToSet(address)": EventFragment;
    "FeeToSetterSet(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PairCreated(address,address,address,uint256)": EventFragment;
    "ProtocolFeeSet(uint256)": EventFragment;
    "TradingFeeSet(uint256)": EventFragment;
    "VolumeUpdated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeToSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeToSetterSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradingFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VolumeUpdated"): EventFragment;
}

export interface FeeToSetEventObject {
  feeTo: string;
}
export type FeeToSetEvent = TypedEvent<[string], FeeToSetEventObject>;

export type FeeToSetEventFilter = TypedEventFilter<FeeToSetEvent>;

export interface FeeToSetterSetEventObject {
  feeToSetter: string;
}
export type FeeToSetterSetEvent = TypedEvent<
  [string],
  FeeToSetterSetEventObject
>;

export type FeeToSetterSetEventFilter = TypedEventFilter<FeeToSetterSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PairCreatedEventObject {
  token0: string;
  token1: string;
  pair: string;
  allPairsLength: BigNumber;
}
export type PairCreatedEvent = TypedEvent<
  [string, string, string, BigNumber],
  PairCreatedEventObject
>;

export type PairCreatedEventFilter = TypedEventFilter<PairCreatedEvent>;

export interface ProtocolFeeSetEventObject {
  fee: BigNumber;
}
export type ProtocolFeeSetEvent = TypedEvent<
  [BigNumber],
  ProtocolFeeSetEventObject
>;

export type ProtocolFeeSetEventFilter = TypedEventFilter<ProtocolFeeSetEvent>;

export interface TradingFeeSetEventObject {
  fee: BigNumber;
}
export type TradingFeeSetEvent = TypedEvent<
  [BigNumber],
  TradingFeeSetEventObject
>;

export type TradingFeeSetEventFilter = TypedEventFilter<TradingFeeSetEvent>;

export interface VolumeUpdatedEventObject {
  pair: string;
  volume: BigNumber;
}
export type VolumeUpdatedEvent = TypedEvent<
  [string, BigNumber],
  VolumeUpdatedEventObject
>;

export type VolumeUpdatedEventFilter = TypedEventFilter<VolumeUpdatedEvent>;

export interface CaesarCoinDEXFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CaesarCoinDEXFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_TRADING_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PAIR_CREATION_COOLDOWN(overrides?: CallOverrides): Promise<[BigNumber]>;

    allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    allPairsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    collectAllProtocolFees(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    collectProtocolFees(
      pair: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createPair(
      tokenA: string,
      tokenB: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    feeTo(overrides?: CallOverrides): Promise<[string]>;

    feeToSetter(overrides?: CallOverrides): Promise<[string]>;

    getDEXStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        _totalVolume: BigNumber;
        _totalPairs: BigNumber;
        _currentTradingFee: BigNumber;
        _protocolFeePercentage: BigNumber;
      }
    >;

    getInitializingTokens(
      overrides?: CallOverrides
    ): Promise<[string, string] & { token0: string; token1: string }>;

    getPair(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPairStats(
      pair: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        volume: BigNumber;
        lastUpdate: BigNumber;
        isValid: boolean;
      }
    >;

    getPairTradingFee(
      pair: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pairCodeHash(overrides?: CallOverrides): Promise<[string]>;

    pairLastUpdate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pairVolumes(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    predictPairAddress(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[string] & { pair: string }>;

    protocolFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeToSetter(
      _feeToSetter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPairCreationPaused(
      paused: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setProtocolFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTradingFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    totalVolume(overrides?: CallOverrides): Promise<[BigNumber]>;

    tradingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePairVolume(
      pair: string,
      volumeToAdd: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    userLastPairCreation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  MAX_TRADING_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  PAIR_CREATION_COOLDOWN(overrides?: CallOverrides): Promise<BigNumber>;

  allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

  collectAllProtocolFees(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  collectProtocolFees(
    pair: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createPair(
    tokenA: string,
    tokenB: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  feeToSetter(overrides?: CallOverrides): Promise<string>;

  getDEXStats(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      _totalVolume: BigNumber;
      _totalPairs: BigNumber;
      _currentTradingFee: BigNumber;
      _protocolFeePercentage: BigNumber;
    }
  >;

  getInitializingTokens(
    overrides?: CallOverrides
  ): Promise<[string, string] & { token0: string; token1: string }>;

  getPair(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getPairStats(
    pair: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      volume: BigNumber;
      lastUpdate: BigNumber;
      isValid: boolean;
    }
  >;

  getPairTradingFee(
    pair: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pairCodeHash(overrides?: CallOverrides): Promise<string>;

  pairLastUpdate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  pairVolumes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  predictPairAddress(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<string>;

  protocolFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeTo(
    _feeTo: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeToSetter(
    _feeToSetter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPairCreationPaused(
    paused: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setProtocolFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTradingFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  totalVolume(overrides?: CallOverrides): Promise<BigNumber>;

  tradingFee(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePairVolume(
    pair: string,
    volumeToAdd: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  userLastPairCreation(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    MAX_TRADING_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    PAIR_CREATION_COOLDOWN(overrides?: CallOverrides): Promise<BigNumber>;

    allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    collectAllProtocolFees(overrides?: CallOverrides): Promise<void>;

    collectProtocolFees(pair: string, overrides?: CallOverrides): Promise<void>;

    createPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<string>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    feeToSetter(overrides?: CallOverrides): Promise<string>;

    getDEXStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        _totalVolume: BigNumber;
        _totalPairs: BigNumber;
        _currentTradingFee: BigNumber;
        _protocolFeePercentage: BigNumber;
      }
    >;

    getInitializingTokens(
      overrides?: CallOverrides
    ): Promise<[string, string] & { token0: string; token1: string }>;

    getPair(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getPairStats(
      pair: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        volume: BigNumber;
        lastUpdate: BigNumber;
        isValid: boolean;
      }
    >;

    getPairTradingFee(
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pairCodeHash(overrides?: CallOverrides): Promise<string>;

    pairLastUpdate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pairVolumes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    predictPairAddress(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<string>;

    protocolFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFeeTo(_feeTo: string, overrides?: CallOverrides): Promise<void>;

    setFeeToSetter(
      _feeToSetter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPairCreationPaused(
      paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFee(
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTradingFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    totalVolume(overrides?: CallOverrides): Promise<BigNumber>;

    tradingFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePairVolume(
      pair: string,
      volumeToAdd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userLastPairCreation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "FeeToSet(address)"(feeTo?: string | null): FeeToSetEventFilter;
    FeeToSet(feeTo?: string | null): FeeToSetEventFilter;

    "FeeToSetterSet(address)"(
      feeToSetter?: string | null
    ): FeeToSetterSetEventFilter;
    FeeToSetterSet(feeToSetter?: string | null): FeeToSetterSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PairCreated(address,address,address,uint256)"(
      token0?: string | null,
      token1?: string | null,
      pair?: null,
      allPairsLength?: null
    ): PairCreatedEventFilter;
    PairCreated(
      token0?: string | null,
      token1?: string | null,
      pair?: null,
      allPairsLength?: null
    ): PairCreatedEventFilter;

    "ProtocolFeeSet(uint256)"(fee?: null): ProtocolFeeSetEventFilter;
    ProtocolFeeSet(fee?: null): ProtocolFeeSetEventFilter;

    "TradingFeeSet(uint256)"(fee?: null): TradingFeeSetEventFilter;
    TradingFeeSet(fee?: null): TradingFeeSetEventFilter;

    "VolumeUpdated(address,uint256)"(
      pair?: string | null,
      volume?: null
    ): VolumeUpdatedEventFilter;
    VolumeUpdated(
      pair?: string | null,
      volume?: null
    ): VolumeUpdatedEventFilter;
  };

  estimateGas: {
    MAX_TRADING_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    PAIR_CREATION_COOLDOWN(overrides?: CallOverrides): Promise<BigNumber>;

    allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    collectAllProtocolFees(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    collectProtocolFees(
      pair: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createPair(
      tokenA: string,
      tokenB: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    feeToSetter(overrides?: CallOverrides): Promise<BigNumber>;

    getDEXStats(overrides?: CallOverrides): Promise<BigNumber>;

    getInitializingTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getPair(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairStats(pair: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPairTradingFee(
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pairCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    pairLastUpdate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pairVolumes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    predictPairAddress(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeToSetter(
      _feeToSetter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPairCreationPaused(
      paused: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setProtocolFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTradingFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    totalVolume(overrides?: CallOverrides): Promise<BigNumber>;

    tradingFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePairVolume(
      pair: string,
      volumeToAdd: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    userLastPairCreation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_TRADING_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAIR_CREATION_COOLDOWN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allPairs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allPairsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectAllProtocolFees(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    collectProtocolFees(
      pair: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createPair(
      tokenA: string,
      tokenB: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeToSetter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDEXStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInitializingTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPair(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairStats(
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairTradingFee(
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairCodeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairLastUpdate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairVolumes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    predictPairAddress(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFeePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeToSetter(
      _feeToSetter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPairCreationPaused(
      paused: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setProtocolFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTradingFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    totalVolume(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePairVolume(
      pair: string,
      volumeToAdd: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userLastPairCreation(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
