/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface ICaesarCoinDEXFactoryInterface extends utils.Interface {
  functions: {
    "allPairs(uint256)": FunctionFragment;
    "allPairsLength()": FunctionFragment;
    "collectProtocolFees(address)": FunctionFragment;
    "createPair(address,address)": FunctionFragment;
    "feeTo()": FunctionFragment;
    "feeToSetter()": FunctionFragment;
    "getInitializingTokens()": FunctionFragment;
    "getPair(address,address)": FunctionFragment;
    "getPairTradingFee(address)": FunctionFragment;
    "setFeeTo(address)": FunctionFragment;
    "setFeeToSetter(address)": FunctionFragment;
    "setProtocolFee(uint256)": FunctionFragment;
    "setTradingFee(uint256)": FunctionFragment;
    "tradingFee()": FunctionFragment;
    "updatePairVolume(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allPairs"
      | "allPairsLength"
      | "collectProtocolFees"
      | "createPair"
      | "feeTo"
      | "feeToSetter"
      | "getInitializingTokens"
      | "getPair"
      | "getPairTradingFee"
      | "setFeeTo"
      | "setFeeToSetter"
      | "setProtocolFee"
      | "setTradingFee"
      | "tradingFee"
      | "updatePairVolume"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allPairs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allPairsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectProtocolFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createPair",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeToSetter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitializingTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairTradingFee",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setFeeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFeeToSetter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTradingFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tradingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePairVolume",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allPairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allPairsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectProtocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeToSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitializingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPairTradingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeToSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTradingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tradingFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePairVolume",
    data: BytesLike
  ): Result;

  events: {
    "FeeToSet(address)": EventFragment;
    "FeeToSetterSet(address)": EventFragment;
    "PairCreated(address,address,address,uint256)": EventFragment;
    "TradingFeeSet(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeToSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeToSetterSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradingFeeSet"): EventFragment;
}

export interface FeeToSetEventObject {
  feeTo: string;
}
export type FeeToSetEvent = TypedEvent<[string], FeeToSetEventObject>;

export type FeeToSetEventFilter = TypedEventFilter<FeeToSetEvent>;

export interface FeeToSetterSetEventObject {
  feeToSetter: string;
}
export type FeeToSetterSetEvent = TypedEvent<
  [string],
  FeeToSetterSetEventObject
>;

export type FeeToSetterSetEventFilter = TypedEventFilter<FeeToSetterSetEvent>;

export interface PairCreatedEventObject {
  token0: string;
  token1: string;
  pair: string;
  allPairsLength: BigNumber;
}
export type PairCreatedEvent = TypedEvent<
  [string, string, string, BigNumber],
  PairCreatedEventObject
>;

export type PairCreatedEventFilter = TypedEventFilter<PairCreatedEvent>;

export interface TradingFeeSetEventObject {
  fee: BigNumber;
}
export type TradingFeeSetEvent = TypedEvent<
  [BigNumber],
  TradingFeeSetEventObject
>;

export type TradingFeeSetEventFilter = TypedEventFilter<TradingFeeSetEvent>;

export interface ICaesarCoinDEXFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICaesarCoinDEXFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allPairs(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { pair: string }>;

    allPairsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    collectProtocolFees(
      pair: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createPair(
      tokenA: string,
      tokenB: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    feeTo(overrides?: CallOverrides): Promise<[string]>;

    feeToSetter(overrides?: CallOverrides): Promise<[string]>;

    getInitializingTokens(
      overrides?: CallOverrides
    ): Promise<[string, string] & { token0: string; token1: string }>;

    getPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<[string] & { pair: string }>;

    getPairTradingFee(
      pair: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeToSetter(
      _feeToSetter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setProtocolFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTradingFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tradingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    updatePairVolume(
      pair: string,
      volumeToAdd: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  allPairs(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

  collectProtocolFees(
    pair: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createPair(
    tokenA: string,
    tokenB: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  feeToSetter(overrides?: CallOverrides): Promise<string>;

  getInitializingTokens(
    overrides?: CallOverrides
  ): Promise<[string, string] & { token0: string; token1: string }>;

  getPair(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getPairTradingFee(
    pair: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setFeeTo(
    _feeTo: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeToSetter(
    _feeToSetter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setProtocolFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTradingFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  tradingFee(overrides?: CallOverrides): Promise<BigNumber>;

  updatePairVolume(
    pair: string,
    volumeToAdd: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    allPairs(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    collectProtocolFees(pair: string, overrides?: CallOverrides): Promise<void>;

    createPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<string>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    feeToSetter(overrides?: CallOverrides): Promise<string>;

    getInitializingTokens(
      overrides?: CallOverrides
    ): Promise<[string, string] & { token0: string; token1: string }>;

    getPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getPairTradingFee(
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFeeTo(_feeTo: string, overrides?: CallOverrides): Promise<void>;

    setFeeToSetter(
      _feeToSetter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFee(
      _fee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTradingFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    tradingFee(overrides?: CallOverrides): Promise<BigNumber>;

    updatePairVolume(
      pair: string,
      volumeToAdd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeeToSet(address)"(feeTo?: string | null): FeeToSetEventFilter;
    FeeToSet(feeTo?: string | null): FeeToSetEventFilter;

    "FeeToSetterSet(address)"(
      feeToSetter?: string | null
    ): FeeToSetterSetEventFilter;
    FeeToSetterSet(feeToSetter?: string | null): FeeToSetterSetEventFilter;

    "PairCreated(address,address,address,uint256)"(
      token0?: string | null,
      token1?: string | null,
      pair?: null,
      allPairsLength?: null
    ): PairCreatedEventFilter;
    PairCreated(
      token0?: string | null,
      token1?: string | null,
      pair?: null,
      allPairsLength?: null
    ): PairCreatedEventFilter;

    "TradingFeeSet(uint256)"(fee?: null): TradingFeeSetEventFilter;
    TradingFeeSet(fee?: null): TradingFeeSetEventFilter;
  };

  estimateGas: {
    allPairs(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    collectProtocolFees(
      pair: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createPair(
      tokenA: string,
      tokenB: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    feeToSetter(overrides?: CallOverrides): Promise<BigNumber>;

    getInitializingTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairTradingFee(
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeToSetter(
      _feeToSetter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setProtocolFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTradingFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    tradingFee(overrides?: CallOverrides): Promise<BigNumber>;

    updatePairVolume(
      pair: string,
      volumeToAdd: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allPairs(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allPairsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectProtocolFees(
      pair: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createPair(
      tokenA: string,
      tokenB: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeToSetter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInitializingTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPair(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairTradingFee(
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeToSetter(
      _feeToSetter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setProtocolFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTradingFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tradingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatePairVolume(
      pair: string,
      volumeToAdd: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
