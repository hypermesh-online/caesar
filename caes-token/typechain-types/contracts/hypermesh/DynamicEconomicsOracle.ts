/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace DynamicEconomicsOracle {
  export type EconomicParametersStruct = {
    dynamicGasFee: BigNumberish;
    hostReward: BigNumberish;
    performanceMultiplier: BigNumberish;
    crossChainBonus: BigNumberish;
    rateLimitThreshold: BigNumberish;
    rearouteThreshold: BigNumberish;
  };

  export type EconomicParametersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    dynamicGasFee: BigNumber;
    hostReward: BigNumber;
    performanceMultiplier: BigNumber;
    crossChainBonus: BigNumber;
    rateLimitThreshold: BigNumber;
    rearouteThreshold: BigNumber;
  };

  export type EconomicConfigStruct = {
    baseFee: BigNumberish;
    maxFeeMultiplier: BigNumberish;
    hostRewardPercentage: BigNumberish;
    liquidityPoolPercentage: BigNumberish;
    reservePercentage: BigNumberish;
    crossChainBonusRate: BigNumberish;
    performanceDecayRate: BigNumberish;
    emergencyMode: boolean;
  };

  export type EconomicConfigStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    baseFee: BigNumber;
    maxFeeMultiplier: BigNumber;
    hostRewardPercentage: BigNumber;
    liquidityPoolPercentage: BigNumber;
    reservePercentage: BigNumber;
    crossChainBonusRate: BigNumber;
    performanceDecayRate: BigNumber;
    emergencyMode: boolean;
  };
}

export interface DynamicEconomicsOracleInterface extends utils.Interface {
  functions: {
    "activateEmergencyMode(string)": FunctionFragment;
    "activeNodes(uint256)": FunctionFragment;
    "calculateDynamicGasFee()": FunctionFragment;
    "calculateHostReward(address,uint256,bool)": FunctionFragment;
    "calculateRateLimitThreshold()": FunctionFragment;
    "deactivateEmergencyMode()": FunctionFragment;
    "economicConfig()": FunctionFragment;
    "getEconomicParameters()": FunctionFragment;
    "getNetworkHealth()": FunctionFragment;
    "hostPerformanceScores(address)": FunctionFragment;
    "hostTotalRewards(address)": FunctionFragment;
    "liquidityMetrics()": FunctionFragment;
    "monitoredNetworks(uint256)": FunctionFragment;
    "networkHealth(address)": FunctionFragment;
    "nodes(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingValidations(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "shouldTriggerReroute(address)": FunctionFragment;
    "totalNetworks()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateEconomicConfig((uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool))": FunctionFragment;
    "updateHostPerformance(address,bool,uint256,uint256)": FunctionFragment;
    "updateLiquidityMetrics(uint256,uint256,uint256)": FunctionFragment;
    "updateNetworkHealth(address,uint256,uint256,uint256)": FunctionFragment;
    "updateVolatilityMetrics(uint256,uint256,uint256,uint256)": FunctionFragment;
    "volatilityMetrics()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activateEmergencyMode"
      | "activeNodes"
      | "calculateDynamicGasFee"
      | "calculateHostReward"
      | "calculateRateLimitThreshold"
      | "deactivateEmergencyMode"
      | "economicConfig"
      | "getEconomicParameters"
      | "getNetworkHealth"
      | "hostPerformanceScores"
      | "hostTotalRewards"
      | "liquidityMetrics"
      | "monitoredNetworks"
      | "networkHealth"
      | "nodes"
      | "owner"
      | "paused"
      | "pendingValidations"
      | "renounceOwnership"
      | "shouldTriggerReroute"
      | "totalNetworks"
      | "transferOwnership"
      | "updateEconomicConfig"
      | "updateHostPerformance"
      | "updateLiquidityMetrics"
      | "updateNetworkHealth"
      | "updateVolatilityMetrics"
      | "volatilityMetrics"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activateEmergencyMode",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "activeNodes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateDynamicGasFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateHostReward",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRateLimitThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateEmergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "economicConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEconomicParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNetworkHealth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hostPerformanceScores",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hostTotalRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "monitoredNetworks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "networkHealth",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "nodes", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingValidations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shouldTriggerReroute",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalNetworks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEconomicConfig",
    values: [DynamicEconomicsOracle.EconomicConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateHostPerformance",
    values: [string, boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLiquidityMetrics",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNetworkHealth",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVolatilityMetrics",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "volatilityMetrics",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "activateEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateDynamicGasFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateHostReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRateLimitThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "economicConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEconomicParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hostPerformanceScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hostTotalRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "monitoredNetworks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "networkHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nodes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingValidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldTriggerReroute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalNetworks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEconomicConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateHostPerformance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLiquidityMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNetworkHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVolatilityMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "volatilityMetrics",
    data: BytesLike
  ): Result;

  events: {
    "CrossChainRerouteTriggered(address,address,string)": EventFragment;
    "EconomicParametersUpdated(uint256,uint256,uint256)": EventFragment;
    "EmergencyModeActivated(string,uint256)": EventFragment;
    "LiquidityMetricsUpdated(uint256,uint256,uint256)": EventFragment;
    "NetworkHealthUpdated(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RateLimitThresholdUpdated(uint256,string)": EventFragment;
    "RewardDistributed(address,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CrossChainRerouteTriggered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EconomicParametersUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyModeActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityMetricsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NetworkHealthUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RateLimitThresholdUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface CrossChainRerouteTriggeredEventObject {
  fromNetwork: string;
  toNetwork: string;
  reason: string;
}
export type CrossChainRerouteTriggeredEvent = TypedEvent<
  [string, string, string],
  CrossChainRerouteTriggeredEventObject
>;

export type CrossChainRerouteTriggeredEventFilter =
  TypedEventFilter<CrossChainRerouteTriggeredEvent>;

export interface EconomicParametersUpdatedEventObject {
  newGasFee: BigNumber;
  newHostReward: BigNumber;
  timestamp: BigNumber;
}
export type EconomicParametersUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  EconomicParametersUpdatedEventObject
>;

export type EconomicParametersUpdatedEventFilter =
  TypedEventFilter<EconomicParametersUpdatedEvent>;

export interface EmergencyModeActivatedEventObject {
  reason: string;
  timestamp: BigNumber;
}
export type EmergencyModeActivatedEvent = TypedEvent<
  [string, BigNumber],
  EmergencyModeActivatedEventObject
>;

export type EmergencyModeActivatedEventFilter =
  TypedEventFilter<EmergencyModeActivatedEvent>;

export interface LiquidityMetricsUpdatedEventObject {
  healthIndex: BigNumber;
  marketPressure: BigNumber;
  timestamp: BigNumber;
}
export type LiquidityMetricsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LiquidityMetricsUpdatedEventObject
>;

export type LiquidityMetricsUpdatedEventFilter =
  TypedEventFilter<LiquidityMetricsUpdatedEvent>;

export interface NetworkHealthUpdatedEventObject {
  network: string;
  qualityScore: BigNumber;
  timestamp: BigNumber;
}
export type NetworkHealthUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  NetworkHealthUpdatedEventObject
>;

export type NetworkHealthUpdatedEventFilter =
  TypedEventFilter<NetworkHealthUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RateLimitThresholdUpdatedEventObject {
  newThreshold: BigNumber;
  reason: string;
}
export type RateLimitThresholdUpdatedEvent = TypedEvent<
  [BigNumber, string],
  RateLimitThresholdUpdatedEventObject
>;

export type RateLimitThresholdUpdatedEventFilter =
  TypedEventFilter<RateLimitThresholdUpdatedEvent>;

export interface RewardDistributedEventObject {
  host: string;
  amount: BigNumber;
  performanceScore: BigNumber;
}
export type RewardDistributedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RewardDistributedEventObject
>;

export type RewardDistributedEventFilter =
  TypedEventFilter<RewardDistributedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface DynamicEconomicsOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DynamicEconomicsOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activateEmergencyMode(
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    activeNodes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    calculateDynamicGasFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateHostReward(
      host: string,
      transactionFee: BigNumberish,
      isCrossChain: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateRateLimitThreshold(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deactivateEmergencyMode(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    economicConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        baseFee: BigNumber;
        maxFeeMultiplier: BigNumber;
        hostRewardPercentage: BigNumber;
        liquidityPoolPercentage: BigNumber;
        reservePercentage: BigNumber;
        crossChainBonusRate: BigNumber;
        performanceDecayRate: BigNumber;
        emergencyMode: boolean;
      }
    >;

    getEconomicParameters(
      overrides?: CallOverrides
    ): Promise<[DynamicEconomicsOracle.EconomicParametersStructOutput]>;

    getNetworkHealth(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        activeNodeCount: BigNumber;
        avgSuccessRate: BigNumber;
        avgLatency: BigNumber;
        totalValidations: BigNumber;
        emergencyModeStatus: BigNumber;
      }
    >;

    hostPerformanceScores(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hostTotalRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidityMetrics(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        liquidityHealthIndex: BigNumber;
        activeParticipants: BigNumber;
        targetParticipants: BigNumber;
        dailyVolume: BigNumber;
        targetVolume: BigNumber;
        stabilityReserve: BigNumber;
        requiredReserve: BigNumber;
        lastUpdate: BigNumber;
      }
    >;

    monitoredNetworks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    networkHealth(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        networkAddress: string;
        settlementRate: BigNumber;
        averageLatency: BigNumber;
        capacityUtilization: BigNumber;
        qualityScore: BigNumber;
        isActive: boolean;
        lastHealthCheck: BigNumber;
      }
    >;

    nodes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isActive: boolean;
        successRate: BigNumber;
        avgLatency: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingValidations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    shouldTriggerReroute(
      network: string,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    totalNetworks(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateEconomicConfig(
      newConfig: DynamicEconomicsOracle.EconomicConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateHostPerformance(
      host: string,
      success: boolean,
      latency: BigNumberish,
      expectedLatency: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateLiquidityMetrics(
      activeParticipants: BigNumberish,
      dailyVolume: BigNumberish,
      stabilityReserve: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateNetworkHealth(
      network: string,
      settlementRate: BigNumberish,
      averageLatency: BigNumberish,
      capacityUtilization: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateVolatilityMetrics(
      currentPrice: BigNumberish,
      targetPrice: BigNumberish,
      transactionVolume: BigNumberish,
      crossChainTransfers: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    volatilityMetrics(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        marketPressure: BigNumber;
        priceDeviation: BigNumber;
        transactionVolume: BigNumber;
        targetTransactionVolume: BigNumber;
        crossChainTransfers: BigNumber;
        targetCrossChainTransfers: BigNumber;
        volatilityScore: BigNumber;
        lastUpdate: BigNumber;
      }
    >;
  };

  activateEmergencyMode(
    reason: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  activeNodes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  calculateDynamicGasFee(overrides?: CallOverrides): Promise<BigNumber>;

  calculateHostReward(
    host: string,
    transactionFee: BigNumberish,
    isCrossChain: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateRateLimitThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  deactivateEmergencyMode(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  economicConfig(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      baseFee: BigNumber;
      maxFeeMultiplier: BigNumber;
      hostRewardPercentage: BigNumber;
      liquidityPoolPercentage: BigNumber;
      reservePercentage: BigNumber;
      crossChainBonusRate: BigNumber;
      performanceDecayRate: BigNumber;
      emergencyMode: boolean;
    }
  >;

  getEconomicParameters(
    overrides?: CallOverrides
  ): Promise<DynamicEconomicsOracle.EconomicParametersStructOutput>;

  getNetworkHealth(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      activeNodeCount: BigNumber;
      avgSuccessRate: BigNumber;
      avgLatency: BigNumber;
      totalValidations: BigNumber;
      emergencyModeStatus: BigNumber;
    }
  >;

  hostPerformanceScores(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hostTotalRewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  liquidityMetrics(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      liquidityHealthIndex: BigNumber;
      activeParticipants: BigNumber;
      targetParticipants: BigNumber;
      dailyVolume: BigNumber;
      targetVolume: BigNumber;
      stabilityReserve: BigNumber;
      requiredReserve: BigNumber;
      lastUpdate: BigNumber;
    }
  >;

  monitoredNetworks(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  networkHealth(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
      networkAddress: string;
      settlementRate: BigNumber;
      averageLatency: BigNumber;
      capacityUtilization: BigNumber;
      qualityScore: BigNumber;
      isActive: boolean;
      lastHealthCheck: BigNumber;
    }
  >;

  nodes(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      isActive: boolean;
      successRate: BigNumber;
      avgLatency: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingValidations(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  shouldTriggerReroute(
    network: string,
    overrides?: CallOverrides
  ): Promise<[boolean, string]>;

  totalNetworks(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateEconomicConfig(
    newConfig: DynamicEconomicsOracle.EconomicConfigStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateHostPerformance(
    host: string,
    success: boolean,
    latency: BigNumberish,
    expectedLatency: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateLiquidityMetrics(
    activeParticipants: BigNumberish,
    dailyVolume: BigNumberish,
    stabilityReserve: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateNetworkHealth(
    network: string,
    settlementRate: BigNumberish,
    averageLatency: BigNumberish,
    capacityUtilization: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateVolatilityMetrics(
    currentPrice: BigNumberish,
    targetPrice: BigNumberish,
    transactionVolume: BigNumberish,
    crossChainTransfers: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  volatilityMetrics(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      marketPressure: BigNumber;
      priceDeviation: BigNumber;
      transactionVolume: BigNumber;
      targetTransactionVolume: BigNumber;
      crossChainTransfers: BigNumber;
      targetCrossChainTransfers: BigNumber;
      volatilityScore: BigNumber;
      lastUpdate: BigNumber;
    }
  >;

  callStatic: {
    activateEmergencyMode(
      reason: string,
      overrides?: CallOverrides
    ): Promise<void>;

    activeNodes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    calculateDynamicGasFee(overrides?: CallOverrides): Promise<BigNumber>;

    calculateHostReward(
      host: string,
      transactionFee: BigNumberish,
      isCrossChain: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRateLimitThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    deactivateEmergencyMode(overrides?: CallOverrides): Promise<void>;

    economicConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        baseFee: BigNumber;
        maxFeeMultiplier: BigNumber;
        hostRewardPercentage: BigNumber;
        liquidityPoolPercentage: BigNumber;
        reservePercentage: BigNumber;
        crossChainBonusRate: BigNumber;
        performanceDecayRate: BigNumber;
        emergencyMode: boolean;
      }
    >;

    getEconomicParameters(
      overrides?: CallOverrides
    ): Promise<DynamicEconomicsOracle.EconomicParametersStructOutput>;

    getNetworkHealth(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        activeNodeCount: BigNumber;
        avgSuccessRate: BigNumber;
        avgLatency: BigNumber;
        totalValidations: BigNumber;
        emergencyModeStatus: BigNumber;
      }
    >;

    hostPerformanceScores(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hostTotalRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityMetrics(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        liquidityHealthIndex: BigNumber;
        activeParticipants: BigNumber;
        targetParticipants: BigNumber;
        dailyVolume: BigNumber;
        targetVolume: BigNumber;
        stabilityReserve: BigNumber;
        requiredReserve: BigNumber;
        lastUpdate: BigNumber;
      }
    >;

    monitoredNetworks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    networkHealth(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        networkAddress: string;
        settlementRate: BigNumber;
        averageLatency: BigNumber;
        capacityUtilization: BigNumber;
        qualityScore: BigNumber;
        isActive: boolean;
        lastHealthCheck: BigNumber;
      }
    >;

    nodes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isActive: boolean;
        successRate: BigNumber;
        avgLatency: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingValidations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    shouldTriggerReroute(
      network: string,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    totalNetworks(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateEconomicConfig(
      newConfig: DynamicEconomicsOracle.EconomicConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateHostPerformance(
      host: string,
      success: boolean,
      latency: BigNumberish,
      expectedLatency: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLiquidityMetrics(
      activeParticipants: BigNumberish,
      dailyVolume: BigNumberish,
      stabilityReserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateNetworkHealth(
      network: string,
      settlementRate: BigNumberish,
      averageLatency: BigNumberish,
      capacityUtilization: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVolatilityMetrics(
      currentPrice: BigNumberish,
      targetPrice: BigNumberish,
      transactionVolume: BigNumberish,
      crossChainTransfers: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    volatilityMetrics(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        marketPressure: BigNumber;
        priceDeviation: BigNumber;
        transactionVolume: BigNumber;
        targetTransactionVolume: BigNumber;
        crossChainTransfers: BigNumber;
        targetCrossChainTransfers: BigNumber;
        volatilityScore: BigNumber;
        lastUpdate: BigNumber;
      }
    >;
  };

  filters: {
    "CrossChainRerouteTriggered(address,address,string)"(
      fromNetwork?: null,
      toNetwork?: null,
      reason?: null
    ): CrossChainRerouteTriggeredEventFilter;
    CrossChainRerouteTriggered(
      fromNetwork?: null,
      toNetwork?: null,
      reason?: null
    ): CrossChainRerouteTriggeredEventFilter;

    "EconomicParametersUpdated(uint256,uint256,uint256)"(
      newGasFee?: null,
      newHostReward?: null,
      timestamp?: null
    ): EconomicParametersUpdatedEventFilter;
    EconomicParametersUpdated(
      newGasFee?: null,
      newHostReward?: null,
      timestamp?: null
    ): EconomicParametersUpdatedEventFilter;

    "EmergencyModeActivated(string,uint256)"(
      reason?: null,
      timestamp?: null
    ): EmergencyModeActivatedEventFilter;
    EmergencyModeActivated(
      reason?: null,
      timestamp?: null
    ): EmergencyModeActivatedEventFilter;

    "LiquidityMetricsUpdated(uint256,uint256,uint256)"(
      healthIndex?: null,
      marketPressure?: null,
      timestamp?: null
    ): LiquidityMetricsUpdatedEventFilter;
    LiquidityMetricsUpdated(
      healthIndex?: null,
      marketPressure?: null,
      timestamp?: null
    ): LiquidityMetricsUpdatedEventFilter;

    "NetworkHealthUpdated(address,uint256,uint256)"(
      network?: string | null,
      qualityScore?: null,
      timestamp?: null
    ): NetworkHealthUpdatedEventFilter;
    NetworkHealthUpdated(
      network?: string | null,
      qualityScore?: null,
      timestamp?: null
    ): NetworkHealthUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RateLimitThresholdUpdated(uint256,string)"(
      newThreshold?: null,
      reason?: null
    ): RateLimitThresholdUpdatedEventFilter;
    RateLimitThresholdUpdated(
      newThreshold?: null,
      reason?: null
    ): RateLimitThresholdUpdatedEventFilter;

    "RewardDistributed(address,uint256,uint256)"(
      host?: string | null,
      amount?: null,
      performanceScore?: null
    ): RewardDistributedEventFilter;
    RewardDistributed(
      host?: string | null,
      amount?: null,
      performanceScore?: null
    ): RewardDistributedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    activateEmergencyMode(
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    activeNodes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateDynamicGasFee(overrides?: CallOverrides): Promise<BigNumber>;

    calculateHostReward(
      host: string,
      transactionFee: BigNumberish,
      isCrossChain: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRateLimitThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    deactivateEmergencyMode(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    economicConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getEconomicParameters(overrides?: CallOverrides): Promise<BigNumber>;

    getNetworkHealth(overrides?: CallOverrides): Promise<BigNumber>;

    hostPerformanceScores(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hostTotalRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityMetrics(overrides?: CallOverrides): Promise<BigNumber>;

    monitoredNetworks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    networkHealth(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    nodes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingValidations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    shouldTriggerReroute(
      network: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalNetworks(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateEconomicConfig(
      newConfig: DynamicEconomicsOracle.EconomicConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateHostPerformance(
      host: string,
      success: boolean,
      latency: BigNumberish,
      expectedLatency: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateLiquidityMetrics(
      activeParticipants: BigNumberish,
      dailyVolume: BigNumberish,
      stabilityReserve: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateNetworkHealth(
      network: string,
      settlementRate: BigNumberish,
      averageLatency: BigNumberish,
      capacityUtilization: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateVolatilityMetrics(
      currentPrice: BigNumberish,
      targetPrice: BigNumberish,
      transactionVolume: BigNumberish,
      crossChainTransfers: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    volatilityMetrics(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activateEmergencyMode(
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    activeNodes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateDynamicGasFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateHostReward(
      host: string,
      transactionFee: BigNumberish,
      isCrossChain: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRateLimitThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deactivateEmergencyMode(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    economicConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEconomicParameters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNetworkHealth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hostPerformanceScores(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hostTotalRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityMetrics(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    monitoredNetworks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    networkHealth(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nodes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingValidations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    shouldTriggerReroute(
      network: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalNetworks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateEconomicConfig(
      newConfig: DynamicEconomicsOracle.EconomicConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateHostPerformance(
      host: string,
      success: boolean,
      latency: BigNumberish,
      expectedLatency: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateLiquidityMetrics(
      activeParticipants: BigNumberish,
      dailyVolume: BigNumberish,
      stabilityReserve: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateNetworkHealth(
      network: string,
      settlementRate: BigNumberish,
      averageLatency: BigNumberish,
      capacityUtilization: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateVolatilityMetrics(
      currentPrice: BigNumberish,
      targetPrice: BigNumberish,
      transactionVolume: BigNumberish,
      crossChainTransfers: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    volatilityMetrics(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
