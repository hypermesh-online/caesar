/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace ConsensusProofEngine {
  export type ConsensusParamsStruct = {
    minValidators: BigNumberish;
    optimalValidators: BigNumberish;
    consensusThreshold: BigNumberish;
    maxValidationTime: BigNumberish;
    hopTimeoutMs: BigNumberish;
    shardRebalanceInterval: BigNumberish;
    emergencyConsensusMode: boolean;
  };

  export type ConsensusParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    minValidators: BigNumber;
    optimalValidators: BigNumber;
    consensusThreshold: BigNumber;
    maxValidationTime: BigNumber;
    hopTimeoutMs: BigNumber;
    shardRebalanceInterval: BigNumber;
    emergencyConsensusMode: boolean;
  };
}

export interface ConsensusProofEngineInterface extends utils.Interface {
  functions: {
    "activateEmergencyConsensus(string)": FunctionFragment;
    "activeValidators(uint256)": FunctionFragment;
    "authorizeValidator(address,uint256)": FunctionFragment;
    "consensusParams()": FunctionFragment;
    "consensusProofs(bytes32)": FunctionFragment;
    "deactivateEmergencyConsensus()": FunctionFragment;
    "getConsensusProof(bytes32)": FunctionFragment;
    "getNetworkMetrics()": FunctionFragment;
    "getValidatorMetrics(address)": FunctionFragment;
    "initiateConsensusProof(bytes32,uint256)": FunctionFragment;
    "networkMetrics()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingProofs(uint256)": FunctionFragment;
    "proofToValidator(bytes32)": FunctionFragment;
    "rebalanceShards()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "submitHopValidation(bytes32,uint256,bytes32)": FunctionFragment;
    "totalShards()": FunctionFragment;
    "totalValidations()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateConsensusParams((uint256,uint256,uint256,uint256,uint256,uint256,bool))": FunctionFragment;
    "validationNodes(address)": FunctionFragment;
    "validationShards(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activateEmergencyConsensus"
      | "activeValidators"
      | "authorizeValidator"
      | "consensusParams"
      | "consensusProofs"
      | "deactivateEmergencyConsensus"
      | "getConsensusProof"
      | "getNetworkMetrics"
      | "getValidatorMetrics"
      | "initiateConsensusProof"
      | "networkMetrics"
      | "owner"
      | "pendingProofs"
      | "proofToValidator"
      | "rebalanceShards"
      | "renounceOwnership"
      | "submitHopValidation"
      | "totalShards"
      | "totalValidations"
      | "transferOwnership"
      | "updateConsensusParams"
      | "validationNodes"
      | "validationShards"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activateEmergencyConsensus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "activeValidators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeValidator",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "consensusParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "consensusProofs",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateEmergencyConsensus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConsensusProof",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNetworkMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorMetrics",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateConsensusProof",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "networkMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingProofs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proofToValidator",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceShards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitHopValidation",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalShards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalValidations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConsensusParams",
    values: [ConsensusProofEngine.ConsensusParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "validationNodes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validationShards",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "activateEmergencyConsensus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consensusParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consensusProofs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateEmergencyConsensus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConsensusProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateConsensusProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "networkMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingProofs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proofToValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceShards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitHopValidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalValidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConsensusParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validationNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validationShards",
    data: BytesLike
  ): Result;

  events: {
    "ConsensusFailed(bytes32,string)": EventFragment;
    "ConsensusProofStarted(bytes32,bytes32,address[])": EventFragment;
    "ConsensusReached(bytes32,uint256,uint256)": EventFragment;
    "EmergencyConsensusActivated(string)": EventFragment;
    "HopValidated(bytes32,address,uint256,bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ShardRebalanced(uint256,address[])": EventFragment;
    "ValidatorAuthorized(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConsensusFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConsensusProofStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConsensusReached"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EmergencyConsensusActivated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HopValidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShardRebalanced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorAuthorized"): EventFragment;
}

export interface ConsensusFailedEventObject {
  proofId: string;
  reason: string;
}
export type ConsensusFailedEvent = TypedEvent<
  [string, string],
  ConsensusFailedEventObject
>;

export type ConsensusFailedEventFilter = TypedEventFilter<ConsensusFailedEvent>;

export interface ConsensusProofStartedEventObject {
  proofId: string;
  transactionHash: string;
  validators: string[];
}
export type ConsensusProofStartedEvent = TypedEvent<
  [string, string, string[]],
  ConsensusProofStartedEventObject
>;

export type ConsensusProofStartedEventFilter =
  TypedEventFilter<ConsensusProofStartedEvent>;

export interface ConsensusReachedEventObject {
  proofId: string;
  consensusScore: BigNumber;
  validationTime: BigNumber;
}
export type ConsensusReachedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ConsensusReachedEventObject
>;

export type ConsensusReachedEventFilter =
  TypedEventFilter<ConsensusReachedEvent>;

export interface EmergencyConsensusActivatedEventObject {
  reason: string;
}
export type EmergencyConsensusActivatedEvent = TypedEvent<
  [string],
  EmergencyConsensusActivatedEventObject
>;

export type EmergencyConsensusActivatedEventFilter =
  TypedEventFilter<EmergencyConsensusActivatedEvent>;

export interface HopValidatedEventObject {
  proofId: string;
  validator: string;
  hopIndex: BigNumber;
  proof: string;
}
export type HopValidatedEvent = TypedEvent<
  [string, string, BigNumber, string],
  HopValidatedEventObject
>;

export type HopValidatedEventFilter = TypedEventFilter<HopValidatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ShardRebalancedEventObject {
  shardId: BigNumber;
  newValidators: string[];
}
export type ShardRebalancedEvent = TypedEvent<
  [BigNumber, string[]],
  ShardRebalancedEventObject
>;

export type ShardRebalancedEventFilter = TypedEventFilter<ShardRebalancedEvent>;

export interface ValidatorAuthorizedEventObject {
  validator: string;
  validationPower: BigNumber;
}
export type ValidatorAuthorizedEvent = TypedEvent<
  [string, BigNumber],
  ValidatorAuthorizedEventObject
>;

export type ValidatorAuthorizedEventFilter =
  TypedEventFilter<ValidatorAuthorizedEvent>;

export interface ConsensusProofEngine extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConsensusProofEngineInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activateEmergencyConsensus(
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    activeValidators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    authorizeValidator(
      validator: string,
      validationPower: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    consensusParams(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        minValidators: BigNumber;
        optimalValidators: BigNumber;
        consensusThreshold: BigNumber;
        maxValidationTime: BigNumber;
        hopTimeoutMs: BigNumber;
        shardRebalanceInterval: BigNumber;
        emergencyConsensusMode: boolean;
      }
    >;

    consensusProofs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, number] & {
        transactionHash: string;
        signature: string;
        consensusScore: BigNumber;
        status: number;
      }
    >;

    deactivateEmergencyConsensus(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getConsensusProof(
      proofId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string[], BigNumber, number, BigNumber] & {
        transactionHash: string;
        validationPath: string[];
        consensusScore: BigNumber;
        status: number;
        completedHops: BigNumber;
      }
    >;

    getNetworkMetrics(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        activeValidatorCount: BigNumber;
        averageConsensusTime: BigNumber;
        validationSuccessRate: BigNumber;
        networkUtilityScore: BigNumber;
        totalValidationsToday: BigNumber;
      }
    >;

    getValidatorMetrics(
      validator: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        validationPower: BigNumber;
        successfulValidations: BigNumber;
        failedValidations: BigNumber;
        successRate: BigNumber;
        isAuthorized: boolean;
      }
    >;

    initiateConsensusProof(
      transactionHash: BytesLike,
      requiredValidators: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    networkMetrics(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        dailyValidations: BigNumber;
        crossChainValidations: BigNumber;
        averageConsensusTime: BigNumber;
        networkUtilityScore: BigNumber;
        validationSuccessRate: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingProofs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    proofToValidator(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rebalanceShards(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    submitHopValidation(
      proofId: BytesLike,
      hopIndex: BigNumberish,
      hopProof: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    totalShards(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalValidations(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateConsensusParams(
      newParams: ConsensusProofEngine.ConsensusParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    validationNodes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        nodeAddress: string;
        validationPower: BigNumber;
        successfulValidations: BigNumber;
        failedValidations: BigNumber;
        averageLatency: BigNumber;
        lastValidation: BigNumber;
        isAuthorized: boolean;
        nodeSignature: string;
      }
    >;

    validationShards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        shardId: BigNumber;
        activeValidations: BigNumber;
        shardCapacity: BigNumber;
        averageConsensusTime: BigNumber;
        isActive: boolean;
      }
    >;
  };

  activateEmergencyConsensus(
    reason: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  activeValidators(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  authorizeValidator(
    validator: string,
    validationPower: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  consensusParams(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      minValidators: BigNumber;
      optimalValidators: BigNumber;
      consensusThreshold: BigNumber;
      maxValidationTime: BigNumber;
      hopTimeoutMs: BigNumber;
      shardRebalanceInterval: BigNumber;
      emergencyConsensusMode: boolean;
    }
  >;

  consensusProofs(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, number] & {
      transactionHash: string;
      signature: string;
      consensusScore: BigNumber;
      status: number;
    }
  >;

  deactivateEmergencyConsensus(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getConsensusProof(
    proofId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string[], BigNumber, number, BigNumber] & {
      transactionHash: string;
      validationPath: string[];
      consensusScore: BigNumber;
      status: number;
      completedHops: BigNumber;
    }
  >;

  getNetworkMetrics(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      activeValidatorCount: BigNumber;
      averageConsensusTime: BigNumber;
      validationSuccessRate: BigNumber;
      networkUtilityScore: BigNumber;
      totalValidationsToday: BigNumber;
    }
  >;

  getValidatorMetrics(
    validator: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      validationPower: BigNumber;
      successfulValidations: BigNumber;
      failedValidations: BigNumber;
      successRate: BigNumber;
      isAuthorized: boolean;
    }
  >;

  initiateConsensusProof(
    transactionHash: BytesLike,
    requiredValidators: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  networkMetrics(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      dailyValidations: BigNumber;
      crossChainValidations: BigNumber;
      averageConsensusTime: BigNumber;
      networkUtilityScore: BigNumber;
      validationSuccessRate: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingProofs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  proofToValidator(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  rebalanceShards(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  submitHopValidation(
    proofId: BytesLike,
    hopIndex: BigNumberish,
    hopProof: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  totalShards(overrides?: CallOverrides): Promise<BigNumber>;

  totalValidations(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateConsensusParams(
    newParams: ConsensusProofEngine.ConsensusParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  validationNodes(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      string
    ] & {
      nodeAddress: string;
      validationPower: BigNumber;
      successfulValidations: BigNumber;
      failedValidations: BigNumber;
      averageLatency: BigNumber;
      lastValidation: BigNumber;
      isAuthorized: boolean;
      nodeSignature: string;
    }
  >;

  validationShards(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      shardId: BigNumber;
      activeValidations: BigNumber;
      shardCapacity: BigNumber;
      averageConsensusTime: BigNumber;
      isActive: boolean;
    }
  >;

  callStatic: {
    activateEmergencyConsensus(
      reason: string,
      overrides?: CallOverrides
    ): Promise<void>;

    activeValidators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    authorizeValidator(
      validator: string,
      validationPower: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    consensusParams(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        minValidators: BigNumber;
        optimalValidators: BigNumber;
        consensusThreshold: BigNumber;
        maxValidationTime: BigNumber;
        hopTimeoutMs: BigNumber;
        shardRebalanceInterval: BigNumber;
        emergencyConsensusMode: boolean;
      }
    >;

    consensusProofs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, number] & {
        transactionHash: string;
        signature: string;
        consensusScore: BigNumber;
        status: number;
      }
    >;

    deactivateEmergencyConsensus(overrides?: CallOverrides): Promise<void>;

    getConsensusProof(
      proofId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string[], BigNumber, number, BigNumber] & {
        transactionHash: string;
        validationPath: string[];
        consensusScore: BigNumber;
        status: number;
        completedHops: BigNumber;
      }
    >;

    getNetworkMetrics(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        activeValidatorCount: BigNumber;
        averageConsensusTime: BigNumber;
        validationSuccessRate: BigNumber;
        networkUtilityScore: BigNumber;
        totalValidationsToday: BigNumber;
      }
    >;

    getValidatorMetrics(
      validator: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        validationPower: BigNumber;
        successfulValidations: BigNumber;
        failedValidations: BigNumber;
        successRate: BigNumber;
        isAuthorized: boolean;
      }
    >;

    initiateConsensusProof(
      transactionHash: BytesLike,
      requiredValidators: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    networkMetrics(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        dailyValidations: BigNumber;
        crossChainValidations: BigNumber;
        averageConsensusTime: BigNumber;
        networkUtilityScore: BigNumber;
        validationSuccessRate: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingProofs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    proofToValidator(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    rebalanceShards(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    submitHopValidation(
      proofId: BytesLike,
      hopIndex: BigNumberish,
      hopProof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    totalShards(overrides?: CallOverrides): Promise<BigNumber>;

    totalValidations(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateConsensusParams(
      newParams: ConsensusProofEngine.ConsensusParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    validationNodes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        string
      ] & {
        nodeAddress: string;
        validationPower: BigNumber;
        successfulValidations: BigNumber;
        failedValidations: BigNumber;
        averageLatency: BigNumber;
        lastValidation: BigNumber;
        isAuthorized: boolean;
        nodeSignature: string;
      }
    >;

    validationShards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        shardId: BigNumber;
        activeValidations: BigNumber;
        shardCapacity: BigNumber;
        averageConsensusTime: BigNumber;
        isActive: boolean;
      }
    >;
  };

  filters: {
    "ConsensusFailed(bytes32,string)"(
      proofId?: BytesLike | null,
      reason?: null
    ): ConsensusFailedEventFilter;
    ConsensusFailed(
      proofId?: BytesLike | null,
      reason?: null
    ): ConsensusFailedEventFilter;

    "ConsensusProofStarted(bytes32,bytes32,address[])"(
      proofId?: BytesLike | null,
      transactionHash?: null,
      validators?: null
    ): ConsensusProofStartedEventFilter;
    ConsensusProofStarted(
      proofId?: BytesLike | null,
      transactionHash?: null,
      validators?: null
    ): ConsensusProofStartedEventFilter;

    "ConsensusReached(bytes32,uint256,uint256)"(
      proofId?: BytesLike | null,
      consensusScore?: null,
      validationTime?: null
    ): ConsensusReachedEventFilter;
    ConsensusReached(
      proofId?: BytesLike | null,
      consensusScore?: null,
      validationTime?: null
    ): ConsensusReachedEventFilter;

    "EmergencyConsensusActivated(string)"(
      reason?: null
    ): EmergencyConsensusActivatedEventFilter;
    EmergencyConsensusActivated(
      reason?: null
    ): EmergencyConsensusActivatedEventFilter;

    "HopValidated(bytes32,address,uint256,bytes32)"(
      proofId?: BytesLike | null,
      validator?: null,
      hopIndex?: null,
      proof?: null
    ): HopValidatedEventFilter;
    HopValidated(
      proofId?: BytesLike | null,
      validator?: null,
      hopIndex?: null,
      proof?: null
    ): HopValidatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ShardRebalanced(uint256,address[])"(
      shardId?: BigNumberish | null,
      newValidators?: null
    ): ShardRebalancedEventFilter;
    ShardRebalanced(
      shardId?: BigNumberish | null,
      newValidators?: null
    ): ShardRebalancedEventFilter;

    "ValidatorAuthorized(address,uint256)"(
      validator?: string | null,
      validationPower?: null
    ): ValidatorAuthorizedEventFilter;
    ValidatorAuthorized(
      validator?: string | null,
      validationPower?: null
    ): ValidatorAuthorizedEventFilter;
  };

  estimateGas: {
    activateEmergencyConsensus(
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    activeValidators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authorizeValidator(
      validator: string,
      validationPower: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    consensusParams(overrides?: CallOverrides): Promise<BigNumber>;

    consensusProofs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deactivateEmergencyConsensus(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getConsensusProof(
      proofId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNetworkMetrics(overrides?: CallOverrides): Promise<BigNumber>;

    getValidatorMetrics(
      validator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initiateConsensusProof(
      transactionHash: BytesLike,
      requiredValidators: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    networkMetrics(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingProofs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proofToValidator(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebalanceShards(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    submitHopValidation(
      proofId: BytesLike,
      hopIndex: BigNumberish,
      hopProof: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    totalShards(overrides?: CallOverrides): Promise<BigNumber>;

    totalValidations(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateConsensusParams(
      newParams: ConsensusProofEngine.ConsensusParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    validationNodes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validationShards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activateEmergencyConsensus(
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    activeValidators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authorizeValidator(
      validator: string,
      validationPower: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    consensusParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    consensusProofs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deactivateEmergencyConsensus(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getConsensusProof(
      proofId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNetworkMetrics(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getValidatorMetrics(
      validator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initiateConsensusProof(
      transactionHash: BytesLike,
      requiredValidators: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    networkMetrics(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingProofs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proofToValidator(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebalanceShards(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    submitHopValidation(
      proofId: BytesLike,
      hopIndex: BigNumberish,
      hopProof: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    totalShards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalValidations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateConsensusParams(
      newParams: ConsensusProofEngine.ConsensusParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    validationNodes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validationShards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
