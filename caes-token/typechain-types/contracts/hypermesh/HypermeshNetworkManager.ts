/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace HypermeshNetworkManager {
  export type NetworkConfigStruct = {
    minHops: BigNumberish;
    optimalHops: BigNumberish;
    maxHops: BigNumberish;
    shardCount: BigNumberish;
    hopTimeoutMs: BigNumberish;
    consensusThreshold: BigNumberish;
    emergencyMode: boolean;
  };

  export type NetworkConfigStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    minHops: BigNumber;
    optimalHops: BigNumber;
    maxHops: BigNumber;
    shardCount: BigNumber;
    hopTimeoutMs: BigNumber;
    consensusThreshold: BigNumber;
    emergencyMode: boolean;
  };
}

export interface HypermeshNetworkManagerInterface extends utils.Interface {
  functions: {
    "activateEmergencyMode(string)": FunctionFragment;
    "activeNodes(uint256)": FunctionFragment;
    "activeShardCount()": FunctionFragment;
    "baseRewardRate()": FunctionFragment;
    "crossChainBonusRate()": FunctionFragment;
    "deactivateEmergencyMode()": FunctionFragment;
    "getNetworkHealth()": FunctionFragment;
    "getNodeMetrics(address)": FunctionFragment;
    "hostRewardPercentage()": FunctionFragment;
    "networkConfig()": FunctionFragment;
    "nodes(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingValidations(uint256)": FunctionFragment;
    "performanceBonusMultiplier()": FunctionFragment;
    "registerNode(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "shards(uint256)": FunctionFragment;
    "startHopValidation(bytes32,address,address)": FunctionFragment;
    "submitHopProof(bytes32,uint256,bytes32)": FunctionFragment;
    "totalNodes()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateNetworkConfig((uint256,uint256,uint256,uint256,uint256,uint256,bool))": FunctionFragment;
    "validations(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activateEmergencyMode"
      | "activeNodes"
      | "activeShardCount"
      | "baseRewardRate"
      | "crossChainBonusRate"
      | "deactivateEmergencyMode"
      | "getNetworkHealth"
      | "getNodeMetrics"
      | "hostRewardPercentage"
      | "networkConfig"
      | "nodes"
      | "owner"
      | "paused"
      | "pendingValidations"
      | "performanceBonusMultiplier"
      | "registerNode"
      | "renounceOwnership"
      | "shards"
      | "startHopValidation"
      | "submitHopProof"
      | "totalNodes"
      | "transferOwnership"
      | "updateNetworkConfig"
      | "validations"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activateEmergencyMode",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "activeNodes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activeShardCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseRewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "crossChainBonusRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateEmergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNetworkHealth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNodeMetrics",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hostRewardPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "networkConfig",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nodes", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingValidations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "performanceBonusMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerNode",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startHopValidation",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitHopProof",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalNodes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNetworkConfig",
    values: [HypermeshNetworkManager.NetworkConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "validations",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "activateEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeShardCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crossChainBonusRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNodeMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hostRewardPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "networkConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nodes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingValidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performanceBonusMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startHopValidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitHopProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalNodes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNetworkConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validations",
    data: BytesLike
  ): Result;

  events: {
    "EmergencyModeActivated(string)": EventFragment;
    "HopCompleted(bytes32,address,uint256,bytes32)": EventFragment;
    "NodeDeactivated(address,string)": EventFragment;
    "NodeRegistered(address,bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RewardDistributed(address,uint256,string)": EventFragment;
    "ShardCreated(uint256,address[])": EventFragment;
    "ShardRebalanced(uint256,address[])": EventFragment;
    "Unpaused(address)": EventFragment;
    "ValidationCompleted(bytes32,bool,uint256)": EventFragment;
    "ValidationStarted(bytes32,address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EmergencyModeActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HopCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShardCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShardRebalanced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidationCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidationStarted"): EventFragment;
}

export interface EmergencyModeActivatedEventObject {
  reason: string;
}
export type EmergencyModeActivatedEvent = TypedEvent<
  [string],
  EmergencyModeActivatedEventObject
>;

export type EmergencyModeActivatedEventFilter =
  TypedEventFilter<EmergencyModeActivatedEvent>;

export interface HopCompletedEventObject {
  transactionId: string;
  node: string;
  hopIndex: BigNumber;
  proof: string;
}
export type HopCompletedEvent = TypedEvent<
  [string, string, BigNumber, string],
  HopCompletedEventObject
>;

export type HopCompletedEventFilter = TypedEventFilter<HopCompletedEvent>;

export interface NodeDeactivatedEventObject {
  node: string;
  reason: string;
}
export type NodeDeactivatedEvent = TypedEvent<
  [string, string],
  NodeDeactivatedEventObject
>;

export type NodeDeactivatedEventFilter = TypedEventFilter<NodeDeactivatedEvent>;

export interface NodeRegisteredEventObject {
  node: string;
  deviceFingerprint: string;
}
export type NodeRegisteredEvent = TypedEvent<
  [string, string],
  NodeRegisteredEventObject
>;

export type NodeRegisteredEventFilter = TypedEventFilter<NodeRegisteredEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RewardDistributedEventObject {
  node: string;
  amount: BigNumber;
  reason: string;
}
export type RewardDistributedEvent = TypedEvent<
  [string, BigNumber, string],
  RewardDistributedEventObject
>;

export type RewardDistributedEventFilter =
  TypedEventFilter<RewardDistributedEvent>;

export interface ShardCreatedEventObject {
  shardId: BigNumber;
  assignedNodes: string[];
}
export type ShardCreatedEvent = TypedEvent<
  [BigNumber, string[]],
  ShardCreatedEventObject
>;

export type ShardCreatedEventFilter = TypedEventFilter<ShardCreatedEvent>;

export interface ShardRebalancedEventObject {
  shardId: BigNumber;
  newNodes: string[];
}
export type ShardRebalancedEvent = TypedEvent<
  [BigNumber, string[]],
  ShardRebalancedEventObject
>;

export type ShardRebalancedEventFilter = TypedEventFilter<ShardRebalancedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface ValidationCompletedEventObject {
  transactionId: string;
  success: boolean;
  totalTime: BigNumber;
}
export type ValidationCompletedEvent = TypedEvent<
  [string, boolean, BigNumber],
  ValidationCompletedEventObject
>;

export type ValidationCompletedEventFilter =
  TypedEventFilter<ValidationCompletedEvent>;

export interface ValidationStartedEventObject {
  transactionId: string;
  hopPath: string[];
}
export type ValidationStartedEvent = TypedEvent<
  [string, string[]],
  ValidationStartedEventObject
>;

export type ValidationStartedEventFilter =
  TypedEventFilter<ValidationStartedEvent>;

export interface HypermeshNetworkManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HypermeshNetworkManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activateEmergencyMode(
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    activeNodes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    activeShardCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseRewardRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    crossChainBonusRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    deactivateEmergencyMode(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getNetworkHealth(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        activeNodeCount: BigNumber;
        avgSuccessRate: BigNumber;
        avgLatency: BigNumber;
        totalValidations: BigNumber;
        emergencyModeStatus: BigNumber;
      }
    >;

    getNodeMetrics(
      node: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        successRate: BigNumber;
        avgLatency: BigNumber;
        reputationScore: BigNumber;
        totalRouted: BigNumber;
        isActive: boolean;
      }
    >;

    hostRewardPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    networkConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        minHops: BigNumber;
        optimalHops: BigNumber;
        maxHops: BigNumber;
        shardCount: BigNumber;
        hopTimeoutMs: BigNumber;
        consensusThreshold: BigNumber;
        emergencyMode: boolean;
      }
    >;

    nodes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        nodeAddress: string;
        deviceFingerprint: string;
        successRate: BigNumber;
        avgLatency: BigNumber;
        reputationScore: BigNumber;
        totalRouted: BigNumber;
        lastActivity: BigNumber;
        isActive: boolean;
        isBlacklisted: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingValidations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    performanceBonusMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    registerNode(
      deviceFingerprint: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    shards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        shardId: BigNumber;
        transactionCount: BigNumber;
        loadFactor: BigNumber;
        avgLatency: BigNumber;
        isActive: boolean;
      }
    >;

    startHopValidation(
      transactionId: BytesLike,
      originChain: string,
      targetChain: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    submitHopProof(
      transactionId: BytesLike,
      hopIndex: BigNumberish,
      proof: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    totalNodes(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateNetworkConfig(
      newConfig: HypermeshNetworkManager.NetworkConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    validations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, number, string, string] & {
        transactionId: string;
        totalHops: BigNumber;
        startTime: BigNumber;
        status: number;
        originChain: string;
        targetChain: string;
      }
    >;
  };

  activateEmergencyMode(
    reason: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  activeNodes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  activeShardCount(overrides?: CallOverrides): Promise<BigNumber>;

  baseRewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  crossChainBonusRate(overrides?: CallOverrides): Promise<BigNumber>;

  deactivateEmergencyMode(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getNetworkHealth(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      activeNodeCount: BigNumber;
      avgSuccessRate: BigNumber;
      avgLatency: BigNumber;
      totalValidations: BigNumber;
      emergencyModeStatus: BigNumber;
    }
  >;

  getNodeMetrics(
    node: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      successRate: BigNumber;
      avgLatency: BigNumber;
      reputationScore: BigNumber;
      totalRouted: BigNumber;
      isActive: boolean;
    }
  >;

  hostRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  networkConfig(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      minHops: BigNumber;
      optimalHops: BigNumber;
      maxHops: BigNumber;
      shardCount: BigNumber;
      hopTimeoutMs: BigNumber;
      consensusThreshold: BigNumber;
      emergencyMode: boolean;
    }
  >;

  nodes(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean
    ] & {
      nodeAddress: string;
      deviceFingerprint: string;
      successRate: BigNumber;
      avgLatency: BigNumber;
      reputationScore: BigNumber;
      totalRouted: BigNumber;
      lastActivity: BigNumber;
      isActive: boolean;
      isBlacklisted: boolean;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingValidations(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  performanceBonusMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  registerNode(
    deviceFingerprint: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  shards(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      shardId: BigNumber;
      transactionCount: BigNumber;
      loadFactor: BigNumber;
      avgLatency: BigNumber;
      isActive: boolean;
    }
  >;

  startHopValidation(
    transactionId: BytesLike,
    originChain: string,
    targetChain: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  submitHopProof(
    transactionId: BytesLike,
    hopIndex: BigNumberish,
    proof: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  totalNodes(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateNetworkConfig(
    newConfig: HypermeshNetworkManager.NetworkConfigStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  validations(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, number, string, string] & {
      transactionId: string;
      totalHops: BigNumber;
      startTime: BigNumber;
      status: number;
      originChain: string;
      targetChain: string;
    }
  >;

  callStatic: {
    activateEmergencyMode(
      reason: string,
      overrides?: CallOverrides
    ): Promise<void>;

    activeNodes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    activeShardCount(overrides?: CallOverrides): Promise<BigNumber>;

    baseRewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    crossChainBonusRate(overrides?: CallOverrides): Promise<BigNumber>;

    deactivateEmergencyMode(overrides?: CallOverrides): Promise<void>;

    getNetworkHealth(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        activeNodeCount: BigNumber;
        avgSuccessRate: BigNumber;
        avgLatency: BigNumber;
        totalValidations: BigNumber;
        emergencyModeStatus: BigNumber;
      }
    >;

    getNodeMetrics(
      node: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        successRate: BigNumber;
        avgLatency: BigNumber;
        reputationScore: BigNumber;
        totalRouted: BigNumber;
        isActive: boolean;
      }
    >;

    hostRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    networkConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        minHops: BigNumber;
        optimalHops: BigNumber;
        maxHops: BigNumber;
        shardCount: BigNumber;
        hopTimeoutMs: BigNumber;
        consensusThreshold: BigNumber;
        emergencyMode: boolean;
      }
    >;

    nodes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        nodeAddress: string;
        deviceFingerprint: string;
        successRate: BigNumber;
        avgLatency: BigNumber;
        reputationScore: BigNumber;
        totalRouted: BigNumber;
        lastActivity: BigNumber;
        isActive: boolean;
        isBlacklisted: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingValidations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    performanceBonusMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    registerNode(
      deviceFingerprint: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    shards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        shardId: BigNumber;
        transactionCount: BigNumber;
        loadFactor: BigNumber;
        avgLatency: BigNumber;
        isActive: boolean;
      }
    >;

    startHopValidation(
      transactionId: BytesLike,
      originChain: string,
      targetChain: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    submitHopProof(
      transactionId: BytesLike,
      hopIndex: BigNumberish,
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    totalNodes(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateNetworkConfig(
      newConfig: HypermeshNetworkManager.NetworkConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    validations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, number, string, string] & {
        transactionId: string;
        totalHops: BigNumber;
        startTime: BigNumber;
        status: number;
        originChain: string;
        targetChain: string;
      }
    >;
  };

  filters: {
    "EmergencyModeActivated(string)"(
      reason?: null
    ): EmergencyModeActivatedEventFilter;
    EmergencyModeActivated(reason?: null): EmergencyModeActivatedEventFilter;

    "HopCompleted(bytes32,address,uint256,bytes32)"(
      transactionId?: BytesLike | null,
      node?: null,
      hopIndex?: null,
      proof?: null
    ): HopCompletedEventFilter;
    HopCompleted(
      transactionId?: BytesLike | null,
      node?: null,
      hopIndex?: null,
      proof?: null
    ): HopCompletedEventFilter;

    "NodeDeactivated(address,string)"(
      node?: string | null,
      reason?: null
    ): NodeDeactivatedEventFilter;
    NodeDeactivated(
      node?: string | null,
      reason?: null
    ): NodeDeactivatedEventFilter;

    "NodeRegistered(address,bytes32)"(
      node?: string | null,
      deviceFingerprint?: null
    ): NodeRegisteredEventFilter;
    NodeRegistered(
      node?: string | null,
      deviceFingerprint?: null
    ): NodeRegisteredEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RewardDistributed(address,uint256,string)"(
      node?: string | null,
      amount?: null,
      reason?: null
    ): RewardDistributedEventFilter;
    RewardDistributed(
      node?: string | null,
      amount?: null,
      reason?: null
    ): RewardDistributedEventFilter;

    "ShardCreated(uint256,address[])"(
      shardId?: BigNumberish | null,
      assignedNodes?: null
    ): ShardCreatedEventFilter;
    ShardCreated(
      shardId?: BigNumberish | null,
      assignedNodes?: null
    ): ShardCreatedEventFilter;

    "ShardRebalanced(uint256,address[])"(
      shardId?: BigNumberish | null,
      newNodes?: null
    ): ShardRebalancedEventFilter;
    ShardRebalanced(
      shardId?: BigNumberish | null,
      newNodes?: null
    ): ShardRebalancedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "ValidationCompleted(bytes32,bool,uint256)"(
      transactionId?: BytesLike | null,
      success?: null,
      totalTime?: null
    ): ValidationCompletedEventFilter;
    ValidationCompleted(
      transactionId?: BytesLike | null,
      success?: null,
      totalTime?: null
    ): ValidationCompletedEventFilter;

    "ValidationStarted(bytes32,address[])"(
      transactionId?: BytesLike | null,
      hopPath?: null
    ): ValidationStartedEventFilter;
    ValidationStarted(
      transactionId?: BytesLike | null,
      hopPath?: null
    ): ValidationStartedEventFilter;
  };

  estimateGas: {
    activateEmergencyMode(
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    activeNodes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activeShardCount(overrides?: CallOverrides): Promise<BigNumber>;

    baseRewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    crossChainBonusRate(overrides?: CallOverrides): Promise<BigNumber>;

    deactivateEmergencyMode(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getNetworkHealth(overrides?: CallOverrides): Promise<BigNumber>;

    getNodeMetrics(node: string, overrides?: CallOverrides): Promise<BigNumber>;

    hostRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    networkConfig(overrides?: CallOverrides): Promise<BigNumber>;

    nodes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingValidations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    performanceBonusMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    registerNode(
      deviceFingerprint: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    shards(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    startHopValidation(
      transactionId: BytesLike,
      originChain: string,
      targetChain: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    submitHopProof(
      transactionId: BytesLike,
      hopIndex: BigNumberish,
      proof: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    totalNodes(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateNetworkConfig(
      newConfig: HypermeshNetworkManager.NetworkConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    validations(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activateEmergencyMode(
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    activeNodes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activeShardCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseRewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crossChainBonusRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deactivateEmergencyMode(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getNetworkHealth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNodeMetrics(
      node: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hostRewardPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    networkConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nodes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingValidations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performanceBonusMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerNode(
      deviceFingerprint: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    shards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startHopValidation(
      transactionId: BytesLike,
      originChain: string,
      targetChain: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    submitHopProof(
      transactionId: BytesLike,
      hopIndex: BigNumberish,
      proof: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    totalNodes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateNetworkConfig(
      newConfig: HypermeshNetworkManager.NetworkConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    validations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
