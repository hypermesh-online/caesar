/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace HostRewardDistributor {
  export type RewardConfigStruct = {
    baseRewardPercentage: BigNumberish;
    performanceBonusMax: BigNumberish;
    crossChainBonusRate: BigNumberish;
    networkUtilityBonusRate: BigNumberish;
    minimumRoutingThreshold: BigNumberish;
    rewardDecayRate: BigNumberish;
    maxRewardAccumulation: BigNumberish;
    stakingRequirementEnabled: boolean;
  };

  export type RewardConfigStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    baseRewardPercentage: BigNumber;
    performanceBonusMax: BigNumber;
    crossChainBonusRate: BigNumber;
    networkUtilityBonusRate: BigNumber;
    minimumRoutingThreshold: BigNumber;
    rewardDecayRate: BigNumber;
    maxRewardAccumulation: BigNumber;
    stakingRequirementEnabled: boolean;
  };
}

export interface HostRewardDistributorInterface extends utils.Interface {
  functions: {
    "activeHosts(uint256)": FunctionFragment;
    "addAuthorizedDistributor(address)": FunctionFragment;
    "authorizedDistributors(address)": FunctionFragment;
    "claimRewards()": FunctionFragment;
    "dailyRewardCap(address)": FunctionFragment;
    "distributeTransactionReward(bytes32,address,uint256,bool,uint256,bool)": FunctionFragment;
    "economicsOracle()": FunctionFragment;
    "emergencyWithdrawHost(address,string)": FunctionFragment;
    "fundRewardPool(uint256)": FunctionFragment;
    "getHostStatistics(address)": FunctionFragment;
    "getSystemRewardStatistics()": FunctionFragment;
    "hostRewards(address)": FunctionFragment;
    "lastActivityTimestamp(address)": FunctionFragment;
    "networkContributions(address)": FunctionFragment;
    "networkManager()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "processedTransactions(bytes32)": FunctionFragment;
    "recentDistributions(uint256)": FunctionFragment;
    "registerHost()": FunctionFragment;
    "removeAuthorizedDistributor(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardConfig()": FunctionFragment;
    "rewardDistributions(bytes32)": FunctionFragment;
    "rewardPool()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "setEmergencyWithdrawEnabled(bool)": FunctionFragment;
    "totalHosts()": FunctionFragment;
    "totalRewardsDistributed()": FunctionFragment;
    "totalTransactionsProcessed()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateNetworkContribution(address,uint256,uint256,uint256)": FunctionFragment;
    "updateRewardConfig((uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activeHosts"
      | "addAuthorizedDistributor"
      | "authorizedDistributors"
      | "claimRewards"
      | "dailyRewardCap"
      | "distributeTransactionReward"
      | "economicsOracle"
      | "emergencyWithdrawHost"
      | "fundRewardPool"
      | "getHostStatistics"
      | "getSystemRewardStatistics"
      | "hostRewards"
      | "lastActivityTimestamp"
      | "networkContributions"
      | "networkManager"
      | "owner"
      | "paused"
      | "processedTransactions"
      | "recentDistributions"
      | "registerHost"
      | "removeAuthorizedDistributor"
      | "renounceOwnership"
      | "rewardConfig"
      | "rewardDistributions"
      | "rewardPool"
      | "rewardToken"
      | "setEmergencyWithdrawEnabled"
      | "totalHosts"
      | "totalRewardsDistributed"
      | "totalTransactionsProcessed"
      | "transferOwnership"
      | "updateNetworkContribution"
      | "updateRewardConfig"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activeHosts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addAuthorizedDistributor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedDistributors",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dailyRewardCap",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeTransactionReward",
    values: [BytesLike, string, BigNumberish, boolean, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "economicsOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawHost",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "fundRewardPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHostStatistics",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSystemRewardStatistics",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hostRewards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lastActivityTimestamp",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "networkContributions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "networkManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processedTransactions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recentDistributions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerHost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedDistributor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardDistributions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyWithdrawEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalHosts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewardsDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTransactionsProcessed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNetworkContribution",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardConfig",
    values: [HostRewardDistributor.RewardConfigStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeHosts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAuthorizedDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedDistributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyRewardCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeTransactionReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "economicsOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawHost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHostStatistics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSystemRewardStatistics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hostRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastActivityTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "networkContributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "networkManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processedTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recentDistributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerHost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardDistributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyWithdrawEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalHosts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardsDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTransactionsProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNetworkContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardConfig",
    data: BytesLike
  ): Result;

  events: {
    "EmergencyWithdrawal(address,uint256,string)": EventFragment;
    "HostDeactivated(address,string)": EventFragment;
    "HostRegistered(address,uint256)": EventFragment;
    "NetworkContributionUpdated(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PerformanceMetricsUpdated(address,uint256,uint256)": EventFragment;
    "RewardClaimed(address,uint256,uint256)": EventFragment;
    "RewardDistributed(address,bytes32,uint256,uint256,string)": EventFragment;
    "RewardPoolUpdated(uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EmergencyWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HostDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HostRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NetworkContributionUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PerformanceMetricsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPoolUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface EmergencyWithdrawalEventObject {
  host: string;
  amount: BigNumber;
  reason: string;
}
export type EmergencyWithdrawalEvent = TypedEvent<
  [string, BigNumber, string],
  EmergencyWithdrawalEventObject
>;

export type EmergencyWithdrawalEventFilter =
  TypedEventFilter<EmergencyWithdrawalEvent>;

export interface HostDeactivatedEventObject {
  host: string;
  reason: string;
}
export type HostDeactivatedEvent = TypedEvent<
  [string, string],
  HostDeactivatedEventObject
>;

export type HostDeactivatedEventFilter = TypedEventFilter<HostDeactivatedEvent>;

export interface HostRegisteredEventObject {
  host: string;
  timestamp: BigNumber;
}
export type HostRegisteredEvent = TypedEvent<
  [string, BigNumber],
  HostRegisteredEventObject
>;

export type HostRegisteredEventFilter = TypedEventFilter<HostRegisteredEvent>;

export interface NetworkContributionUpdatedEventObject {
  host: string;
  contributionType: BigNumber;
  amount: BigNumber;
}
export type NetworkContributionUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  NetworkContributionUpdatedEventObject
>;

export type NetworkContributionUpdatedEventFilter =
  TypedEventFilter<NetworkContributionUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PerformanceMetricsUpdatedEventObject {
  host: string;
  successRate: BigNumber;
  avgLatency: BigNumber;
}
export type PerformanceMetricsUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PerformanceMetricsUpdatedEventObject
>;

export type PerformanceMetricsUpdatedEventFilter =
  TypedEventFilter<PerformanceMetricsUpdatedEvent>;

export interface RewardClaimedEventObject {
  host: string;
  amount: BigNumber;
  timestamp: BigNumber;
}
export type RewardClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RewardClaimedEventObject
>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export interface RewardDistributedEventObject {
  host: string;
  transactionId: string;
  baseReward: BigNumber;
  totalReward: BigNumber;
  reason: string;
}
export type RewardDistributedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string],
  RewardDistributedEventObject
>;

export type RewardDistributedEventFilter =
  TypedEventFilter<RewardDistributedEvent>;

export interface RewardPoolUpdatedEventObject {
  newPoolSize: BigNumber;
  reserveAmount: BigNumber;
}
export type RewardPoolUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  RewardPoolUpdatedEventObject
>;

export type RewardPoolUpdatedEventFilter =
  TypedEventFilter<RewardPoolUpdatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface HostRewardDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HostRewardDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeHosts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addAuthorizedDistributor(
      distributor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    authorizedDistributors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claimRewards(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    dailyRewardCap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    distributeTransactionReward(
      transactionId: BytesLike,
      host: string,
      transactionFee: BigNumberish,
      isCrossChain: boolean,
      actualLatency: BigNumberish,
      success: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    economicsOracle(overrides?: CallOverrides): Promise<[string]>;

    emergencyWithdrawHost(
      host: string,
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    fundRewardPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getHostStatistics(
      host: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        totalEarned: BigNumber;
        pendingRewards: BigNumber;
        successRate: BigNumber;
        averageLatency: BigNumber;
        reputationScore: BigNumber;
        totalRouted: BigNumber;
        crossChainTransactions: BigNumber;
        isActive: boolean;
      }
    >;

    getSystemRewardStatistics(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalPoolSize: BigNumber;
        totalDistributed: BigNumber;
        totalPending: BigNumber;
        totalActiveHosts: BigNumber;
        systemTransactionsProcessed: BigNumber;
        averageRewardPerTransaction: BigNumber;
      }
    >;

    hostRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        hostAddress: string;
        totalEarned: BigNumber;
        totalRouted: BigNumber;
        successfulTransactions: BigNumber;
        failedTransactions: BigNumber;
        totalLatencySeconds: BigNumber;
        crossChainTransactions: BigNumber;
        lastRewardClaim: BigNumber;
        pendingRewards: BigNumber;
        reputationScore: BigNumber;
        isActive: boolean;
      }
    >;

    lastActivityTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    networkContributions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidityProvided: BigNumber;
        uptimeSeconds: BigNumber;
        networkStabilizationActions: BigNumber;
        crossChainBridgeVolume: BigNumber;
        lastContributionUpdate: BigNumber;
      }
    >;

    networkManager(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    processedTransactions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    recentDistributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    registerHost(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeAuthorizedDistributor(
      distributor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rewardConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        baseRewardPercentage: BigNumber;
        performanceBonusMax: BigNumber;
        crossChainBonusRate: BigNumber;
        networkUtilityBonusRate: BigNumber;
        minimumRoutingThreshold: BigNumber;
        rewardDecayRate: BigNumber;
        maxRewardAccumulation: BigNumber;
        stakingRequirementEnabled: boolean;
      }
    >;

    rewardDistributions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        transactionId: string;
        host: string;
        baseReward: BigNumber;
        performanceBonus: BigNumber;
        crossChainBonus: BigNumber;
        networkUtilityBonus: BigNumber;
        totalReward: BigNumber;
        timestamp: BigNumber;
        reason: string;
      }
    >;

    rewardPool(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        totalPoolSize: BigNumber;
        distributedRewards: BigNumber;
        pendingDistributions: BigNumber;
        reserveAmount: BigNumber;
        lastPoolUpdate: BigNumber;
        emergencyWithdrawEnabled: boolean;
      }
    >;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    setEmergencyWithdrawEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    totalHosts(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRewardsDistributed(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalTransactionsProcessed(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateNetworkContribution(
      host: string,
      liquidityProvided: BigNumberish,
      uptimeSeconds: BigNumberish,
      stabilizationActions: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateRewardConfig(
      newConfig: HostRewardDistributor.RewardConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  activeHosts(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  addAuthorizedDistributor(
    distributor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  authorizedDistributors(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimRewards(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  dailyRewardCap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  distributeTransactionReward(
    transactionId: BytesLike,
    host: string,
    transactionFee: BigNumberish,
    isCrossChain: boolean,
    actualLatency: BigNumberish,
    success: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  economicsOracle(overrides?: CallOverrides): Promise<string>;

  emergencyWithdrawHost(
    host: string,
    reason: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  fundRewardPool(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getHostStatistics(
    host: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      totalEarned: BigNumber;
      pendingRewards: BigNumber;
      successRate: BigNumber;
      averageLatency: BigNumber;
      reputationScore: BigNumber;
      totalRouted: BigNumber;
      crossChainTransactions: BigNumber;
      isActive: boolean;
    }
  >;

  getSystemRewardStatistics(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalPoolSize: BigNumber;
      totalDistributed: BigNumber;
      totalPending: BigNumber;
      totalActiveHosts: BigNumber;
      systemTransactionsProcessed: BigNumber;
      averageRewardPerTransaction: BigNumber;
    }
  >;

  hostRewards(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      hostAddress: string;
      totalEarned: BigNumber;
      totalRouted: BigNumber;
      successfulTransactions: BigNumber;
      failedTransactions: BigNumber;
      totalLatencySeconds: BigNumber;
      crossChainTransactions: BigNumber;
      lastRewardClaim: BigNumber;
      pendingRewards: BigNumber;
      reputationScore: BigNumber;
      isActive: boolean;
    }
  >;

  lastActivityTimestamp(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  networkContributions(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      liquidityProvided: BigNumber;
      uptimeSeconds: BigNumber;
      networkStabilizationActions: BigNumber;
      crossChainBridgeVolume: BigNumber;
      lastContributionUpdate: BigNumber;
    }
  >;

  networkManager(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  processedTransactions(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  recentDistributions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  registerHost(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeAuthorizedDistributor(
    distributor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rewardConfig(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      baseRewardPercentage: BigNumber;
      performanceBonusMax: BigNumber;
      crossChainBonusRate: BigNumber;
      networkUtilityBonusRate: BigNumber;
      minimumRoutingThreshold: BigNumber;
      rewardDecayRate: BigNumber;
      maxRewardAccumulation: BigNumber;
      stakingRequirementEnabled: boolean;
    }
  >;

  rewardDistributions(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      transactionId: string;
      host: string;
      baseReward: BigNumber;
      performanceBonus: BigNumber;
      crossChainBonus: BigNumber;
      networkUtilityBonus: BigNumber;
      totalReward: BigNumber;
      timestamp: BigNumber;
      reason: string;
    }
  >;

  rewardPool(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      totalPoolSize: BigNumber;
      distributedRewards: BigNumber;
      pendingDistributions: BigNumber;
      reserveAmount: BigNumber;
      lastPoolUpdate: BigNumber;
      emergencyWithdrawEnabled: boolean;
    }
  >;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  setEmergencyWithdrawEnabled(
    enabled: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  totalHosts(overrides?: CallOverrides): Promise<BigNumber>;

  totalRewardsDistributed(overrides?: CallOverrides): Promise<BigNumber>;

  totalTransactionsProcessed(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateNetworkContribution(
    host: string,
    liquidityProvided: BigNumberish,
    uptimeSeconds: BigNumberish,
    stabilizationActions: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateRewardConfig(
    newConfig: HostRewardDistributor.RewardConfigStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    activeHosts(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    addAuthorizedDistributor(
      distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizedDistributors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimRewards(overrides?: CallOverrides): Promise<void>;

    dailyRewardCap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    distributeTransactionReward(
      transactionId: BytesLike,
      host: string,
      transactionFee: BigNumberish,
      isCrossChain: boolean,
      actualLatency: BigNumberish,
      success: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    economicsOracle(overrides?: CallOverrides): Promise<string>;

    emergencyWithdrawHost(
      host: string,
      reason: string,
      overrides?: CallOverrides
    ): Promise<void>;

    fundRewardPool(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getHostStatistics(
      host: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        totalEarned: BigNumber;
        pendingRewards: BigNumber;
        successRate: BigNumber;
        averageLatency: BigNumber;
        reputationScore: BigNumber;
        totalRouted: BigNumber;
        crossChainTransactions: BigNumber;
        isActive: boolean;
      }
    >;

    getSystemRewardStatistics(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalPoolSize: BigNumber;
        totalDistributed: BigNumber;
        totalPending: BigNumber;
        totalActiveHosts: BigNumber;
        systemTransactionsProcessed: BigNumber;
        averageRewardPerTransaction: BigNumber;
      }
    >;

    hostRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        hostAddress: string;
        totalEarned: BigNumber;
        totalRouted: BigNumber;
        successfulTransactions: BigNumber;
        failedTransactions: BigNumber;
        totalLatencySeconds: BigNumber;
        crossChainTransactions: BigNumber;
        lastRewardClaim: BigNumber;
        pendingRewards: BigNumber;
        reputationScore: BigNumber;
        isActive: boolean;
      }
    >;

    lastActivityTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    networkContributions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidityProvided: BigNumber;
        uptimeSeconds: BigNumber;
        networkStabilizationActions: BigNumber;
        crossChainBridgeVolume: BigNumber;
        lastContributionUpdate: BigNumber;
      }
    >;

    networkManager(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    processedTransactions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    recentDistributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    registerHost(overrides?: CallOverrides): Promise<void>;

    removeAuthorizedDistributor(
      distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        baseRewardPercentage: BigNumber;
        performanceBonusMax: BigNumber;
        crossChainBonusRate: BigNumber;
        networkUtilityBonusRate: BigNumber;
        minimumRoutingThreshold: BigNumber;
        rewardDecayRate: BigNumber;
        maxRewardAccumulation: BigNumber;
        stakingRequirementEnabled: boolean;
      }
    >;

    rewardDistributions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        transactionId: string;
        host: string;
        baseReward: BigNumber;
        performanceBonus: BigNumber;
        crossChainBonus: BigNumber;
        networkUtilityBonus: BigNumber;
        totalReward: BigNumber;
        timestamp: BigNumber;
        reason: string;
      }
    >;

    rewardPool(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        totalPoolSize: BigNumber;
        distributedRewards: BigNumber;
        pendingDistributions: BigNumber;
        reserveAmount: BigNumber;
        lastPoolUpdate: BigNumber;
        emergencyWithdrawEnabled: boolean;
      }
    >;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    setEmergencyWithdrawEnabled(
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    totalHosts(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewardsDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    totalTransactionsProcessed(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateNetworkContribution(
      host: string,
      liquidityProvided: BigNumberish,
      uptimeSeconds: BigNumberish,
      stabilizationActions: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewardConfig(
      newConfig: HostRewardDistributor.RewardConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EmergencyWithdrawal(address,uint256,string)"(
      host?: string | null,
      amount?: null,
      reason?: null
    ): EmergencyWithdrawalEventFilter;
    EmergencyWithdrawal(
      host?: string | null,
      amount?: null,
      reason?: null
    ): EmergencyWithdrawalEventFilter;

    "HostDeactivated(address,string)"(
      host?: string | null,
      reason?: null
    ): HostDeactivatedEventFilter;
    HostDeactivated(
      host?: string | null,
      reason?: null
    ): HostDeactivatedEventFilter;

    "HostRegistered(address,uint256)"(
      host?: string | null,
      timestamp?: null
    ): HostRegisteredEventFilter;
    HostRegistered(
      host?: string | null,
      timestamp?: null
    ): HostRegisteredEventFilter;

    "NetworkContributionUpdated(address,uint256,uint256)"(
      host?: string | null,
      contributionType?: null,
      amount?: null
    ): NetworkContributionUpdatedEventFilter;
    NetworkContributionUpdated(
      host?: string | null,
      contributionType?: null,
      amount?: null
    ): NetworkContributionUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PerformanceMetricsUpdated(address,uint256,uint256)"(
      host?: string | null,
      successRate?: null,
      avgLatency?: null
    ): PerformanceMetricsUpdatedEventFilter;
    PerformanceMetricsUpdated(
      host?: string | null,
      successRate?: null,
      avgLatency?: null
    ): PerformanceMetricsUpdatedEventFilter;

    "RewardClaimed(address,uint256,uint256)"(
      host?: string | null,
      amount?: null,
      timestamp?: null
    ): RewardClaimedEventFilter;
    RewardClaimed(
      host?: string | null,
      amount?: null,
      timestamp?: null
    ): RewardClaimedEventFilter;

    "RewardDistributed(address,bytes32,uint256,uint256,string)"(
      host?: string | null,
      transactionId?: BytesLike | null,
      baseReward?: null,
      totalReward?: null,
      reason?: null
    ): RewardDistributedEventFilter;
    RewardDistributed(
      host?: string | null,
      transactionId?: BytesLike | null,
      baseReward?: null,
      totalReward?: null,
      reason?: null
    ): RewardDistributedEventFilter;

    "RewardPoolUpdated(uint256,uint256)"(
      newPoolSize?: null,
      reserveAmount?: null
    ): RewardPoolUpdatedEventFilter;
    RewardPoolUpdated(
      newPoolSize?: null,
      reserveAmount?: null
    ): RewardPoolUpdatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    activeHosts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addAuthorizedDistributor(
      distributor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    authorizedDistributors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    dailyRewardCap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    distributeTransactionReward(
      transactionId: BytesLike,
      host: string,
      transactionFee: BigNumberish,
      isCrossChain: boolean,
      actualLatency: BigNumberish,
      success: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    economicsOracle(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdrawHost(
      host: string,
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    fundRewardPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getHostStatistics(
      host: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSystemRewardStatistics(overrides?: CallOverrides): Promise<BigNumber>;

    hostRewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastActivityTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    networkContributions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    networkManager(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    processedTransactions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recentDistributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerHost(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    removeAuthorizedDistributor(
      distributor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rewardConfig(overrides?: CallOverrides): Promise<BigNumber>;

    rewardDistributions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPool(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    setEmergencyWithdrawEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    totalHosts(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewardsDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    totalTransactionsProcessed(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateNetworkContribution(
      host: string,
      liquidityProvided: BigNumberish,
      uptimeSeconds: BigNumberish,
      stabilizationActions: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateRewardConfig(
      newConfig: HostRewardDistributor.RewardConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeHosts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAuthorizedDistributor(
      distributor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    authorizedDistributors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRewards(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    dailyRewardCap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distributeTransactionReward(
      transactionId: BytesLike,
      host: string,
      transactionFee: BigNumberish,
      isCrossChain: boolean,
      actualLatency: BigNumberish,
      success: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    economicsOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdrawHost(
      host: string,
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    fundRewardPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getHostStatistics(
      host: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSystemRewardStatistics(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hostRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastActivityTimestamp(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    networkContributions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    networkManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processedTransactions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recentDistributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerHost(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeAuthorizedDistributor(
      distributor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rewardConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardDistributions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setEmergencyWithdrawEnabled(
      enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    totalHosts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRewardsDistributed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalTransactionsProcessed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateNetworkContribution(
      host: string,
      liquidityProvided: BigNumberish,
      uptimeSeconds: BigNumberish,
      stabilizationActions: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateRewardConfig(
      newConfig: HostRewardDistributor.RewardConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
