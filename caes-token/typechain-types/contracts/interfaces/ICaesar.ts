/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export type SendParamStruct = {
  dstEid: BigNumberish;
  to: BytesLike;
  amountLD: BigNumberish;
  minAmountLD: BigNumberish;
  extraOptions: BytesLike;
  composeMsg: BytesLike;
  oftCmd: BytesLike;
};

export type SendParamStructOutput = [
  number,
  string,
  BigNumber,
  BigNumber,
  string,
  string,
  string
] & {
  dstEid: number;
  to: string;
  amountLD: BigNumber;
  minAmountLD: BigNumber;
  extraOptions: string;
  composeMsg: string;
  oftCmd: string;
};

export type MessagingFeeStruct = {
  nativeFee: BigNumberish;
  lzTokenFee: BigNumberish;
};

export type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
  nativeFee: BigNumber;
  lzTokenFee: BigNumber;
};

export type OFTLimitStruct = {
  minAmountLD: BigNumberish;
  maxAmountLD: BigNumberish;
};

export type OFTLimitStructOutput = [BigNumber, BigNumber] & {
  minAmountLD: BigNumber;
  maxAmountLD: BigNumber;
};

export type OFTFeeDetailStruct = {
  feeAmountLD: BigNumberish;
  description: string;
};

export type OFTFeeDetailStructOutput = [BigNumber, string] & {
  feeAmountLD: BigNumber;
  description: string;
};

export type OFTReceiptStruct = {
  amountSentLD: BigNumberish;
  amountReceivedLD: BigNumberish;
};

export type OFTReceiptStructOutput = [BigNumber, BigNumber] & {
  amountSentLD: BigNumber;
  amountReceivedLD: BigNumber;
};

export type MessagingReceiptStruct = {
  guid: BytesLike;
  nonce: BigNumberish;
  fee: MessagingFeeStruct;
};

export type MessagingReceiptStructOutput = [
  string,
  BigNumber,
  MessagingFeeStructOutput
] & { guid: string; nonce: BigNumber; fee: MessagingFeeStructOutput };

export declare namespace ICaesar {
  export type AccountInfoStruct = {
    balance: BigNumberish;
    lastActivity: BigNumberish;
    participationScore: BigNumberish;
    holdingStartTime: BigNumberish;
    isExempt: boolean;
  };

  export type AccountInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    balance: BigNumber;
    lastActivity: BigNumber;
    participationScore: BigNumber;
    holdingStartTime: BigNumber;
    isExempt: boolean;
  };

  export type AntiSpeculationConfigStruct = {
    maxHoldingPeriod: BigNumberish;
    penaltyRate: BigNumberish;
    rapidTradePenalty: BigNumberish;
    minTransactionGap: BigNumberish;
  };

  export type AntiSpeculationConfigStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    maxHoldingPeriod: BigNumber;
    penaltyRate: BigNumber;
    rapidTradePenalty: BigNumber;
    minTransactionGap: BigNumber;
  };

  export type DemurrageConfigStruct = {
    baseRate: BigNumberish;
    maxRate: BigNumberish;
    decayInterval: BigNumberish;
    stabilityThreshold: BigNumberish;
  };

  export type DemurrageConfigStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    baseRate: BigNumber;
    maxRate: BigNumber;
    decayInterval: BigNumber;
    stabilityThreshold: BigNumber;
  };
}

export interface ICaesarInterface extends utils.Interface {
  functions: {
    "advanceEpoch()": FunctionFragment;
    "applyDemurrage(address)": FunctionFragment;
    "approvalRequired()": FunctionFragment;
    "bridgeWithDecay((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)": FunctionFragment;
    "calculateDemurrage(address)": FunctionFragment;
    "calculateSpeculationPenalty(address)": FunctionFragment;
    "contributeToStabilityPool(uint256)": FunctionFragment;
    "getAccountInfo(address)": FunctionFragment;
    "getActiveParticipants()": FunctionFragment;
    "getCurrentDecayRate()": FunctionFragment;
    "getCurrentEpoch()": FunctionFragment;
    "getEpochDuration()": FunctionFragment;
    "getLiquidityRatio()": FunctionFragment;
    "getNetworkHealthIndex()": FunctionFragment;
    "getRebaseRatio()": FunctionFragment;
    "getStabilityPoolBalance()": FunctionFragment;
    "isAccountExempt(address)": FunctionFragment;
    "oftVersion()": FunctionFragment;
    "quoteBridgeWithDecay((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bool)": FunctionFragment;
    "quoteOFT((uint32,bytes32,uint256,uint256,bytes,bytes,bytes))": FunctionFragment;
    "quoteSend((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bool)": FunctionFragment;
    "rebase()": FunctionFragment;
    "send((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)": FunctionFragment;
    "setAccountExemption(address,bool)": FunctionFragment;
    "setAntiSpeculationConfig((uint256,uint256,uint256,uint256))": FunctionFragment;
    "setDemurrageConfig((uint256,uint256,uint256,uint256))": FunctionFragment;
    "sharedDecimals()": FunctionFragment;
    "shouldRebase()": FunctionFragment;
    "token()": FunctionFragment;
    "updateAccountActivity(address)": FunctionFragment;
    "updateParticipationScore(address,uint256)": FunctionFragment;
    "withdrawFromStabilityPool(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "advanceEpoch"
      | "applyDemurrage"
      | "approvalRequired"
      | "bridgeWithDecay"
      | "calculateDemurrage"
      | "calculateSpeculationPenalty"
      | "contributeToStabilityPool"
      | "getAccountInfo"
      | "getActiveParticipants"
      | "getCurrentDecayRate"
      | "getCurrentEpoch"
      | "getEpochDuration"
      | "getLiquidityRatio"
      | "getNetworkHealthIndex"
      | "getRebaseRatio"
      | "getStabilityPoolBalance"
      | "isAccountExempt"
      | "oftVersion"
      | "quoteBridgeWithDecay"
      | "quoteOFT"
      | "quoteSend"
      | "rebase"
      | "send"
      | "setAccountExemption"
      | "setAntiSpeculationConfig"
      | "setDemurrageConfig"
      | "sharedDecimals"
      | "shouldRebase"
      | "token"
      | "updateAccountActivity"
      | "updateParticipationScore"
      | "withdrawFromStabilityPool"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "advanceEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyDemurrage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approvalRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeWithDecay",
    values: [SendParamStruct, MessagingFeeStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateDemurrage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSpeculationPenalty",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "contributeToStabilityPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveParticipants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentDecayRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNetworkHealthIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRebaseRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStabilityPoolBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountExempt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "oftVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteBridgeWithDecay",
    values: [SendParamStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteOFT",
    values: [SendParamStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteSend",
    values: [SendParamStruct, boolean]
  ): string;
  encodeFunctionData(functionFragment: "rebase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [SendParamStruct, MessagingFeeStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountExemption",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAntiSpeculationConfig",
    values: [ICaesar.AntiSpeculationConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setDemurrageConfig",
    values: [ICaesar.DemurrageConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "sharedDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shouldRebase",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAccountActivity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateParticipationScore",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromStabilityPool",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "advanceEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyDemurrage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvalRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeWithDecay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateDemurrage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSpeculationPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributeToStabilityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDecayRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkHealthIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRebaseRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStabilityPoolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oftVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteBridgeWithDecay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quoteOFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quoteSend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAccountExemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAntiSpeculationConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDemurrageConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharedDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldRebase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAccountActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateParticipationScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromStabilityPool",
    data: BytesLike
  ): Result;

  events: {
    "AntiSpeculationPenalty(address,uint256,uint256)": EventFragment;
    "DemurrageApplied(address,uint256,uint256)": EventFragment;
    "OFTReceived(bytes32,uint32,address,uint256)": EventFragment;
    "OFTSent(bytes32,uint32,address,uint256,uint256)": EventFragment;
    "ParticipationScoreUpdate(address,uint256)": EventFragment;
    "RebaseOccurred(uint256,uint256,uint256)": EventFragment;
    "StabilityPoolContribution(uint256,uint256)": EventFragment;
    "TensorEpochUpdate(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AntiSpeculationPenalty"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DemurrageApplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OFTReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OFTSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParticipationScoreUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebaseOccurred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StabilityPoolContribution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TensorEpochUpdate"): EventFragment;
}

export interface AntiSpeculationPenaltyEventObject {
  account: string;
  penalty: BigNumber;
  timestamp: BigNumber;
}
export type AntiSpeculationPenaltyEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AntiSpeculationPenaltyEventObject
>;

export type AntiSpeculationPenaltyEventFilter =
  TypedEventFilter<AntiSpeculationPenaltyEvent>;

export interface DemurrageAppliedEventObject {
  account: string;
  amount: BigNumber;
  timestamp: BigNumber;
}
export type DemurrageAppliedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DemurrageAppliedEventObject
>;

export type DemurrageAppliedEventFilter =
  TypedEventFilter<DemurrageAppliedEvent>;

export interface OFTReceivedEventObject {
  guid: string;
  srcEid: number;
  toAddress: string;
  amountReceivedLD: BigNumber;
}
export type OFTReceivedEvent = TypedEvent<
  [string, number, string, BigNumber],
  OFTReceivedEventObject
>;

export type OFTReceivedEventFilter = TypedEventFilter<OFTReceivedEvent>;

export interface OFTSentEventObject {
  guid: string;
  dstEid: number;
  fromAddress: string;
  amountSentLD: BigNumber;
  amountReceivedLD: BigNumber;
}
export type OFTSentEvent = TypedEvent<
  [string, number, string, BigNumber, BigNumber],
  OFTSentEventObject
>;

export type OFTSentEventFilter = TypedEventFilter<OFTSentEvent>;

export interface ParticipationScoreUpdateEventObject {
  account: string;
  score: BigNumber;
}
export type ParticipationScoreUpdateEvent = TypedEvent<
  [string, BigNumber],
  ParticipationScoreUpdateEventObject
>;

export type ParticipationScoreUpdateEventFilter =
  TypedEventFilter<ParticipationScoreUpdateEvent>;

export interface RebaseOccurredEventObject {
  epoch: BigNumber;
  rebaseRatio: BigNumber;
  newTotalSupply: BigNumber;
}
export type RebaseOccurredEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  RebaseOccurredEventObject
>;

export type RebaseOccurredEventFilter = TypedEventFilter<RebaseOccurredEvent>;

export interface StabilityPoolContributionEventObject {
  amount: BigNumber;
  timestamp: BigNumber;
}
export type StabilityPoolContributionEvent = TypedEvent<
  [BigNumber, BigNumber],
  StabilityPoolContributionEventObject
>;

export type StabilityPoolContributionEventFilter =
  TypedEventFilter<StabilityPoolContributionEvent>;

export interface TensorEpochUpdateEventObject {
  epoch: BigNumber;
  timestamp: BigNumber;
}
export type TensorEpochUpdateEvent = TypedEvent<
  [BigNumber, BigNumber],
  TensorEpochUpdateEventObject
>;

export type TensorEpochUpdateEventFilter =
  TypedEventFilter<TensorEpochUpdateEvent>;

export interface ICaesar extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICaesarInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    advanceEpoch(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    applyDemurrage(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    approvalRequired(overrides?: CallOverrides): Promise<[boolean]>;

    bridgeWithDecay(
      sendParam: SendParamStruct,
      fee: MessagingFeeStruct,
      refundAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    calculateDemurrage(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { demurrageAmount: BigNumber }>;

    calculateSpeculationPenalty(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { penalty: BigNumber }>;

    contributeToStabilityPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAccountInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [ICaesar.AccountInfoStructOutput] & {
        info: ICaesar.AccountInfoStructOutput;
      }
    >;

    getActiveParticipants(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { activeCount: BigNumber }>;

    getCurrentDecayRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { decayRate: BigNumber }>;

    getCurrentEpoch(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { epoch: BigNumber }>;

    getEpochDuration(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { duration: BigNumber }>;

    getLiquidityRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidityRatio: BigNumber }>;

    getNetworkHealthIndex(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { healthIndex: BigNumber }>;

    getRebaseRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ratio: BigNumber }>;

    getStabilityPoolBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    isAccountExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { exempt: boolean }>;

    oftVersion(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { interfaceId: string; version: BigNumber }
    >;

    quoteBridgeWithDecay(
      sendParam: SendParamStruct,
      payInLzToken: boolean,
      overrides?: CallOverrides
    ): Promise<
      [MessagingFeeStructOutput] & { messagingFee: MessagingFeeStructOutput }
    >;

    quoteOFT(
      _sendParam: SendParamStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        OFTLimitStructOutput,
        OFTFeeDetailStructOutput[],
        OFTReceiptStructOutput
      ] & { oftFeeDetails: OFTFeeDetailStructOutput[] }
    >;

    quoteSend(
      _sendParam: SendParamStruct,
      _payInLzToken: boolean,
      overrides?: CallOverrides
    ): Promise<[MessagingFeeStructOutput]>;

    rebase(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    send(
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAccountExemption(
      account: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAntiSpeculationConfig(
      config: ICaesar.AntiSpeculationConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDemurrageConfig(
      config: ICaesar.DemurrageConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sharedDecimals(overrides?: CallOverrides): Promise<[number]>;

    shouldRebase(
      overrides?: CallOverrides
    ): Promise<[boolean] & { shouldRebase: boolean }>;

    token(overrides?: CallOverrides): Promise<[string]>;

    updateAccountActivity(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateParticipationScore(
      account: string,
      transactionVolume: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawFromStabilityPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  advanceEpoch(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  applyDemurrage(
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  approvalRequired(overrides?: CallOverrides): Promise<boolean>;

  bridgeWithDecay(
    sendParam: SendParamStruct,
    fee: MessagingFeeStruct,
    refundAddress: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  calculateDemurrage(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSpeculationPenalty(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  contributeToStabilityPool(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAccountInfo(
    account: string,
    overrides?: CallOverrides
  ): Promise<ICaesar.AccountInfoStructOutput>;

  getActiveParticipants(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentDecayRate(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  getEpochDuration(overrides?: CallOverrides): Promise<BigNumber>;

  getLiquidityRatio(overrides?: CallOverrides): Promise<BigNumber>;

  getNetworkHealthIndex(overrides?: CallOverrides): Promise<BigNumber>;

  getRebaseRatio(overrides?: CallOverrides): Promise<BigNumber>;

  getStabilityPoolBalance(overrides?: CallOverrides): Promise<BigNumber>;

  isAccountExempt(account: string, overrides?: CallOverrides): Promise<boolean>;

  oftVersion(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { interfaceId: string; version: BigNumber }>;

  quoteBridgeWithDecay(
    sendParam: SendParamStruct,
    payInLzToken: boolean,
    overrides?: CallOverrides
  ): Promise<MessagingFeeStructOutput>;

  quoteOFT(
    _sendParam: SendParamStruct,
    overrides?: CallOverrides
  ): Promise<
    [
      OFTLimitStructOutput,
      OFTFeeDetailStructOutput[],
      OFTReceiptStructOutput
    ] & { oftFeeDetails: OFTFeeDetailStructOutput[] }
  >;

  quoteSend(
    _sendParam: SendParamStruct,
    _payInLzToken: boolean,
    overrides?: CallOverrides
  ): Promise<MessagingFeeStructOutput>;

  rebase(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  send(
    _sendParam: SendParamStruct,
    _fee: MessagingFeeStruct,
    _refundAddress: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAccountExemption(
    account: string,
    exempt: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAntiSpeculationConfig(
    config: ICaesar.AntiSpeculationConfigStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDemurrageConfig(
    config: ICaesar.DemurrageConfigStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sharedDecimals(overrides?: CallOverrides): Promise<number>;

  shouldRebase(overrides?: CallOverrides): Promise<boolean>;

  token(overrides?: CallOverrides): Promise<string>;

  updateAccountActivity(
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateParticipationScore(
    account: string,
    transactionVolume: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawFromStabilityPool(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    advanceEpoch(overrides?: CallOverrides): Promise<void>;

    applyDemurrage(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvalRequired(overrides?: CallOverrides): Promise<boolean>;

    bridgeWithDecay(
      sendParam: SendParamStruct,
      fee: MessagingFeeStruct,
      refundAddress: string,
      overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>;

    calculateDemurrage(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSpeculationPenalty(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contributeToStabilityPool(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<ICaesar.AccountInfoStructOutput>;

    getActiveParticipants(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentDecayRate(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getNetworkHealthIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getRebaseRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getStabilityPoolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    isAccountExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    oftVersion(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { interfaceId: string; version: BigNumber }
    >;

    quoteBridgeWithDecay(
      sendParam: SendParamStruct,
      payInLzToken: boolean,
      overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>;

    quoteOFT(
      _sendParam: SendParamStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        OFTLimitStructOutput,
        OFTFeeDetailStructOutput[],
        OFTReceiptStructOutput
      ] & { oftFeeDetails: OFTFeeDetailStructOutput[] }
    >;

    quoteSend(
      _sendParam: SendParamStruct,
      _payInLzToken: boolean,
      overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>;

    rebase(overrides?: CallOverrides): Promise<BigNumber>;

    send(
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: string,
      overrides?: CallOverrides
    ): Promise<[MessagingReceiptStructOutput, OFTReceiptStructOutput]>;

    setAccountExemption(
      account: string,
      exempt: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setAntiSpeculationConfig(
      config: ICaesar.AntiSpeculationConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setDemurrageConfig(
      config: ICaesar.DemurrageConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    sharedDecimals(overrides?: CallOverrides): Promise<number>;

    shouldRebase(overrides?: CallOverrides): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;

    updateAccountActivity(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateParticipationScore(
      account: string,
      transactionVolume: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromStabilityPool(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AntiSpeculationPenalty(address,uint256,uint256)"(
      account?: string | null,
      penalty?: null,
      timestamp?: null
    ): AntiSpeculationPenaltyEventFilter;
    AntiSpeculationPenalty(
      account?: string | null,
      penalty?: null,
      timestamp?: null
    ): AntiSpeculationPenaltyEventFilter;

    "DemurrageApplied(address,uint256,uint256)"(
      account?: string | null,
      amount?: null,
      timestamp?: null
    ): DemurrageAppliedEventFilter;
    DemurrageApplied(
      account?: string | null,
      amount?: null,
      timestamp?: null
    ): DemurrageAppliedEventFilter;

    "OFTReceived(bytes32,uint32,address,uint256)"(
      guid?: BytesLike | null,
      srcEid?: null,
      toAddress?: string | null,
      amountReceivedLD?: null
    ): OFTReceivedEventFilter;
    OFTReceived(
      guid?: BytesLike | null,
      srcEid?: null,
      toAddress?: string | null,
      amountReceivedLD?: null
    ): OFTReceivedEventFilter;

    "OFTSent(bytes32,uint32,address,uint256,uint256)"(
      guid?: BytesLike | null,
      dstEid?: null,
      fromAddress?: string | null,
      amountSentLD?: null,
      amountReceivedLD?: null
    ): OFTSentEventFilter;
    OFTSent(
      guid?: BytesLike | null,
      dstEid?: null,
      fromAddress?: string | null,
      amountSentLD?: null,
      amountReceivedLD?: null
    ): OFTSentEventFilter;

    "ParticipationScoreUpdate(address,uint256)"(
      account?: string | null,
      score?: null
    ): ParticipationScoreUpdateEventFilter;
    ParticipationScoreUpdate(
      account?: string | null,
      score?: null
    ): ParticipationScoreUpdateEventFilter;

    "RebaseOccurred(uint256,uint256,uint256)"(
      epoch?: BigNumberish | null,
      rebaseRatio?: null,
      newTotalSupply?: null
    ): RebaseOccurredEventFilter;
    RebaseOccurred(
      epoch?: BigNumberish | null,
      rebaseRatio?: null,
      newTotalSupply?: null
    ): RebaseOccurredEventFilter;

    "StabilityPoolContribution(uint256,uint256)"(
      amount?: null,
      timestamp?: null
    ): StabilityPoolContributionEventFilter;
    StabilityPoolContribution(
      amount?: null,
      timestamp?: null
    ): StabilityPoolContributionEventFilter;

    "TensorEpochUpdate(uint256,uint256)"(
      epoch?: BigNumberish | null,
      timestamp?: null
    ): TensorEpochUpdateEventFilter;
    TensorEpochUpdate(
      epoch?: BigNumberish | null,
      timestamp?: null
    ): TensorEpochUpdateEventFilter;
  };

  estimateGas: {
    advanceEpoch(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    applyDemurrage(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    approvalRequired(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeWithDecay(
      sendParam: SendParamStruct,
      fee: MessagingFeeStruct,
      refundAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    calculateDemurrage(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSpeculationPenalty(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contributeToStabilityPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAccountInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveParticipants(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentDecayRate(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getEpochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getNetworkHealthIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getRebaseRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getStabilityPoolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    isAccountExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oftVersion(overrides?: CallOverrides): Promise<BigNumber>;

    quoteBridgeWithDecay(
      sendParam: SendParamStruct,
      payInLzToken: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteOFT(
      _sendParam: SendParamStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteSend(
      _sendParam: SendParamStruct,
      _payInLzToken: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebase(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    send(
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    setAccountExemption(
      account: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAntiSpeculationConfig(
      config: ICaesar.AntiSpeculationConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDemurrageConfig(
      config: ICaesar.DemurrageConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sharedDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    shouldRebase(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    updateAccountActivity(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateParticipationScore(
      account: string,
      transactionVolume: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawFromStabilityPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    advanceEpoch(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    applyDemurrage(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    approvalRequired(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridgeWithDecay(
      sendParam: SendParamStruct,
      fee: MessagingFeeStruct,
      refundAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    calculateDemurrage(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSpeculationPenalty(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contributeToStabilityPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAccountInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveParticipants(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentDecayRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEpochDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLiquidityRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNetworkHealthIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRebaseRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStabilityPoolBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAccountExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oftVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteBridgeWithDecay(
      sendParam: SendParamStruct,
      payInLzToken: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteOFT(
      _sendParam: SendParamStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteSend(
      _sendParam: SendParamStruct,
      _payInLzToken: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebase(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    send(
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAccountExemption(
      account: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAntiSpeculationConfig(
      config: ICaesar.AntiSpeculationConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDemurrageConfig(
      config: ICaesar.DemurrageConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sharedDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shouldRebase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateAccountActivity(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateParticipationScore(
      account: string,
      transactionVolume: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawFromStabilityPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
