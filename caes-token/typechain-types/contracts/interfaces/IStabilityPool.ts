/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace IStabilityPool {
  export type AMMInterventionStruct = {
    executed: boolean;
    tradeType: BigNumberish;
    amountIn: BigNumberish;
    amountOut: BigNumberish;
    timestamp: BigNumberish;
  };

  export type AMMInterventionStructOutput = [
    boolean,
    number,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    executed: boolean;
    tradeType: number;
    amountIn: BigNumber;
    amountOut: BigNumber;
    timestamp: BigNumber;
  };

  export type ReserveStateStruct = {
    balance: BigNumberish;
    lastUpdate: BigNumberish;
    isActive: boolean;
  };

  export type ReserveStateStructOutput = [BigNumber, BigNumber, boolean] & {
    balance: BigNumber;
    lastUpdate: BigNumber;
    isActive: boolean;
  };

  export type PoolCompositionStruct = {
    totalBalance: BigNumberish;
    penaltyFunds: BigNumberish;
    demurrageFunds: BigNumberish;
    reserveFunds: BigNumberish;
    emergencyFunds: BigNumberish;
  };

  export type PoolCompositionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    totalBalance: BigNumber;
    penaltyFunds: BigNumber;
    demurrageFunds: BigNumber;
    reserveFunds: BigNumber;
    emergencyFunds: BigNumber;
  };

  export type StabilityMetricsStruct = {
    stabilityIndex: BigNumberish;
    reserveRatio: BigNumberish;
    interventionCount: BigNumberish;
    lastUpdate: BigNumberish;
    emergencyMode: boolean;
  };

  export type StabilityMetricsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    stabilityIndex: BigNumber;
    reserveRatio: BigNumber;
    interventionCount: BigNumber;
    lastUpdate: BigNumber;
    emergencyMode: boolean;
  };

  export type RebalanceOperationStruct = {
    executed: boolean;
    sourceChain: BigNumberish;
    targetChain: BigNumberish;
    amount: BigNumberish;
    timestamp: BigNumberish;
  };

  export type RebalanceOperationStructOutput = [
    boolean,
    number,
    number,
    BigNumber,
    BigNumber
  ] & {
    executed: boolean;
    sourceChain: number;
    targetChain: number;
    amount: BigNumber;
    timestamp: BigNumber;
  };
}

export interface IStabilityPoolInterface extends utils.Interface {
  functions: {
    "addEmergencyOperator(address)": FunctionFragment;
    "addSupportedChain(uint32,address)": FunctionFragment;
    "calculateReserveRatio()": FunctionFragment;
    "contributeReserves(uint256)": FunctionFragment;
    "executeAMMIntervention(uint256,uint256)": FunctionFragment;
    "executeEmergencyIntervention(string,uint8)": FunctionFragment;
    "getChainReserveState(uint32)": FunctionFragment;
    "getPoolComposition()": FunctionFragment;
    "getStabilityMetrics()": FunctionFragment;
    "pause()": FunctionFragment;
    "rebalanceChainReserves(uint32)": FunctionFragment;
    "receiveDemurrage(uint256,address)": FunctionFragment;
    "receivePenalty(uint256,address)": FunctionFragment;
    "removeEmergencyOperator(address)": FunctionFragment;
    "removeSupportedChain(uint32)": FunctionFragment;
    "setAMMRouter(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addEmergencyOperator"
      | "addSupportedChain"
      | "calculateReserveRatio"
      | "contributeReserves"
      | "executeAMMIntervention"
      | "executeEmergencyIntervention"
      | "getChainReserveState"
      | "getPoolComposition"
      | "getStabilityMetrics"
      | "pause"
      | "rebalanceChainReserves"
      | "receiveDemurrage"
      | "receivePenalty"
      | "removeEmergencyOperator"
      | "removeSupportedChain"
      | "setAMMRouter"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addEmergencyOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSupportedChain",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateReserveRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributeReserves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeAMMIntervention",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeEmergencyIntervention",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainReserveState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolComposition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStabilityMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebalanceChainReserves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveDemurrage",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "receivePenalty",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeEmergencyOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSupportedChain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAMMRouter",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addEmergencyOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSupportedChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateReserveRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributeReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeAMMIntervention",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeEmergencyIntervention",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainReserveState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolComposition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStabilityMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceChainReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveDemurrage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receivePenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeEmergencyOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSupportedChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAMMRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "AMMTradeExecuted(bool,uint256,uint256)": EventFragment;
    "EmergencyIntervention(string,uint256)": EventFragment;
    "FundsReceived(uint8,uint256,address)": EventFragment;
    "ReserveRebalanced(uint32,uint256,bool)": EventFragment;
    "StabilityIndexUpdated(uint256,uint256)": EventFragment;
    "StabilityIntervention(uint8,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AMMTradeExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyIntervention"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveRebalanced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StabilityIndexUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StabilityIntervention"): EventFragment;
}

export interface AMMTradeExecutedEventObject {
  isBuy: boolean;
  amountIn: BigNumber;
  amountOut: BigNumber;
}
export type AMMTradeExecutedEvent = TypedEvent<
  [boolean, BigNumber, BigNumber],
  AMMTradeExecutedEventObject
>;

export type AMMTradeExecutedEventFilter =
  TypedEventFilter<AMMTradeExecutedEvent>;

export interface EmergencyInterventionEventObject {
  reason: string;
  amount: BigNumber;
}
export type EmergencyInterventionEvent = TypedEvent<
  [string, BigNumber],
  EmergencyInterventionEventObject
>;

export type EmergencyInterventionEventFilter =
  TypedEventFilter<EmergencyInterventionEvent>;

export interface FundsReceivedEventObject {
  fundType: number;
  amount: BigNumber;
  from: string;
}
export type FundsReceivedEvent = TypedEvent<
  [number, BigNumber, string],
  FundsReceivedEventObject
>;

export type FundsReceivedEventFilter = TypedEventFilter<FundsReceivedEvent>;

export interface ReserveRebalancedEventObject {
  chainId: number;
  amount: BigNumber;
  isAddition: boolean;
}
export type ReserveRebalancedEvent = TypedEvent<
  [number, BigNumber, boolean],
  ReserveRebalancedEventObject
>;

export type ReserveRebalancedEventFilter =
  TypedEventFilter<ReserveRebalancedEvent>;

export interface StabilityIndexUpdatedEventObject {
  oldIndex: BigNumber;
  newIndex: BigNumber;
}
export type StabilityIndexUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  StabilityIndexUpdatedEventObject
>;

export type StabilityIndexUpdatedEventFilter =
  TypedEventFilter<StabilityIndexUpdatedEvent>;

export interface StabilityInterventionEventObject {
  intervention: number;
  amount: BigNumber;
  newStability: BigNumber;
}
export type StabilityInterventionEvent = TypedEvent<
  [number, BigNumber, BigNumber],
  StabilityInterventionEventObject
>;

export type StabilityInterventionEventFilter =
  TypedEventFilter<StabilityInterventionEvent>;

export interface IStabilityPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStabilityPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addSupportedChain(
      chainId: BigNumberish,
      poolAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    calculateReserveRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ratio: BigNumber }>;

    contributeReserves(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    executeAMMIntervention(
      currentPrice: BigNumberish,
      targetPrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    executeEmergencyIntervention(
      reason: string,
      interventionType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getChainReserveState(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IStabilityPool.ReserveStateStructOutput] & {
        state: IStabilityPool.ReserveStateStructOutput;
      }
    >;

    getPoolComposition(
      overrides?: CallOverrides
    ): Promise<
      [IStabilityPool.PoolCompositionStructOutput] & {
        composition: IStabilityPool.PoolCompositionStructOutput;
      }
    >;

    getStabilityMetrics(
      overrides?: CallOverrides
    ): Promise<
      [IStabilityPool.StabilityMetricsStructOutput] & {
        metrics: IStabilityPool.StabilityMetricsStructOutput;
      }
    >;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rebalanceChainReserves(
      targetChain: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    receiveDemurrage(
      amount: BigNumberish,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    receivePenalty(
      amount: BigNumberish,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeSupportedChain(
      chainId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAMMRouter(
      ammRouter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addEmergencyOperator(
    operator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addSupportedChain(
    chainId: BigNumberish,
    poolAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  calculateReserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

  contributeReserves(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  executeAMMIntervention(
    currentPrice: BigNumberish,
    targetPrice: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  executeEmergencyIntervention(
    reason: string,
    interventionType: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getChainReserveState(
    chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IStabilityPool.ReserveStateStructOutput>;

  getPoolComposition(
    overrides?: CallOverrides
  ): Promise<IStabilityPool.PoolCompositionStructOutput>;

  getStabilityMetrics(
    overrides?: CallOverrides
  ): Promise<IStabilityPool.StabilityMetricsStructOutput>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rebalanceChainReserves(
    targetChain: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  receiveDemurrage(
    amount: BigNumberish,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  receivePenalty(
    amount: BigNumberish,
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeEmergencyOperator(
    operator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeSupportedChain(
    chainId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAMMRouter(
    ammRouter: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addEmergencyOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSupportedChain(
      chainId: BigNumberish,
      poolAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateReserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

    contributeReserves(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executeAMMIntervention(
      currentPrice: BigNumberish,
      targetPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IStabilityPool.AMMInterventionStructOutput>;

    executeEmergencyIntervention(
      reason: string,
      interventionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getChainReserveState(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IStabilityPool.ReserveStateStructOutput>;

    getPoolComposition(
      overrides?: CallOverrides
    ): Promise<IStabilityPool.PoolCompositionStructOutput>;

    getStabilityMetrics(
      overrides?: CallOverrides
    ): Promise<IStabilityPool.StabilityMetricsStructOutput>;

    pause(overrides?: CallOverrides): Promise<void>;

    rebalanceChainReserves(
      targetChain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IStabilityPool.RebalanceOperationStructOutput>;

    receiveDemurrage(
      amount: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    receivePenalty(
      amount: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeEmergencyOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSupportedChain(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAMMRouter(ammRouter: string, overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AMMTradeExecuted(bool,uint256,uint256)"(
      isBuy?: null,
      amountIn?: null,
      amountOut?: null
    ): AMMTradeExecutedEventFilter;
    AMMTradeExecuted(
      isBuy?: null,
      amountIn?: null,
      amountOut?: null
    ): AMMTradeExecutedEventFilter;

    "EmergencyIntervention(string,uint256)"(
      reason?: null,
      amount?: null
    ): EmergencyInterventionEventFilter;
    EmergencyIntervention(
      reason?: null,
      amount?: null
    ): EmergencyInterventionEventFilter;

    "FundsReceived(uint8,uint256,address)"(
      fundType?: null,
      amount?: null,
      from?: null
    ): FundsReceivedEventFilter;
    FundsReceived(
      fundType?: null,
      amount?: null,
      from?: null
    ): FundsReceivedEventFilter;

    "ReserveRebalanced(uint32,uint256,bool)"(
      chainId?: null,
      amount?: null,
      isAddition?: null
    ): ReserveRebalancedEventFilter;
    ReserveRebalanced(
      chainId?: null,
      amount?: null,
      isAddition?: null
    ): ReserveRebalancedEventFilter;

    "StabilityIndexUpdated(uint256,uint256)"(
      oldIndex?: null,
      newIndex?: null
    ): StabilityIndexUpdatedEventFilter;
    StabilityIndexUpdated(
      oldIndex?: null,
      newIndex?: null
    ): StabilityIndexUpdatedEventFilter;

    "StabilityIntervention(uint8,uint256,uint256)"(
      intervention?: null,
      amount?: null,
      newStability?: null
    ): StabilityInterventionEventFilter;
    StabilityIntervention(
      intervention?: null,
      amount?: null,
      newStability?: null
    ): StabilityInterventionEventFilter;
  };

  estimateGas: {
    addEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addSupportedChain(
      chainId: BigNumberish,
      poolAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    calculateReserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

    contributeReserves(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    executeAMMIntervention(
      currentPrice: BigNumberish,
      targetPrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    executeEmergencyIntervention(
      reason: string,
      interventionType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getChainReserveState(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolComposition(overrides?: CallOverrides): Promise<BigNumber>;

    getStabilityMetrics(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    rebalanceChainReserves(
      targetChain: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    receiveDemurrage(
      amount: BigNumberish,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    receivePenalty(
      amount: BigNumberish,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeSupportedChain(
      chainId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAMMRouter(
      ammRouter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    addEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addSupportedChain(
      chainId: BigNumberish,
      poolAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    calculateReserveRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contributeReserves(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    executeAMMIntervention(
      currentPrice: BigNumberish,
      targetPrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    executeEmergencyIntervention(
      reason: string,
      interventionType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getChainReserveState(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolComposition(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStabilityMetrics(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rebalanceChainReserves(
      targetChain: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    receiveDemurrage(
      amount: BigNumberish,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    receivePenalty(
      amount: BigNumberish,
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeSupportedChain(
      chainId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAMMRouter(
      ammRouter: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
