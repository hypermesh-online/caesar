/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface MockLZEndpointInterface extends utils.Interface {
  functions: {
    "defaultReceiveLibrary()": FunctionFragment;
    "defaultSendLibrary()": FunctionFragment;
    "isValidReceiveLibrary()": FunctionFragment;
    "owner()": FunctionFragment;
    "quote()": FunctionFragment;
    "send()": FunctionFragment;
    "setConfig()": FunctionFragment;
    "setDelegate()": FunctionFragment;
    "setReceiveLibrary()": FunctionFragment;
    "setSendLibrary()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "defaultReceiveLibrary"
      | "defaultSendLibrary"
      | "isValidReceiveLibrary"
      | "owner"
      | "quote"
      | "send"
      | "setConfig"
      | "setDelegate"
      | "setReceiveLibrary"
      | "setSendLibrary"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "defaultReceiveLibrary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultSendLibrary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidReceiveLibrary",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "quote", values?: undefined): string;
  encodeFunctionData(functionFragment: "send", values?: undefined): string;
  encodeFunctionData(functionFragment: "setConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDelegate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setReceiveLibrary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSendLibrary",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "defaultReceiveLibrary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultSendLibrary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidReceiveLibrary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReceiveLibrary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSendLibrary",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MockLZEndpoint extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockLZEndpointInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    defaultReceiveLibrary(overrides?: CallOverrides): Promise<[string]>;

    defaultSendLibrary(overrides?: CallOverrides): Promise<[string]>;

    isValidReceiveLibrary(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    quote(overrides?: CallOverrides): Promise<[BigNumber]>;

    send(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    setConfig(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDelegate(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setReceiveLibrary(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSendLibrary(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  defaultReceiveLibrary(overrides?: CallOverrides): Promise<string>;

  defaultSendLibrary(overrides?: CallOverrides): Promise<string>;

  isValidReceiveLibrary(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  quote(overrides?: CallOverrides): Promise<BigNumber>;

  send(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  setConfig(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDelegate(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setReceiveLibrary(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSendLibrary(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    defaultReceiveLibrary(overrides?: CallOverrides): Promise<string>;

    defaultSendLibrary(overrides?: CallOverrides): Promise<string>;

    isValidReceiveLibrary(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    quote(overrides?: CallOverrides): Promise<BigNumber>;

    send(overrides?: CallOverrides): Promise<void>;

    setConfig(overrides?: CallOverrides): Promise<void>;

    setDelegate(overrides?: CallOverrides): Promise<void>;

    setReceiveLibrary(overrides?: CallOverrides): Promise<void>;

    setSendLibrary(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    defaultReceiveLibrary(overrides?: CallOverrides): Promise<BigNumber>;

    defaultSendLibrary(overrides?: CallOverrides): Promise<BigNumber>;

    isValidReceiveLibrary(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    quote(overrides?: CallOverrides): Promise<BigNumber>;

    send(overrides?: PayableOverrides & { from?: string }): Promise<BigNumber>;

    setConfig(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setDelegate(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setReceiveLibrary(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSendLibrary(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    defaultReceiveLibrary(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultSendLibrary(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidReceiveLibrary(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quote(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    send(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setConfig(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDelegate(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setReceiveLibrary(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSendLibrary(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
