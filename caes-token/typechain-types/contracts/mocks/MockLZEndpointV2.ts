/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export type OriginStruct = {
  srcEid: BigNumberish;
  sender: BytesLike;
  nonce: BigNumberish;
};

export type OriginStructOutput = [number, string, BigNumber] & {
  srcEid: number;
  sender: string;
  nonce: BigNumber;
};

export type MessagingParamsStruct = {
  dstEid: BigNumberish;
  receiver: BytesLike;
  message: BytesLike;
  options: BytesLike;
  payInLzToken: boolean;
};

export type MessagingParamsStructOutput = [
  number,
  string,
  string,
  string,
  boolean
] & {
  dstEid: number;
  receiver: string;
  message: string;
  options: string;
  payInLzToken: boolean;
};

export type MessagingFeeStruct = {
  nativeFee: BigNumberish;
  lzTokenFee: BigNumberish;
};

export type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
  nativeFee: BigNumber;
  lzTokenFee: BigNumber;
};

export type SetConfigParamStruct = {
  eid: BigNumberish;
  configType: BigNumberish;
  config: BytesLike;
};

export type SetConfigParamStructOutput = [number, number, string] & {
  eid: number;
  configType: number;
  config: string;
};

export interface MockLZEndpointV2Interface extends utils.Interface {
  functions: {
    "clear(address,(uint32,bytes32,uint64),bytes32,bytes)": FunctionFragment;
    "delegates(address)": FunctionFragment;
    "eid()": FunctionFragment;
    "getConfig(address,address,uint32,uint32)": FunctionFragment;
    "getReceiveLibrary(address,uint32)": FunctionFragment;
    "getRegisteredLibraries()": FunctionFragment;
    "getSendLibrary(address,uint32)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "isDefaultSendLibrary(address,uint32)": FunctionFragment;
    "isRegisteredLibrary(address)": FunctionFragment;
    "lzToken()": FunctionFragment;
    "nativeToken()": FunctionFragment;
    "quote((uint32,bytes32,bytes,bytes,bool),address)": FunctionFragment;
    "receiveLibraryTimeout(address,uint32)": FunctionFragment;
    "registerLibrary(address)": FunctionFragment;
    "send((uint32,bytes32,bytes,bytes,bool),address)": FunctionFragment;
    "setConfig(address,address,(uint32,uint32,bytes)[])": FunctionFragment;
    "setDelegate(address)": FunctionFragment;
    "setLzToken(address)": FunctionFragment;
    "setReceiveLibrary(address,uint32,address,uint256)": FunctionFragment;
    "setReceiveLibraryTimeout(address,uint32,address,uint256)": FunctionFragment;
    "setSendLibrary(address,uint32,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "clear"
      | "delegates"
      | "eid"
      | "getConfig"
      | "getReceiveLibrary"
      | "getRegisteredLibraries"
      | "getSendLibrary"
      | "initialize"
      | "isDefaultSendLibrary"
      | "isRegisteredLibrary"
      | "lzToken"
      | "nativeToken"
      | "quote"
      | "receiveLibraryTimeout"
      | "registerLibrary"
      | "send"
      | "setConfig"
      | "setDelegate"
      | "setLzToken"
      | "setReceiveLibrary"
      | "setReceiveLibraryTimeout"
      | "setSendLibrary"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "clear",
    values: [string, OriginStruct, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "delegates", values: [string]): string;
  encodeFunctionData(functionFragment: "eid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getConfig",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceiveLibrary",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredLibraries",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSendLibrary",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isDefaultSendLibrary",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredLibrary",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "lzToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nativeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [MessagingParamsStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveLibraryTimeout",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerLibrary",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [MessagingParamsStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [string, string, SetConfigParamStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "setDelegate", values: [string]): string;
  encodeFunctionData(functionFragment: "setLzToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setReceiveLibrary",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReceiveLibraryTimeout",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSendLibrary",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "clear", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReceiveLibrary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredLibraries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSendLibrary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDefaultSendLibrary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredLibrary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lzToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveLibraryTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerLibrary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLzToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReceiveLibrary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReceiveLibraryTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSendLibrary",
    data: BytesLike
  ): Result;

  events: {
    "PacketSent(bytes,bytes,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PacketSent"): EventFragment;
}

export interface PacketSentEventObject {
  encodedPacket: string;
  options: string;
  sendLibrary: string;
}
export type PacketSentEvent = TypedEvent<
  [string, string, string],
  PacketSentEventObject
>;

export type PacketSentEventFilter = TypedEventFilter<PacketSentEvent>;

export interface MockLZEndpointV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockLZEndpointV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    clear(
      arg0: string,
      arg1: OriginStruct,
      arg2: BytesLike,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    delegates(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    eid(overrides?: CallOverrides): Promise<[number]>;

    getConfig(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { config: string }>;

    getReceiveLibrary(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { lib: string; isDefault: boolean }>;

    getRegisteredLibraries(overrides?: CallOverrides): Promise<[string[]]>;

    getSendLibrary(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { lib: string }>;

    initialize(
      arg0: string,
      arg1: string,
      arg2: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isDefaultSendLibrary(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRegisteredLibrary(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lzToken(overrides?: CallOverrides): Promise<[string]>;

    nativeToken(overrides?: CallOverrides): Promise<[string]>;

    quote(
      arg0: MessagingParamsStruct,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[MessagingFeeStructOutput] & { fee: MessagingFeeStructOutput }>;

    receiveLibraryTimeout(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { lib: string; expiry: BigNumber }>;

    registerLibrary(
      arg0: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    send(
      arg0: MessagingParamsStruct,
      arg1: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    setConfig(
      arg0: string,
      arg1: string,
      arg2: SetConfigParamStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDelegate(
      arg0: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setLzToken(
      arg0: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setReceiveLibrary(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setReceiveLibraryTimeout(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSendLibrary(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  clear(
    arg0: string,
    arg1: OriginStruct,
    arg2: BytesLike,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  delegates(arg0: string, overrides?: CallOverrides): Promise<string>;

  eid(overrides?: CallOverrides): Promise<number>;

  getConfig(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getReceiveLibrary(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { lib: string; isDefault: boolean }>;

  getRegisteredLibraries(overrides?: CallOverrides): Promise<string[]>;

  getSendLibrary(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    arg0: string,
    arg1: string,
    arg2: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isDefaultSendLibrary(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRegisteredLibrary(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lzToken(overrides?: CallOverrides): Promise<string>;

  nativeToken(overrides?: CallOverrides): Promise<string>;

  quote(
    arg0: MessagingParamsStruct,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<MessagingFeeStructOutput>;

  receiveLibraryTimeout(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { lib: string; expiry: BigNumber }>;

  registerLibrary(
    arg0: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  send(
    arg0: MessagingParamsStruct,
    arg1: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  setConfig(
    arg0: string,
    arg1: string,
    arg2: SetConfigParamStruct[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDelegate(
    arg0: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setLzToken(
    arg0: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setReceiveLibrary(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    arg3: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setReceiveLibraryTimeout(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    arg3: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSendLibrary(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    clear(
      arg0: string,
      arg1: OriginStruct,
      arg2: BytesLike,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    delegates(arg0: string, overrides?: CallOverrides): Promise<string>;

    eid(overrides?: CallOverrides): Promise<number>;

    getConfig(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getReceiveLibrary(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { lib: string; isDefault: boolean }>;

    getRegisteredLibraries(overrides?: CallOverrides): Promise<string[]>;

    getSendLibrary(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      arg0: string,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isDefaultSendLibrary(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRegisteredLibrary(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lzToken(overrides?: CallOverrides): Promise<string>;

    nativeToken(overrides?: CallOverrides): Promise<string>;

    quote(
      arg0: MessagingParamsStruct,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>;

    receiveLibraryTimeout(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { lib: string; expiry: BigNumber }>;

    registerLibrary(arg0: string, overrides?: CallOverrides): Promise<void>;

    send(
      arg0: MessagingParamsStruct,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>;

    setConfig(
      arg0: string,
      arg1: string,
      arg2: SetConfigParamStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setDelegate(arg0: string, overrides?: CallOverrides): Promise<void>;

    setLzToken(arg0: string, overrides?: CallOverrides): Promise<void>;

    setReceiveLibrary(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReceiveLibraryTimeout(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSendLibrary(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PacketSent(bytes,bytes,address)"(
      encodedPacket?: null,
      options?: null,
      sendLibrary?: null
    ): PacketSentEventFilter;
    PacketSent(
      encodedPacket?: null,
      options?: null,
      sendLibrary?: null
    ): PacketSentEventFilter;
  };

  estimateGas: {
    clear(
      arg0: string,
      arg1: OriginStruct,
      arg2: BytesLike,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    delegates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    eid(overrides?: CallOverrides): Promise<BigNumber>;

    getConfig(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceiveLibrary(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisteredLibraries(overrides?: CallOverrides): Promise<BigNumber>;

    getSendLibrary(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      arg0: string,
      arg1: string,
      arg2: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isDefaultSendLibrary(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegisteredLibrary(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lzToken(overrides?: CallOverrides): Promise<BigNumber>;

    nativeToken(overrides?: CallOverrides): Promise<BigNumber>;

    quote(
      arg0: MessagingParamsStruct,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiveLibraryTimeout(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerLibrary(
      arg0: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    send(
      arg0: MessagingParamsStruct,
      arg1: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    setConfig(
      arg0: string,
      arg1: string,
      arg2: SetConfigParamStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDelegate(
      arg0: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setLzToken(
      arg0: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setReceiveLibrary(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setReceiveLibraryTimeout(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSendLibrary(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    clear(
      arg0: string,
      arg1: OriginStruct,
      arg2: BytesLike,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    delegates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getConfig(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReceiveLibrary(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegisteredLibraries(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSendLibrary(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      arg0: string,
      arg1: string,
      arg2: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isDefaultSendLibrary(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegisteredLibrary(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lzToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nativeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quote(
      arg0: MessagingParamsStruct,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiveLibraryTimeout(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerLibrary(
      arg0: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    send(
      arg0: MessagingParamsStruct,
      arg1: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setConfig(
      arg0: string,
      arg1: string,
      arg2: SetConfigParamStruct[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDelegate(
      arg0: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setLzToken(
      arg0: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setReceiveLibrary(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setReceiveLibraryTimeout(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSendLibrary(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
