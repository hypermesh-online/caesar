/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace IEconomicEngine {
  export type EconomicParametersStruct = {
    baseDemurrageRate: BigNumberish;
    maxDemurrageRate: BigNumberish;
    stabilityThreshold: BigNumberish;
    fiatDiscountFactor: BigNumberish;
    gracePeriodsHours: BigNumberish;
    interventionThreshold: BigNumberish;
    rebalanceFrequency: BigNumberish;
    emergencyThreshold: BigNumberish;
  };

  export type EconomicParametersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    baseDemurrageRate: BigNumber;
    maxDemurrageRate: BigNumber;
    stabilityThreshold: BigNumber;
    fiatDiscountFactor: BigNumber;
    gracePeriodsHours: BigNumber;
    interventionThreshold: BigNumber;
    rebalanceFrequency: BigNumber;
    emergencyThreshold: BigNumber;
  };

  export type EconomicHealthMetricsStruct = {
    overallHealth: BigNumberish;
    priceStability: BigNumberish;
    liquidityHealth: BigNumberish;
    participationRate: BigNumberish;
    reserveRatio: BigNumberish;
    demurrageEfficiency: BigNumberish;
    antiSpeculationEffectiveness: BigNumberish;
    systemStress: BigNumberish;
    timestamp: BigNumberish;
  };

  export type EconomicHealthMetricsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    overallHealth: BigNumber;
    priceStability: BigNumber;
    liquidityHealth: BigNumber;
    participationRate: BigNumber;
    reserveRatio: BigNumber;
    demurrageEfficiency: BigNumber;
    antiSpeculationEffectiveness: BigNumber;
    systemStress: BigNumber;
    timestamp: BigNumber;
  };

  export type AccountEconomicDataStruct = {
    lastActivity: BigNumberish;
    lastDemurrageApplication: BigNumberish;
    totalDemurragePaid: BigNumberish;
    totalPenaltiesPaid: BigNumberish;
    transactionCount: BigNumberish;
    totalVolume: BigNumberish;
    lastTransactionTime: BigNumberish;
    riskScore: BigNumberish;
    isNewUser: boolean;
    graceEndTime: BigNumberish;
  };

  export type AccountEconomicDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    lastActivity: BigNumber;
    lastDemurrageApplication: BigNumber;
    totalDemurragePaid: BigNumber;
    totalPenaltiesPaid: BigNumber;
    transactionCount: BigNumber;
    totalVolume: BigNumber;
    lastTransactionTime: BigNumber;
    riskScore: BigNumber;
    isNewUser: boolean;
    graceEndTime: BigNumber;
  };

  export type ChainEconomicStateStruct = {
    parameters: IEconomicEngine.EconomicParametersStruct;
    totalSupply: BigNumberish;
    reserveAmount: BigNumberish;
    lastSync: BigNumberish;
    syncHash: BytesLike;
  };

  export type ChainEconomicStateStructOutput = [
    IEconomicEngine.EconomicParametersStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    parameters: IEconomicEngine.EconomicParametersStructOutput;
    totalSupply: BigNumber;
    reserveAmount: BigNumber;
    lastSync: BigNumber;
    syncHash: string;
  };

  export type FiatActivityDataStruct = {
    totalFiatVolume: BigNumberish;
    lastFiatActivity: BigNumberish;
    activityCount: BigNumberish;
    discountEligible: boolean;
    discountPercentage: BigNumberish;
  };

  export type FiatActivityDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    totalFiatVolume: BigNumber;
    lastFiatActivity: BigNumber;
    activityCount: BigNumber;
    discountEligible: boolean;
    discountPercentage: BigNumber;
  };

  export type MarketMetricsStruct = {
    totalDemurrageCollected: BigNumberish;
    totalPenaltiesCollected: BigNumberish;
    averageHoldingPeriod: BigNumberish;
    networkVelocity: BigNumberish;
    participationScore: BigNumberish;
    lastMetricUpdate: BigNumberish;
  };

  export type MarketMetricsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    totalDemurrageCollected: BigNumber;
    totalPenaltiesCollected: BigNumber;
    averageHoldingPeriod: BigNumber;
    networkVelocity: BigNumber;
    participationScore: BigNumber;
    lastMetricUpdate: BigNumber;
  };

  export type SystemHealthStruct = {
    priceStability: BigNumberish;
    liquidityHealth: BigNumberish;
    participationRate: BigNumberish;
    reserveRatio: BigNumberish;
    lastUpdate: BigNumberish;
  };

  export type SystemHealthStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    priceStability: BigNumber;
    liquidityHealth: BigNumber;
    participationRate: BigNumber;
    reserveRatio: BigNumber;
    lastUpdate: BigNumber;
  };

  export type HealthMetricsStruct = {
    overallHealth: BigNumberish;
    priceStability: BigNumberish;
    liquidityHealth: BigNumberish;
    participationRate: BigNumberish;
    lastUpdate: BigNumberish;
  };

  export type HealthMetricsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    overallHealth: BigNumber;
    priceStability: BigNumber;
    liquidityHealth: BigNumber;
    participationRate: BigNumber;
    lastUpdate: BigNumber;
  };

  export type ReserveOperationStruct = {
    operationType: BigNumberish;
    amount: BigNumberish;
    targetChain: BigNumberish;
    timestamp: BigNumberish;
    success: boolean;
  };

  export type ReserveOperationStructOutput = [
    number,
    BigNumber,
    number,
    BigNumber,
    boolean
  ] & {
    operationType: number;
    amount: BigNumber;
    targetChain: number;
    timestamp: BigNumber;
    success: boolean;
  };
}

export interface SimpleEconomicEngineInterface extends utils.Interface {
  functions: {
    "accountData(address)": FunctionFragment;
    "activateEmergencyMode(string)": FunctionFragment;
    "addEmergencyOperator(address)": FunctionFragment;
    "adjustParameters()": FunctionFragment;
    "analyzeTransactionPattern(address,uint256,uint8)": FunctionFragment;
    "antiSpeculationEngine()": FunctionFragment;
    "applyDemurrage(address,uint256)": FunctionFragment;
    "applySpeculationPenalty(address,uint256)": FunctionFragment;
    "calculateDemurrage(address,uint256)": FunctionFragment;
    "chainStates(uint32)": FunctionFragment;
    "deactivateEmergencyMode()": FunctionFragment;
    "demurrageManager()": FunctionFragment;
    "economicParams()": FunctionFragment;
    "emergencyMode()": FunctionFragment;
    "emergencyOperators(address)": FunctionFragment;
    "emergencyTimestamp()": FunctionFragment;
    "endGracePeriod(address)": FunctionFragment;
    "exemptAccounts(address)": FunctionFragment;
    "fiatActivity(address)": FunctionFragment;
    "getAccountEconomicData(address)": FunctionFragment;
    "getChainEconomicState(uint32)": FunctionFragment;
    "getCurrentDemurrageRate(address)": FunctionFragment;
    "getCurrentPrice()": FunctionFragment;
    "getEconomicParameters()": FunctionFragment;
    "getFiatActivityData(address)": FunctionFragment;
    "getHealthMetrics()": FunctionFragment;
    "getMarketMetrics()": FunctionFragment;
    "getNetworkHealthIndex()": FunctionFragment;
    "getSpeculationRiskScore(address)": FunctionFragment;
    "getSystemHealth()": FunctionFragment;
    "healthMetrics()": FunctionFragment;
    "initializeAccountActivity(address)": FunctionFragment;
    "isAccountExempt(address)": FunctionFragment;
    "lastHealthUpdate()": FunctionFragment;
    "maintainPegStability()": FunctionFragment;
    "marketMetrics()": FunctionFragment;
    "monitorEconomicHealth()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "processTransaction(address,address,uint256,uint8)": FunctionFragment;
    "rebalanceReserves()": FunctionFragment;
    "recordFiatActivity(address,uint256,uint8)": FunctionFragment;
    "removeEmergencyOperator(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAccountActivity(address,uint256)": FunctionFragment;
    "setAccountExemption(address,bool)": FunctionFragment;
    "stabilityPool()": FunctionFragment;
    "synchronizeParameters(uint32,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "systemHealth()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateEconomicParameters((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "validateFiatBacking(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accountData"
      | "activateEmergencyMode"
      | "addEmergencyOperator"
      | "adjustParameters"
      | "analyzeTransactionPattern"
      | "antiSpeculationEngine"
      | "applyDemurrage"
      | "applySpeculationPenalty"
      | "calculateDemurrage"
      | "chainStates"
      | "deactivateEmergencyMode"
      | "demurrageManager"
      | "economicParams"
      | "emergencyMode"
      | "emergencyOperators"
      | "emergencyTimestamp"
      | "endGracePeriod"
      | "exemptAccounts"
      | "fiatActivity"
      | "getAccountEconomicData"
      | "getChainEconomicState"
      | "getCurrentDemurrageRate"
      | "getCurrentPrice"
      | "getEconomicParameters"
      | "getFiatActivityData"
      | "getHealthMetrics"
      | "getMarketMetrics"
      | "getNetworkHealthIndex"
      | "getSpeculationRiskScore"
      | "getSystemHealth"
      | "healthMetrics"
      | "initializeAccountActivity"
      | "isAccountExempt"
      | "lastHealthUpdate"
      | "maintainPegStability"
      | "marketMetrics"
      | "monitorEconomicHealth"
      | "owner"
      | "pause"
      | "paused"
      | "processTransaction"
      | "rebalanceReserves"
      | "recordFiatActivity"
      | "removeEmergencyOperator"
      | "renounceOwnership"
      | "setAccountActivity"
      | "setAccountExemption"
      | "stabilityPool"
      | "synchronizeParameters"
      | "systemHealth"
      | "transferOwnership"
      | "unpause"
      | "updateEconomicParameters"
      | "validateFiatBacking"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "accountData", values: [string]): string;
  encodeFunctionData(
    functionFragment: "activateEmergencyMode",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addEmergencyOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "analyzeTransactionPattern",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "antiSpeculationEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyDemurrage",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "applySpeculationPenalty",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateDemurrage",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chainStates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateEmergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "demurrageManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "economicParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyOperators",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endGracePeriod",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "exemptAccounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "fiatActivity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountEconomicData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainEconomicState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentDemurrageRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEconomicParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFiatActivityData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getHealthMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNetworkHealthIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSpeculationRiskScore",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSystemHealth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "healthMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeAccountActivity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountExempt",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastHealthUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maintainPegStability",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketMetrics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "monitorEconomicHealth",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processTransaction",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordFiatActivity",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeEmergencyOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountActivity",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountExemption",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stabilityPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "synchronizeParameters",
    values: [BigNumberish, IEconomicEngine.EconomicParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "systemHealth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateEconomicParameters",
    values: [IEconomicEngine.EconomicParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "validateFiatBacking",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addEmergencyOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "analyzeTransactionPattern",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "antiSpeculationEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyDemurrage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applySpeculationPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateDemurrage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "demurrageManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "economicParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exemptAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fiatActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountEconomicData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainEconomicState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDemurrageRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEconomicParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFiatActivityData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHealthMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkHealthIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpeculationRiskScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSystemHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "healthMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeAccountActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastHealthUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maintainPegStability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketMetrics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "monitorEconomicHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordFiatActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeEmergencyOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccountActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccountExemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stabilityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "synchronizeParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "systemHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateEconomicParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateFiatBacking",
    data: BytesLike
  ): Result;

  events: {
    "CrossChainSync(uint32,bytes32)": EventFragment;
    "DemurrageApplied(address,uint256,uint256)": EventFragment;
    "EconomicParametersUpdated((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": EventFragment;
    "EmergencyModeActivated(address,string)": EventFragment;
    "FiatActivityRecorded(address,uint256,uint8)": EventFragment;
    "HealthMetricsUpdated((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ParameterProposalCreated(bytes32,address)": EventFragment;
    "Paused(address)": EventFragment;
    "ReserveOperationExecuted(uint8,uint256,bool)": EventFragment;
    "SpeculationPenaltyApplied(address,uint256,string)": EventFragment;
    "StabilityIntervention(uint8,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CrossChainSync"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DemurrageApplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EconomicParametersUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyModeActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FiatActivityRecorded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HealthMetricsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveOperationExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpeculationPenaltyApplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StabilityIntervention"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface CrossChainSyncEventObject {
  chainId: number;
  stateHash: string;
}
export type CrossChainSyncEvent = TypedEvent<
  [number, string],
  CrossChainSyncEventObject
>;

export type CrossChainSyncEventFilter = TypedEventFilter<CrossChainSyncEvent>;

export interface DemurrageAppliedEventObject {
  account: string;
  amount: BigNumber;
  rate: BigNumber;
}
export type DemurrageAppliedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DemurrageAppliedEventObject
>;

export type DemurrageAppliedEventFilter =
  TypedEventFilter<DemurrageAppliedEvent>;

export interface EconomicParametersUpdatedEventObject {
  params: IEconomicEngine.EconomicParametersStructOutput;
}
export type EconomicParametersUpdatedEvent = TypedEvent<
  [IEconomicEngine.EconomicParametersStructOutput],
  EconomicParametersUpdatedEventObject
>;

export type EconomicParametersUpdatedEventFilter =
  TypedEventFilter<EconomicParametersUpdatedEvent>;

export interface EmergencyModeActivatedEventObject {
  operator: string;
  reason: string;
}
export type EmergencyModeActivatedEvent = TypedEvent<
  [string, string],
  EmergencyModeActivatedEventObject
>;

export type EmergencyModeActivatedEventFilter =
  TypedEventFilter<EmergencyModeActivatedEvent>;

export interface FiatActivityRecordedEventObject {
  account: string;
  amount: BigNumber;
  activityType: number;
}
export type FiatActivityRecordedEvent = TypedEvent<
  [string, BigNumber, number],
  FiatActivityRecordedEventObject
>;

export type FiatActivityRecordedEventFilter =
  TypedEventFilter<FiatActivityRecordedEvent>;

export interface HealthMetricsUpdatedEventObject {
  metrics: IEconomicEngine.EconomicHealthMetricsStructOutput;
}
export type HealthMetricsUpdatedEvent = TypedEvent<
  [IEconomicEngine.EconomicHealthMetricsStructOutput],
  HealthMetricsUpdatedEventObject
>;

export type HealthMetricsUpdatedEventFilter =
  TypedEventFilter<HealthMetricsUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ParameterProposalCreatedEventObject {
  proposalId: string;
  proposer: string;
}
export type ParameterProposalCreatedEvent = TypedEvent<
  [string, string],
  ParameterProposalCreatedEventObject
>;

export type ParameterProposalCreatedEventFilter =
  TypedEventFilter<ParameterProposalCreatedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface ReserveOperationExecutedEventObject {
  operationType: number;
  amount: BigNumber;
  success: boolean;
}
export type ReserveOperationExecutedEvent = TypedEvent<
  [number, BigNumber, boolean],
  ReserveOperationExecutedEventObject
>;

export type ReserveOperationExecutedEventFilter =
  TypedEventFilter<ReserveOperationExecutedEvent>;

export interface SpeculationPenaltyAppliedEventObject {
  account: string;
  penalty: BigNumber;
  reason: string;
}
export type SpeculationPenaltyAppliedEvent = TypedEvent<
  [string, BigNumber, string],
  SpeculationPenaltyAppliedEventObject
>;

export type SpeculationPenaltyAppliedEventFilter =
  TypedEventFilter<SpeculationPenaltyAppliedEvent>;

export interface StabilityInterventionEventObject {
  interventionType: number;
  amount: BigNumber;
}
export type StabilityInterventionEvent = TypedEvent<
  [number, BigNumber],
  StabilityInterventionEventObject
>;

export type StabilityInterventionEventFilter =
  TypedEventFilter<StabilityInterventionEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface SimpleEconomicEngine extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SimpleEconomicEngineInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        lastActivity: BigNumber;
        lastDemurrageApplication: BigNumber;
        totalDemurragePaid: BigNumber;
        totalPenaltiesPaid: BigNumber;
        transactionCount: BigNumber;
        totalVolume: BigNumber;
        lastTransactionTime: BigNumber;
        riskScore: BigNumber;
        isNewUser: boolean;
        graceEndTime: BigNumber;
      }
    >;

    activateEmergencyMode(
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    adjustParameters(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    analyzeTransactionPattern(
      account: string,
      amount: BigNumberish,
      transactionType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    antiSpeculationEngine(overrides?: CallOverrides): Promise<[string]>;

    applyDemurrage(
      account: string,
      balance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    applySpeculationPenalty(
      account: string,
      penalty: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    calculateDemurrage(
      account: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { demurrageAmount: BigNumber }>;

    chainStates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        IEconomicEngine.EconomicParametersStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        parameters: IEconomicEngine.EconomicParametersStructOutput;
        totalSupply: BigNumber;
        reserveAmount: BigNumber;
        lastSync: BigNumber;
        syncHash: string;
      }
    >;

    deactivateEmergencyMode(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    demurrageManager(overrides?: CallOverrides): Promise<[string]>;

    economicParams(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        baseDemurrageRate: BigNumber;
        maxDemurrageRate: BigNumber;
        stabilityThreshold: BigNumber;
        fiatDiscountFactor: BigNumber;
        gracePeriodsHours: BigNumber;
        interventionThreshold: BigNumber;
        rebalanceFrequency: BigNumber;
        emergencyThreshold: BigNumber;
      }
    >;

    emergencyMode(overrides?: CallOverrides): Promise<[boolean]>;

    emergencyOperators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    emergencyTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    endGracePeriod(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    exemptAccounts(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    fiatActivity(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        totalFiatVolume: BigNumber;
        lastFiatActivity: BigNumber;
        activityCount: BigNumber;
        discountEligible: boolean;
        discountPercentage: BigNumber;
      }
    >;

    getAccountEconomicData(
      account: string,
      overrides?: CallOverrides
    ): Promise<[IEconomicEngine.AccountEconomicDataStructOutput]>;

    getChainEconomicState(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IEconomicEngine.ChainEconomicStateStructOutput]>;

    getCurrentDemurrageRate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEconomicParameters(
      overrides?: CallOverrides
    ): Promise<[IEconomicEngine.EconomicParametersStructOutput]>;

    getFiatActivityData(
      account: string,
      overrides?: CallOverrides
    ): Promise<[IEconomicEngine.FiatActivityDataStructOutput]>;

    getHealthMetrics(
      overrides?: CallOverrides
    ): Promise<[IEconomicEngine.EconomicHealthMetricsStructOutput]>;

    getMarketMetrics(
      overrides?: CallOverrides
    ): Promise<[IEconomicEngine.MarketMetricsStructOutput]>;

    getNetworkHealthIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSpeculationRiskScore(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSystemHealth(
      overrides?: CallOverrides
    ): Promise<[IEconomicEngine.SystemHealthStructOutput]>;

    healthMetrics(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        overallHealth: BigNumber;
        priceStability: BigNumber;
        liquidityHealth: BigNumber;
        participationRate: BigNumber;
        reserveRatio: BigNumber;
        demurrageEfficiency: BigNumber;
        antiSpeculationEffectiveness: BigNumber;
        systemStress: BigNumber;
        timestamp: BigNumber;
      }
    >;

    initializeAccountActivity(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isAccountExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastHealthUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    maintainPegStability(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    marketMetrics(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalDemurrageCollected: BigNumber;
        totalPenaltiesCollected: BigNumber;
        averageHoldingPeriod: BigNumber;
        networkVelocity: BigNumber;
        participationScore: BigNumber;
        lastMetricUpdate: BigNumber;
      }
    >;

    monitorEconomicHealth(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    processTransaction(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rebalanceReserves(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    recordFiatActivity(
      account: string,
      amount: BigNumberish,
      activityType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAccountActivity(
      account: string,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAccountExemption(
      account: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stabilityPool(overrides?: CallOverrides): Promise<[string]>;

    synchronizeParameters(
      chainId: BigNumberish,
      parameters: IEconomicEngine.EconomicParametersStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    systemHealth(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        priceStability: BigNumber;
        liquidityHealth: BigNumber;
        participationRate: BigNumber;
        reserveRatio: BigNumber;
        lastUpdate: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateEconomicParameters(
      params: IEconomicEngine.EconomicParametersStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    validateFiatBacking(
      expectedBacking: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { isValid: boolean; actualBacking: BigNumber }
    >;
  };

  accountData(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber
    ] & {
      lastActivity: BigNumber;
      lastDemurrageApplication: BigNumber;
      totalDemurragePaid: BigNumber;
      totalPenaltiesPaid: BigNumber;
      transactionCount: BigNumber;
      totalVolume: BigNumber;
      lastTransactionTime: BigNumber;
      riskScore: BigNumber;
      isNewUser: boolean;
      graceEndTime: BigNumber;
    }
  >;

  activateEmergencyMode(
    reason: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addEmergencyOperator(
    operator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  adjustParameters(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  analyzeTransactionPattern(
    account: string,
    amount: BigNumberish,
    transactionType: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  antiSpeculationEngine(overrides?: CallOverrides): Promise<string>;

  applyDemurrage(
    account: string,
    balance: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  applySpeculationPenalty(
    account: string,
    penalty: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  calculateDemurrage(
    account: string,
    balance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  chainStates(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      IEconomicEngine.EconomicParametersStructOutput,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      parameters: IEconomicEngine.EconomicParametersStructOutput;
      totalSupply: BigNumber;
      reserveAmount: BigNumber;
      lastSync: BigNumber;
      syncHash: string;
    }
  >;

  deactivateEmergencyMode(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  demurrageManager(overrides?: CallOverrides): Promise<string>;

  economicParams(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      baseDemurrageRate: BigNumber;
      maxDemurrageRate: BigNumber;
      stabilityThreshold: BigNumber;
      fiatDiscountFactor: BigNumber;
      gracePeriodsHours: BigNumber;
      interventionThreshold: BigNumber;
      rebalanceFrequency: BigNumber;
      emergencyThreshold: BigNumber;
    }
  >;

  emergencyMode(overrides?: CallOverrides): Promise<boolean>;

  emergencyOperators(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  emergencyTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  endGracePeriod(
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  exemptAccounts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  fiatActivity(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
      totalFiatVolume: BigNumber;
      lastFiatActivity: BigNumber;
      activityCount: BigNumber;
      discountEligible: boolean;
      discountPercentage: BigNumber;
    }
  >;

  getAccountEconomicData(
    account: string,
    overrides?: CallOverrides
  ): Promise<IEconomicEngine.AccountEconomicDataStructOutput>;

  getChainEconomicState(
    chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IEconomicEngine.ChainEconomicStateStructOutput>;

  getCurrentDemurrageRate(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getEconomicParameters(
    overrides?: CallOverrides
  ): Promise<IEconomicEngine.EconomicParametersStructOutput>;

  getFiatActivityData(
    account: string,
    overrides?: CallOverrides
  ): Promise<IEconomicEngine.FiatActivityDataStructOutput>;

  getHealthMetrics(
    overrides?: CallOverrides
  ): Promise<IEconomicEngine.EconomicHealthMetricsStructOutput>;

  getMarketMetrics(
    overrides?: CallOverrides
  ): Promise<IEconomicEngine.MarketMetricsStructOutput>;

  getNetworkHealthIndex(overrides?: CallOverrides): Promise<BigNumber>;

  getSpeculationRiskScore(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSystemHealth(
    overrides?: CallOverrides
  ): Promise<IEconomicEngine.SystemHealthStructOutput>;

  healthMetrics(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      overallHealth: BigNumber;
      priceStability: BigNumber;
      liquidityHealth: BigNumber;
      participationRate: BigNumber;
      reserveRatio: BigNumber;
      demurrageEfficiency: BigNumber;
      antiSpeculationEffectiveness: BigNumber;
      systemStress: BigNumber;
      timestamp: BigNumber;
    }
  >;

  initializeAccountActivity(
    account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isAccountExempt(account: string, overrides?: CallOverrides): Promise<boolean>;

  lastHealthUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  maintainPegStability(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  marketMetrics(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalDemurrageCollected: BigNumber;
      totalPenaltiesCollected: BigNumber;
      averageHoldingPeriod: BigNumber;
      networkVelocity: BigNumber;
      participationScore: BigNumber;
      lastMetricUpdate: BigNumber;
    }
  >;

  monitorEconomicHealth(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  processTransaction(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rebalanceReserves(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  recordFiatActivity(
    account: string,
    amount: BigNumberish,
    activityType: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeEmergencyOperator(
    operator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAccountActivity(
    account: string,
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAccountExemption(
    account: string,
    exempt: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stabilityPool(overrides?: CallOverrides): Promise<string>;

  synchronizeParameters(
    chainId: BigNumberish,
    parameters: IEconomicEngine.EconomicParametersStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  systemHealth(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      priceStability: BigNumber;
      liquidityHealth: BigNumber;
      participationRate: BigNumber;
      reserveRatio: BigNumber;
      lastUpdate: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateEconomicParameters(
    params: IEconomicEngine.EconomicParametersStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  validateFiatBacking(
    expectedBacking: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & { isValid: boolean; actualBacking: BigNumber }
  >;

  callStatic: {
    accountData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ] & {
        lastActivity: BigNumber;
        lastDemurrageApplication: BigNumber;
        totalDemurragePaid: BigNumber;
        totalPenaltiesPaid: BigNumber;
        transactionCount: BigNumber;
        totalVolume: BigNumber;
        lastTransactionTime: BigNumber;
        riskScore: BigNumber;
        isNewUser: boolean;
        graceEndTime: BigNumber;
      }
    >;

    activateEmergencyMode(
      reason: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addEmergencyOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    adjustParameters(overrides?: CallOverrides): Promise<void>;

    analyzeTransactionPattern(
      account: string,
      amount: BigNumberish,
      transactionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { riskScore: BigNumber; penalty: BigNumber }
    >;

    antiSpeculationEngine(overrides?: CallOverrides): Promise<string>;

    applyDemurrage(
      account: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    applySpeculationPenalty(
      account: string,
      penalty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    calculateDemurrage(
      account: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainStates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        IEconomicEngine.EconomicParametersStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        parameters: IEconomicEngine.EconomicParametersStructOutput;
        totalSupply: BigNumber;
        reserveAmount: BigNumber;
        lastSync: BigNumber;
        syncHash: string;
      }
    >;

    deactivateEmergencyMode(overrides?: CallOverrides): Promise<void>;

    demurrageManager(overrides?: CallOverrides): Promise<string>;

    economicParams(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        baseDemurrageRate: BigNumber;
        maxDemurrageRate: BigNumber;
        stabilityThreshold: BigNumber;
        fiatDiscountFactor: BigNumber;
        gracePeriodsHours: BigNumber;
        interventionThreshold: BigNumber;
        rebalanceFrequency: BigNumber;
        emergencyThreshold: BigNumber;
      }
    >;

    emergencyMode(overrides?: CallOverrides): Promise<boolean>;

    emergencyOperators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    emergencyTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    endGracePeriod(account: string, overrides?: CallOverrides): Promise<void>;

    exemptAccounts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    fiatActivity(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        totalFiatVolume: BigNumber;
        lastFiatActivity: BigNumber;
        activityCount: BigNumber;
        discountEligible: boolean;
        discountPercentage: BigNumber;
      }
    >;

    getAccountEconomicData(
      account: string,
      overrides?: CallOverrides
    ): Promise<IEconomicEngine.AccountEconomicDataStructOutput>;

    getChainEconomicState(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IEconomicEngine.ChainEconomicStateStructOutput>;

    getCurrentDemurrageRate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getEconomicParameters(
      overrides?: CallOverrides
    ): Promise<IEconomicEngine.EconomicParametersStructOutput>;

    getFiatActivityData(
      account: string,
      overrides?: CallOverrides
    ): Promise<IEconomicEngine.FiatActivityDataStructOutput>;

    getHealthMetrics(
      overrides?: CallOverrides
    ): Promise<IEconomicEngine.EconomicHealthMetricsStructOutput>;

    getMarketMetrics(
      overrides?: CallOverrides
    ): Promise<IEconomicEngine.MarketMetricsStructOutput>;

    getNetworkHealthIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getSpeculationRiskScore(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSystemHealth(
      overrides?: CallOverrides
    ): Promise<IEconomicEngine.SystemHealthStructOutput>;

    healthMetrics(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        overallHealth: BigNumber;
        priceStability: BigNumber;
        liquidityHealth: BigNumber;
        participationRate: BigNumber;
        reserveRatio: BigNumber;
        demurrageEfficiency: BigNumber;
        antiSpeculationEffectiveness: BigNumber;
        systemStress: BigNumber;
        timestamp: BigNumber;
      }
    >;

    initializeAccountActivity(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isAccountExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastHealthUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    maintainPegStability(overrides?: CallOverrides): Promise<number>;

    marketMetrics(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalDemurrageCollected: BigNumber;
        totalPenaltiesCollected: BigNumber;
        averageHoldingPeriod: BigNumber;
        networkVelocity: BigNumber;
        participationScore: BigNumber;
        lastMetricUpdate: BigNumber;
      }
    >;

    monitorEconomicHealth(
      overrides?: CallOverrides
    ): Promise<IEconomicEngine.HealthMetricsStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    processTransaction(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebalanceReserves(
      overrides?: CallOverrides
    ): Promise<IEconomicEngine.ReserveOperationStructOutput>;

    recordFiatActivity(
      account: string,
      amount: BigNumberish,
      activityType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeEmergencyOperator(
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAccountActivity(
      account: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAccountExemption(
      account: string,
      exempt: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    stabilityPool(overrides?: CallOverrides): Promise<string>;

    synchronizeParameters(
      chainId: BigNumberish,
      parameters: IEconomicEngine.EconomicParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    systemHealth(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        priceStability: BigNumber;
        liquidityHealth: BigNumber;
        participationRate: BigNumber;
        reserveRatio: BigNumber;
        lastUpdate: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateEconomicParameters(
      params: IEconomicEngine.EconomicParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    validateFiatBacking(
      expectedBacking: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { isValid: boolean; actualBacking: BigNumber }
    >;
  };

  filters: {
    "CrossChainSync(uint32,bytes32)"(
      chainId?: BigNumberish | null,
      stateHash?: null
    ): CrossChainSyncEventFilter;
    CrossChainSync(
      chainId?: BigNumberish | null,
      stateHash?: null
    ): CrossChainSyncEventFilter;

    "DemurrageApplied(address,uint256,uint256)"(
      account?: string | null,
      amount?: null,
      rate?: null
    ): DemurrageAppliedEventFilter;
    DemurrageApplied(
      account?: string | null,
      amount?: null,
      rate?: null
    ): DemurrageAppliedEventFilter;

    "EconomicParametersUpdated((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      params?: null
    ): EconomicParametersUpdatedEventFilter;
    EconomicParametersUpdated(
      params?: null
    ): EconomicParametersUpdatedEventFilter;

    "EmergencyModeActivated(address,string)"(
      operator?: null,
      reason?: null
    ): EmergencyModeActivatedEventFilter;
    EmergencyModeActivated(
      operator?: null,
      reason?: null
    ): EmergencyModeActivatedEventFilter;

    "FiatActivityRecorded(address,uint256,uint8)"(
      account?: string | null,
      amount?: null,
      activityType?: null
    ): FiatActivityRecordedEventFilter;
    FiatActivityRecorded(
      account?: string | null,
      amount?: null,
      activityType?: null
    ): FiatActivityRecordedEventFilter;

    "HealthMetricsUpdated((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      metrics?: null
    ): HealthMetricsUpdatedEventFilter;
    HealthMetricsUpdated(metrics?: null): HealthMetricsUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ParameterProposalCreated(bytes32,address)"(
      proposalId?: BytesLike | null,
      proposer?: null
    ): ParameterProposalCreatedEventFilter;
    ParameterProposalCreated(
      proposalId?: BytesLike | null,
      proposer?: null
    ): ParameterProposalCreatedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "ReserveOperationExecuted(uint8,uint256,bool)"(
      operationType?: null,
      amount?: null,
      success?: null
    ): ReserveOperationExecutedEventFilter;
    ReserveOperationExecuted(
      operationType?: null,
      amount?: null,
      success?: null
    ): ReserveOperationExecutedEventFilter;

    "SpeculationPenaltyApplied(address,uint256,string)"(
      account?: string | null,
      penalty?: null,
      reason?: null
    ): SpeculationPenaltyAppliedEventFilter;
    SpeculationPenaltyApplied(
      account?: string | null,
      penalty?: null,
      reason?: null
    ): SpeculationPenaltyAppliedEventFilter;

    "StabilityIntervention(uint8,uint256)"(
      interventionType?: null,
      amount?: null
    ): StabilityInterventionEventFilter;
    StabilityIntervention(
      interventionType?: null,
      amount?: null
    ): StabilityInterventionEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    accountData(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    activateEmergencyMode(
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    adjustParameters(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    analyzeTransactionPattern(
      account: string,
      amount: BigNumberish,
      transactionType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    antiSpeculationEngine(overrides?: CallOverrides): Promise<BigNumber>;

    applyDemurrage(
      account: string,
      balance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    applySpeculationPenalty(
      account: string,
      penalty: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    calculateDemurrage(
      account: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainStates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deactivateEmergencyMode(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    demurrageManager(overrides?: CallOverrides): Promise<BigNumber>;

    economicParams(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyMode(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyOperators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    endGracePeriod(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    exemptAccounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    fiatActivity(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAccountEconomicData(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainEconomicState(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentDemurrageRate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getEconomicParameters(overrides?: CallOverrides): Promise<BigNumber>;

    getFiatActivityData(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHealthMetrics(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketMetrics(overrides?: CallOverrides): Promise<BigNumber>;

    getNetworkHealthIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getSpeculationRiskScore(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSystemHealth(overrides?: CallOverrides): Promise<BigNumber>;

    healthMetrics(overrides?: CallOverrides): Promise<BigNumber>;

    initializeAccountActivity(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isAccountExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastHealthUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    maintainPegStability(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    marketMetrics(overrides?: CallOverrides): Promise<BigNumber>;

    monitorEconomicHealth(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    processTransaction(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebalanceReserves(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    recordFiatActivity(
      account: string,
      amount: BigNumberish,
      activityType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAccountActivity(
      account: string,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAccountExemption(
      account: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stabilityPool(overrides?: CallOverrides): Promise<BigNumber>;

    synchronizeParameters(
      chainId: BigNumberish,
      parameters: IEconomicEngine.EconomicParametersStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    systemHealth(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    updateEconomicParameters(
      params: IEconomicEngine.EconomicParametersStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    validateFiatBacking(
      expectedBacking: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activateEmergencyMode(
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    adjustParameters(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    analyzeTransactionPattern(
      account: string,
      amount: BigNumberish,
      transactionType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    antiSpeculationEngine(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    applyDemurrage(
      account: string,
      balance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    applySpeculationPenalty(
      account: string,
      penalty: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    calculateDemurrage(
      account: string,
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainStates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deactivateEmergencyMode(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    demurrageManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    economicParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyOperators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endGracePeriod(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    exemptAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fiatActivity(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountEconomicData(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainEconomicState(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentDemurrageRate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEconomicParameters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFiatActivityData(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHealthMetrics(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarketMetrics(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNetworkHealthIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpeculationRiskScore(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSystemHealth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    healthMetrics(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initializeAccountActivity(
      account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isAccountExempt(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastHealthUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maintainPegStability(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    marketMetrics(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    monitorEconomicHealth(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processTransaction(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebalanceReserves(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    recordFiatActivity(
      account: string,
      amount: BigNumberish,
      activityType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeEmergencyOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAccountActivity(
      account: string,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAccountExemption(
      account: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stabilityPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    synchronizeParameters(
      chainId: BigNumberish,
      parameters: IEconomicEngine.EconomicParametersStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    systemHealth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateEconomicParameters(
      params: IEconomicEngine.EconomicParametersStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    validateFiatBacking(
      expectedBacking: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
