/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface MockAMMInterface extends utils.Interface {
  functions: {
    "FEE_BASIS_POINTS()": FunctionFragment;
    "addLiquidity(uint256,uint256)": FunctionFragment;
    "getAmountOut(uint256,address)": FunctionFragment;
    "getReserves()": FunctionFragment;
    "removeLiquidity(uint256,uint256)": FunctionFragment;
    "reserveA()": FunctionFragment;
    "reserveB()": FunctionFragment;
    "setReserves(uint256,uint256)": FunctionFragment;
    "swapAForB(uint256)": FunctionFragment;
    "swapBForA(uint256)": FunctionFragment;
    "tokenA()": FunctionFragment;
    "tokenB()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FEE_BASIS_POINTS"
      | "addLiquidity"
      | "getAmountOut"
      | "getReserves"
      | "removeLiquidity"
      | "reserveA"
      | "reserveB"
      | "setReserves"
      | "swapAForB"
      | "swapBForA"
      | "tokenA"
      | "tokenB"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FEE_BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "reserveA", values?: undefined): string;
  encodeFunctionData(functionFragment: "reserveB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setReserves",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAForB",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapBForA",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokenA", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenB", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "FEE_BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserveA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reserveB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapAForB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapBForA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenB", data: BytesLike): Result;

  events: {
    "LiquidityAdded(uint256,uint256)": EventFragment;
    "LiquidityRemoved(uint256,uint256)": EventFragment;
    "Swap(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
}

export interface LiquidityAddedEventObject {
  amountA: BigNumber;
  amountB: BigNumber;
}
export type LiquidityAddedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LiquidityAddedEventObject
>;

export type LiquidityAddedEventFilter = TypedEventFilter<LiquidityAddedEvent>;

export interface LiquidityRemovedEventObject {
  amountA: BigNumber;
  amountB: BigNumber;
}
export type LiquidityRemovedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LiquidityRemovedEventObject
>;

export type LiquidityRemovedEventFilter =
  TypedEventFilter<LiquidityRemovedEvent>;

export interface SwapEventObject {
  user: string;
  tokenIn: string;
  amountIn: BigNumber;
  amountOut: BigNumber;
}
export type SwapEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  SwapEventObject
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface MockAMM extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockAMMInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEE_BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    addLiquidity(
      amountA: BigNumberish,
      amountB: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAmountOut(
      amountIn: BigNumberish,
      tokenIn: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    removeLiquidity(
      amountA: BigNumberish,
      amountB: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    reserveA(overrides?: CallOverrides): Promise<[BigNumber]>;

    reserveB(overrides?: CallOverrides): Promise<[BigNumber]>;

    setReserves(
      _reserveA: BigNumberish,
      _reserveB: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapAForB(
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapBForA(
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tokenA(overrides?: CallOverrides): Promise<[string]>;

    tokenB(overrides?: CallOverrides): Promise<[string]>;
  };

  FEE_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  addLiquidity(
    amountA: BigNumberish,
    amountB: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAmountOut(
    amountIn: BigNumberish,
    tokenIn: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  removeLiquidity(
    amountA: BigNumberish,
    amountB: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  reserveA(overrides?: CallOverrides): Promise<BigNumber>;

  reserveB(overrides?: CallOverrides): Promise<BigNumber>;

  setReserves(
    _reserveA: BigNumberish,
    _reserveB: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapAForB(
    amountIn: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapBForA(
    amountIn: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  tokenA(overrides?: CallOverrides): Promise<string>;

  tokenB(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    FEE_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      amountA: BigNumberish,
      amountB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAmountOut(
      amountIn: BigNumberish,
      tokenIn: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    removeLiquidity(
      amountA: BigNumberish,
      amountB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    reserveA(overrides?: CallOverrides): Promise<BigNumber>;

    reserveB(overrides?: CallOverrides): Promise<BigNumber>;

    setReserves(
      _reserveA: BigNumberish,
      _reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAForB(
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapBForA(
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenA(overrides?: CallOverrides): Promise<string>;

    tokenB(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "LiquidityAdded(uint256,uint256)"(
      amountA?: null,
      amountB?: null
    ): LiquidityAddedEventFilter;
    LiquidityAdded(amountA?: null, amountB?: null): LiquidityAddedEventFilter;

    "LiquidityRemoved(uint256,uint256)"(
      amountA?: null,
      amountB?: null
    ): LiquidityRemovedEventFilter;
    LiquidityRemoved(
      amountA?: null,
      amountB?: null
    ): LiquidityRemovedEventFilter;

    "Swap(address,address,uint256,uint256)"(
      user?: string | null,
      tokenIn?: null,
      amountIn?: null,
      amountOut?: null
    ): SwapEventFilter;
    Swap(
      user?: string | null,
      tokenIn?: null,
      amountIn?: null,
      amountOut?: null
    ): SwapEventFilter;
  };

  estimateGas: {
    FEE_BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      amountA: BigNumberish,
      amountB: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAmountOut(
      amountIn: BigNumberish,
      tokenIn: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      amountA: BigNumberish,
      amountB: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    reserveA(overrides?: CallOverrides): Promise<BigNumber>;

    reserveB(overrides?: CallOverrides): Promise<BigNumber>;

    setReserves(
      _reserveA: BigNumberish,
      _reserveB: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapAForB(
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapBForA(
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    tokenA(overrides?: CallOverrides): Promise<BigNumber>;

    tokenB(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_BASIS_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidity(
      amountA: BigNumberish,
      amountB: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      amountIn: BigNumberish,
      tokenIn: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidity(
      amountA: BigNumberish,
      amountB: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    reserveA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setReserves(
      _reserveA: BigNumberish,
      _reserveB: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapAForB(
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapBForA(
      amountIn: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tokenA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenB(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
