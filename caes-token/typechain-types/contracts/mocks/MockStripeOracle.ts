/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace MockStripeOracle {
  export type PaymentDataStruct = {
    paymentId: BytesLike;
    user: string;
    amount: BigNumberish;
    currency: string;
    confirmed: boolean;
    timestamp: BigNumberish;
  };

  export type PaymentDataStructOutput = [
    string,
    string,
    BigNumber,
    string,
    boolean,
    BigNumber
  ] & {
    paymentId: string;
    user: string;
    amount: BigNumber;
    currency: string;
    confirmed: boolean;
    timestamp: BigNumber;
  };
}

export interface MockStripeOracleInterface extends utils.Interface {
  functions: {
    "confirmPayment(bytes32,address,uint256,string)": FunctionFragment;
    "failPayment(bytes32,string)": FunctionFragment;
    "getConversionRate(string)": FunctionFragment;
    "getPayment(bytes32)": FunctionFragment;
    "isPaymentConfirmed(bytes32)": FunctionFragment;
    "payments(bytes32)": FunctionFragment;
    "userTotalDeposits(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "confirmPayment"
      | "failPayment"
      | "getConversionRate"
      | "getPayment"
      | "isPaymentConfirmed"
      | "payments"
      | "userTotalDeposits"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "confirmPayment",
    values: [BytesLike, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "failPayment",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getConversionRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayment",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPaymentConfirmed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "payments", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "userTotalDeposits",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "confirmPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConversionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPayment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPaymentConfirmed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payments", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userTotalDeposits",
    data: BytesLike
  ): Result;

  events: {
    "PaymentConfirmed(bytes32,address,uint256)": EventFragment;
    "PaymentFailed(bytes32,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PaymentConfirmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentFailed"): EventFragment;
}

export interface PaymentConfirmedEventObject {
  paymentId: string;
  user: string;
  amount: BigNumber;
}
export type PaymentConfirmedEvent = TypedEvent<
  [string, string, BigNumber],
  PaymentConfirmedEventObject
>;

export type PaymentConfirmedEventFilter =
  TypedEventFilter<PaymentConfirmedEvent>;

export interface PaymentFailedEventObject {
  paymentId: string;
  reason: string;
}
export type PaymentFailedEvent = TypedEvent<
  [string, string],
  PaymentFailedEventObject
>;

export type PaymentFailedEventFilter = TypedEventFilter<PaymentFailedEvent>;

export interface MockStripeOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockStripeOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    confirmPayment(
      paymentId: BytesLike,
      user: string,
      amount: BigNumberish,
      currency: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    failPayment(
      paymentId: BytesLike,
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getConversionRate(
      currency: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPayment(
      paymentId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[MockStripeOracle.PaymentDataStructOutput]>;

    isPaymentConfirmed(
      paymentId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    payments(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, boolean, BigNumber] & {
        paymentId: string;
        user: string;
        amount: BigNumber;
        currency: string;
        confirmed: boolean;
        timestamp: BigNumber;
      }
    >;

    userTotalDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  confirmPayment(
    paymentId: BytesLike,
    user: string,
    amount: BigNumberish,
    currency: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  failPayment(
    paymentId: BytesLike,
    reason: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getConversionRate(
    currency: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPayment(
    paymentId: BytesLike,
    overrides?: CallOverrides
  ): Promise<MockStripeOracle.PaymentDataStructOutput>;

  isPaymentConfirmed(
    paymentId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  payments(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string, boolean, BigNumber] & {
      paymentId: string;
      user: string;
      amount: BigNumber;
      currency: string;
      confirmed: boolean;
      timestamp: BigNumber;
    }
  >;

  userTotalDeposits(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    confirmPayment(
      paymentId: BytesLike,
      user: string,
      amount: BigNumberish,
      currency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    failPayment(
      paymentId: BytesLike,
      reason: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getConversionRate(
      currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayment(
      paymentId: BytesLike,
      overrides?: CallOverrides
    ): Promise<MockStripeOracle.PaymentDataStructOutput>;

    isPaymentConfirmed(
      paymentId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    payments(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, boolean, BigNumber] & {
        paymentId: string;
        user: string;
        amount: BigNumber;
        currency: string;
        confirmed: boolean;
        timestamp: BigNumber;
      }
    >;

    userTotalDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "PaymentConfirmed(bytes32,address,uint256)"(
      paymentId?: BytesLike | null,
      user?: string | null,
      amount?: null
    ): PaymentConfirmedEventFilter;
    PaymentConfirmed(
      paymentId?: BytesLike | null,
      user?: string | null,
      amount?: null
    ): PaymentConfirmedEventFilter;

    "PaymentFailed(bytes32,string)"(
      paymentId?: BytesLike | null,
      reason?: null
    ): PaymentFailedEventFilter;
    PaymentFailed(
      paymentId?: BytesLike | null,
      reason?: null
    ): PaymentFailedEventFilter;
  };

  estimateGas: {
    confirmPayment(
      paymentId: BytesLike,
      user: string,
      amount: BigNumberish,
      currency: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    failPayment(
      paymentId: BytesLike,
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getConversionRate(
      currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayment(
      paymentId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPaymentConfirmed(
      paymentId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payments(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    userTotalDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    confirmPayment(
      paymentId: BytesLike,
      user: string,
      amount: BigNumberish,
      currency: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    failPayment(
      paymentId: BytesLike,
      reason: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getConversionRate(
      currency: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayment(
      paymentId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPaymentConfirmed(
      paymentId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payments(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userTotalDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
