/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockAMM,
  MockAMMInterface,
} from "../../../contracts/mocks/MockAMM";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenB",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amountA",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountB",
        type: "uint256",
      },
    ],
    name: "LiquidityAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amountA",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountB",
        type: "uint256",
      },
    ],
    name: "LiquidityRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    name: "Swap",
    type: "event",
  },
  {
    inputs: [],
    name: "FEE_BASIS_POINTS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256",
      },
    ],
    name: "addLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
    ],
    name: "getAmountOut",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getReserves",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256",
      },
    ],
    name: "removeLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "reserveA",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "reserveB",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_reserveA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_reserveB",
        type: "uint256",
      },
    ],
    name: "setReserves",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    name: "swapAForB",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    name: "swapBForA",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenA",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenB",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60803461008d57601f6109b938819003918201601f19168301916001600160401b0383118484101761009257808492604094855283398101031261008d57610052602061004b836100a8565b92016100a8565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556040516108fc90816100bd8239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820361008d5756fe6040608081526004908136101561001557600080fd5b600091823560e01c8063031020911461047c5780630902f1ac146104575780630fc63d101461042f57806319e36f3b146104105780635f64b55b146103e75780638392b8c0146103ce5780639cd441da146103475780639d7de6b314610239578063a525ad3c1461021d578063dc5fa6c5146101fa578063e619a498146100e55763f140a35a146100a557600080fd5b346100e157816003193601126100e157602435926001600160a01b03841684036100de57506020926100d791356106e7565b9051908152f35b80fd5b8280fd5b50346100e15760203660031901126100e157906020927ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe23561017993359161012d83151561059b565b60025490811515806101ef575b610143906105dc565b61016f61271061015286610644565b04610169610160858361065b565b9160035461068e565b9061066e565b958692831061069b565b6101a18260018060a01b0392610197878560015416309033906107a1565b8333915416610812565b6101ad8460035461068e565b6003556101bc82600254610621565b600255600154855191166001600160a01b0316815260208101939093526040830152339180606081015b0390a251908152f35b50600354151561013a565b5050346102195781600319360112610219576020906002549051908152f35b5080fd5b50503461021957816003193601126102195760209051601e8152f35b509190346102195761024a36610580565b60025482811061030b57600354958287106102cf5750817f6f0f96292ae0038c04f9b6bab30f185d9ca02c471d0983f563f2a4f674aef13795966102918561029994610621565b600255610621565b6003556102c18160018060a01b036102b685828a54163390610812565b339060015416610812565b82519182526020820152a180f35b606490602086519162461bcd60e51b8352820152601660248201527524b739bab33334b1b4b2b73a103932b9b2b93b32902160511b6044820152fd5b835162461bcd60e51b81526020818801526016602482015275496e73756666696369656e742072657365727665204160501b6044820152606490fd5b505034610219577f38f8a0c92f4c5b0b6877f878cb4c0c8d348a47b76d716c8e78f425043df9515b9061037936610580565b6103a28160018060a01b0361039585828a5416309033906107a1565b30903390600154166107a1565b6103ae8260025461068e565b6002556103bd8160035461068e565b60035582519182526020820152a180f35b83346100de576103dd36610580565b9060025560035580f35b50503461021957816003193601126102195760015490516001600160a01b039091168152602090f35b5050346102195781600319360112610219576020906003549051908152f35b505034610219578160031936011261021957905490516001600160a01b039091168152602090f35b8284346100de57806003193601126100de575060025460035482519182526020820152f35b50346100e15760203660031901126100e157906020927ffa2dda1cc1b86e41239702756b13effbc1a092b5c57e3ad320fbe4f3b13fe2356105029335916104c483151561059b565b6002549081151580610575575b6104da906105dc565b61016f6127106104e986610644565b0492610169600354946104fc868261065b565b9261068e565b80546001600160a01b03919061051f9086903090339086166107a1565b61052e83338460015416610812565b61053a8560025461068e565b60025561054983600354610621565b60035554855191166001600160a01b0316815260208101939093526040830152339180606081016101e6565b5060035415156104d1565b6040906003190112610596576004359060243590565b600080fd5b156105a257565b60405162461bcd60e51b81526020600482015260126024820152710416d6f756e74206d757374206265203e20360741b6044820152606490fd5b156105e357565b60405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e74206c697175696469747960501b6044820152606490fd5b9190820391821161062e57565b634e487b7160e01b600052601160045260246000fd5b906126f29182810292818404149015171561062e57565b8181029291811591840414171561062e57565b8115610678570490565b634e487b7160e01b600052601260045260246000fd5b9190820180921161062e57565b156106a257565b60405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e74206f7574707574207265736572766500000000006044820152606490fd5b906106f382151561059b565b6127106107146002549384151580610796575b61070f906105dc565b610644565b600054919004916001600160a01b03908116918116820361074857505090610169610745926104fc6003548261065b565b90565b60015416146107865760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b2103a37b5b2b760991b6044820152606490fd5b610169610160610745938361065b565b506003541515610706565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a081019181831067ffffffffffffffff8411176107fc576107fa9260405261085e565b565b634e487b7160e01b600052604160045260246000fd5b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830193909352918152608081019167ffffffffffffffff8311828410176107fc576107fa926040525b906000602091828151910182855af1156108ba576000513d6108b157506001600160a01b0381163b155b61088f5750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b60011415610888565b6040513d6000823e3d90fdfea26469706673582212202649360a8619ee8d649385b9da7719495528d4ec5c9955c42014b6975c1389b264736f6c63430008160033";

type MockAMMConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockAMMConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockAMM__factory extends ContractFactory {
  constructor(...args: MockAMMConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _tokenA: string,
    _tokenB: string,
    overrides?: Overrides & { from?: string }
  ): Promise<MockAMM> {
    return super.deploy(_tokenA, _tokenB, overrides || {}) as Promise<MockAMM>;
  }
  override getDeployTransaction(
    _tokenA: string,
    _tokenB: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_tokenA, _tokenB, overrides || {});
  }
  override attach(address: string): MockAMM {
    return super.attach(address) as MockAMM;
  }
  override connect(signer: Signer): MockAMM__factory {
    return super.connect(signer) as MockAMM__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAMMInterface {
    return new utils.Interface(_abi) as MockAMMInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockAMM {
    return new Contract(address, _abi, signerOrProvider) as MockAMM;
  }
}
